{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido","text":"<p>Esta documentaci\u00f3n no es m\u00e1s que el resultado de la investigaci\u00f3n y estudio de un alumno acerca del tema en cuesti\u00f3n.  El alumno es quien est\u00e1 d\u00e1ndote la correspondiente bienvenida y responde al nombre de Tom\u00e1s Caruso. </p> <p></p> <p>Ya sea que est\u00e9s estudiando algo relacionado con el basto mundo del desarrollo de software, tengas que sacarte esa molesta instancia final de encima o simplemente tengas curiosidad, te aseguro que este conjunto de informaci\u00f3n encadenada a trav\u00e9s de hiperv\u00ednculos te servir\u00e1 muy bien!.</p>"},{"location":"An%C3%A1lisis%20de%20Sistemas%20y%20Metodolog%C3%ADa%20de%20Sistemas/","title":"An\u00e1lisis de Sistemas y Metodolog\u00eda de Sistemas","text":"<ul> <li>*\u00bfC\u00f3mo empezamos a desarrollar un sistema de informaci\u00f3n? </li> <li>\u00bfQu\u00e9 es lo primero que tenemos que hacer? </li> <li>\u00bfC\u00f3mo representar la idea? </li> <li>\u00bfCu\u00e1ntas personas son suficientes?  Son preguntas que surgen espont\u00e1neamente y nos hacen reflexionar acerca del COMO hacer las cosas siguiendo una Metodolog\u00eda que nos asegure el \u00e9xito.</li> </ul>"},{"location":"An%C3%A1lisis%20de%20Sistemas%20y%20Metodolog%C3%ADa%20de%20Sistemas/#metodologia-de-sistemas","title":"Metodolog\u00eda de Sistemas","text":"<p>Metodolog\u00eda, desde una perspectiva de Sistemas, se trata de estudiar un sistema mediante el enfoque sist\u00e9mico y atendiendo al planteo del tipo de problema a resolver en donde se conjugan personas; recursos f\u00edsicos, materiales y tiempos.</p> <p>Es as\u00ed como se desprende la imperiosa tarea de establecer un m\u00e9todo de abordaje para el desarrollo de un sistema y no fracasar en el intento.</p> <ul> <li>Definimos la Metodolog\u00eda de sistemas como un mecanismo que provee las herramientas, m\u00e9todos y procedimientos confiables y repetibles que se adecuan particularmente bien a los problemas que se pretenden resolver y el producto que se quiere desarrollar. </li> </ul>"},{"location":"Metodolog%C3%ADa/","title":"Metodolog\u00eda","text":""},{"location":"Metodolog%C3%ADa/#concepto","title":"Concepto","text":"<p>Kaplan</p> <p>\u201cI mean by methodology the study\u2014the description, the explanation, and the justification\u2014of methods, and not the methods themselves.\u201d \"There is a right way and a wrong way to do everything, in science as in any other work; or at any rate, there are better and worse ways of doing it. Now, what is often called \"methodology\" is a concern with techniques in this sense.\"</p> <p>Kaplan define la metodolog\u00eda como el estudio y an\u00e1lisis de los m\u00e9todos utilizados en la indagaci\u00f3n cient\u00edfica, queriendo resaltar sus limitaciones, recursos, supuestos y consecuencias. La metodolog\u00eda, para \u00e9l, no es simplemente una colecci\u00f3n de t\u00e9cnicas o un manual de procedimientos, sino una reflexi\u00f3n cr\u00edtica sobre c\u00f3mo se construye el conocimiento cient\u00edfico.</p> <p>Su enfoque es tanto descriptivo (examinar c\u00f3mo funcionan los m\u00e9todos) como prescriptivo (sugerir c\u00f3mo podr\u00edan mejorarse o aplicarse de manera innovadora).</p> <p>La metodolog\u00eda es una disciplina que busca comprender el proceso de indagaci\u00f3n en su totalidad, integrando aspectos pr\u00e1cticos, filos\u00f3ficos y contextuales.</p> <p>Kaplan defiende la autonom\u00eda de la indagaci\u00f3n, afirmando que \"la b\u00fasqueda de la verdad no responde a nada ni a nadie que no forme parte de esa b\u00fasqueda misma\".</p> <p>Esto implica que la metodolog\u00eda debe priorizar los objetivos internos de la ciencia, no las presiones externas (como modas acad\u00e9micas o agendas pol\u00edticas). Agrego esto \u00faltimo ya que Kaplan escribe en un momento en que la filosof\u00eda de la ciencia estaba dominada por el positivismo l\u00f3gico y los estudios de las ciencias f\u00edsicas. </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/A%20note%20on%20the%20%27V-model%27/","title":"A note on the 'V model'","text":"<p>%%Este apartado es una especie de agregado (b\u00e1sicamente porque es mencionado en el apunte te\u00f3rico de la materia y puesto como una nota en el libro)%%</p> <p>Por lo general el enfoque de pruebas sigue el modelo en V, modelo el cual Nick Jenkins denomina \"horrible\". Este tipo de Modelos de PROCESO (brevemente mencionado en su respectivo inciso) estructura el desarrollo en niveles. </p> <ul> <li>Para cada fase de desarrollo en la parte izquierda, se define un nivel de prueba correspondiente en la parte derecha. Por ejemplo:<ul> <li>Los requisitos del sistema se validan mediante pruebas de aceptaci\u00f3n.</li> <li>El dise\u00f1o detallado se verifica con pruebas unitarias.</li> </ul> </li> <li>Las pruebas se planifican en paralelo, pero su ejecuci\u00f3n ocurre despu\u00e9s de que se completa el desarrollo del c\u00f3digo.</li> </ul>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/A%20note%20on%20the%20%27V-model%27/#opinion-del-amigo-jenkins","title":"Opini\u00f3n del amigo Jenkins.","text":"<p>\"No me gusta porque prioriza las tareas de verificaci\u00f3n sobre las de validaci\u00f3n. Al igual que el modelo en cascada, se basa en la perfecci\u00f3n de cada fase y, en \u00faltima instancia, solo detecta errores al final del ciclo. Los errores se propagan f\u00e1cilmente de una fase a otra, consumiendo tiempo y esfuerzo\". \"Sin embargo, el modelo V ilustra la importancia de los diferentes niveles de pruebas en las distintas fases del proyecto.\"</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Alpha%20vs.%20Beta%20Testing/","title":"Alpha vs. Beta Testing","text":"<p>Para entender mejor los tipos de pruebas de aceptaci\u00f3n m\u00e1s comunes, definiremos antes los t\u00e9rminos Alpha y Beta en el contexto de software: ambos son utilizados para describir fases espec\u00edficas en el ciclo de vida de un producto antes del lanzamiento oficial.</p> <p>Alpha. Es una etapa temprana del desarrollo, donde el producto est\u00e1 funcional pero incompleto, con posibles errores significativos. Es una versi\u00f3n preliminar que incluye las caracter\u00edsticas principales, pero no todas las funcionalidades est\u00e1n completamente pulidas. Suele carecer de optimizaciones de rendimiento o usabilidad. No est\u00e1 destinada al p\u00fablico general, sino a equipos internos.</p> <p>Beta. Es una etapa m\u00e1s avanzada, donde el software est\u00e1 m\u00e1s completo y estable que en la fase alpha. Es una versi\u00f3n cercana a la final, con la mayor\u00eda de las funcionalidades implementadas. Se distribuye a usuarios externos para pruebas en entornos reales, con el objetivo de recopilar feedback para ajustes finales.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Alpha%20vs.%20Beta%20Testing/#alpha-testing","title":"Alpha Testing","text":"<p>Realizado internamente por los desarrolladores y testers para validar las funciones b\u00e1sicas antes de liberar a los usuarios. El objetivo es asegurar que el software est\u00e9 listo para pruebas externas. - Se realiza temprano, cerca del final del desarrollo, despu\u00e9s de pruebas unitarias y antes de pasar a la fase beta. - En modelos \u00e1giles puede implementarse en iteraciones continuas de integraci\u00f3n y entrega (CI/CD). - En modelos de desarrollo tradicionales tiene una trascendencia crucial l\u00f3gicamente. - Los desarrolladores revisan el c\u00f3digo (pruebas de caja blanca), y luego el equipo QA realiza pruebas desde la perspectiva del usuario (pruebas de caja negra). - Se documentan errores, se corrigen y se revalida el software.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Alpha%20vs.%20Beta%20Testing/#beta-testing","title":"Beta Testing","text":"<p>Es un proceso de demostraci\u00f3n de la calidad de un programa cuando est\u00e1 terminado de forma completa o parcial, en un entorno real, por usuarios externos/finales.  Etapa esencial para localizar problemas que no fueron detectados por los desarrolladores ni por el equipo de pruebas. El objetivo es recopilar feedback de usuarios finales, e identificar fallos espec\u00edficos del uso cotidiano. - Esta etapa tambi\u00e9n ayuda a construir una comunidad alrededor del producto, ya que los betatesters a menudo se sienten involucrados en su desarrollo, lo que puede aumentar la lealtad de los usuarios.  - Existen herramientas espec\u00edficas para la realizaci\u00f3n de estas pruebas debido a la importancia que ha ganado esta pr\u00e1ctica con el aumento de software de consumo masivo (aplicaciones m\u00f3viles, videojuegos). - A los betatesters se les ofrece incentivos para participar, ya que reportar errores puede ser tedioso y frustrante. Estos incentivos pueden incluir descuentos, acceso anticipado, reconocimiento dentro de la comunidad, entre otros... - Entre los tipos de beta testing se encuentra el beta testing cerrado (a un grupo limitado de usuarios, seleccionados), abierto (al p\u00fablico general).</p> <p>Antes de Internet y la World Wide Web, exist\u00eda una tercera etapa de pruebas: el \"master dorado\". Aunque ha ca\u00eddo en desuso, esta era la versi\u00f3n de software que se consideraba lo suficientemente completa y precisa como para imprimir el \"master dorado\" o master de CD. Todos los CD que se enviaban eran copias de este master dorado y, por lo tanto, deb\u00edan ser lo m\u00e1s perfectos posible. En la \u00e9poca de las redes sociales y los medios f\u00edsicos, esta era la \u00faltima oportunidad para hacer las cosas bien antes de incurrir en el considerable coste de enviar el software a todos los clientes. No todos lo hac\u00edan bien.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Casos%20de%20Prueba/","title":"Casos de Prueba","text":"<p>Un caso de prueba es un elemento fundamental en el proceso de pruebas de software, que nos asegura la cobertura adecuada de los Requerimientos del sistema.</p> <ul> <li>Su prop\u00f3sito principal es verificar que una funcionalidad espec\u00edfica de un producto de Software opere seg\u00fan lo esperado.</li> </ul> <p>Definici\u00f3n Norma ISO 29119 (2007). Conjunto de precondiciones, entradas y resultados esperados, dise\u00f1ados para guiar la ejecuci\u00f3n de una prueba con el fin de alcanzar los objetivos del proceso de prueba. Puede describirse tambi\u00e9n como un conjunto de condiciones que el analista de QA (Quality Assurance o Aseguramiento de la Calidad) debe validar. En lineas generales, son una herramienta que traza el comportamiento del sistema, y de la misma forma, pueden documentarse estos mismos con herramientas como hojas de c\u00e1lculo (Excel) o automatizadas de gesti\u00f3n de pruebas (Qase, por ejemplo).</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Casos%20de%20Prueba/#elementos-de-un-caso-de-prueba","title":"*Elementos de un Caso de prueba*","text":"<p>Por lo general se compone de los siguientes elementos: 1. Objetivo: Qu\u00e9 funcionalidad o comportamiento del sistema se va a validar.  2. Datos de entrada y ambiente: Valores de entrada necesarios y las condiciones del entorno (hardware, software, configuraci\u00f3n) bajo las cuales se ejecutar\u00e1 la prueba.  3. Comportamiento esperado y actual: Cu\u00e1l es el resultado que se espera obtener y el comportamiento real observado durante la ejecuci\u00f3n. Los m\u00e1s recomendados, y utilizados en el curso son los de la imagen.  La estructura cuenta con las siguientes columnas: - Nro. Caso de Prueba. ID para facilitar trazabilidad. - Prioridad (Alta, Media, Baja). Importancia del caso de prueba. - Precondiciones. Estado inicial o condiciones previas que deben cumplirse antes de la ejecuci\u00f3n. - Pasos. Acciones que el usuario o el sistema deben seguir durante la prueba. Secuencia l\u00f3gica. - Resultado Esperado. Lo que el sistema debe mostrar o hacer si todo se ejecuta correctamente. - Estado (Pasa/Falla). \u00bfEl caso de prueba ha fallado o pasado?. En caso de fallo, se debe especificar el punto exacto del error y su descripci\u00f3n.</p> <p>Caracter\u00edsticas. Un caso de prueba debe ser PRECISO (Sin ambig\u00fcedades, evitando informaci\u00f3n innecesaria), RASTREABLE (Vinculado a alg\u00fan requisito), REPETIBLE (Puede ejecutarse varias veces en diferentes entornos), REUTILIZABLE (Gen\u00e9rico.) </p> <p>Es importante destacar que la relaci\u00f3n entre los requisitos y los casos de prueba no siempre es uno a uno. En muchos casos, un solo requisito puede necesitar varios casos de prueba para ser completamente validado. Existen metodolog\u00edas, como RUP (Proceso Unificado de Rational), que especifican deber\u00eda haber dos casos de prueba por requerimiento: uno negativo y otro positivo.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Casos%20de%20Prueba/#casos-de-prueba-positivos-y-negativos","title":"*Casos de prueba POSITIVOS y NEGATIVOS.*","text":"<p>Un caso de prueba positivo est\u00e1 destinado a demostrar que la funci\u00f3n se comporta como se requiere con una entrada correcta y un caso de prueba negativo est\u00e1 destinado a demostrar que la funci\u00f3n no provoca un error con una entrada incorrecta (o responde de manera adecuada a ese error).</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Casos%20de%20Prueba/#ejemplos","title":"*Ejemplos*","text":"<p>Supongamos los siguientes casos de prueba para un sistema GPS. El primero es un ejemplo de un caso de prueba positivo, a diferencia del tercero, que se trata de uno negativo.   Ahora recordemos, como vimos m\u00e1s arriba, que en caso de un error en un caso de prueba, es decir, que el sistema no se comporte como lo esperado, se debe documentar el mismo de cierta forma, especificando el estado del mismo. El siguiente es un ejemplo de esto. </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Enfoques%20de%20Testing/","title":"Enfoques de Testing","text":"<p>Las pruebas del software pueden ser analizadas desde diferentes enfoques, ofreciendo cada uno una perspectiva distinta sobre c\u00f3mo ejecutar y evaluar el software. La imagen muestra los enfoques m\u00e1s comunes.  Tener en cuenta que este apartado no se refiere en s\u00ed a las pruebas que se realizan, como son detalladas en otros incisos, sino que refiere m\u00e1s a la perspectiva en general que se tiene de estas en conjunto, y su clasificaci\u00f3n.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Enfoques%20de%20Testing/#desde-su-comportamiento","title":"Desde su Comportamiento","text":"<p>Podemos clasificarlas seg\u00fan el comportamiento esperado del sistema al ejecutar las pruebas. - Distinguimos las Pruebas Est\u00e1ticas. Aquellas en las que no se ejecuta el c\u00f3digo del software. Se enfocan en revisar el c\u00f3digo fuente, la documentaci\u00f3n, o el dise\u00f1o del sistema para identificar defectos sin necesidad de ejecutar el programa. Estos defectos pueden ser errores de sintaxis o malas pr\u00e1cticas de programaci\u00f3n, por ejemplo. - Pruebas Din\u00e1micas. Requieren ejecutar el software y observar su comportamiento en tiempo real, para determinar si el software cumple con los requisitos operativos y de rendimiento mientras se ejecuta.  - Ejemplo: Probar la funcionalidad de un formulario de login, verificar si las entradas son procesadas correctamente por el sistema.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Enfoques%20de%20Testing/#desde-su-implementacion-y-ejecucion","title":"Desde su Implementaci\u00f3n y Ejecuci\u00f3n","text":"<p>Seg\u00fan c\u00f3mo se implementen y ejecuten las pruebas. - Pruebas Manuales. Implican la intervenci\u00f3n de un tester humano que sigue un conjunto predefinido de pasos para probar el software. - El objetivo es detectar problemas relacionados con la interacci\u00f3n usuario aplicaci\u00f3n, experiencia de usuario (UX), y comprobar si el sistema funciona correctamente sin herramientas automatizadas. - Ejemplo. Un tester accede a la p\u00e1gina de inicio de sesi\u00f3n, introduce credenciales y verifica si el sistema permite el acceso correctamente. - Pruebas Automatizadas. Se utilizan herramientas de software para ejecutar las pruebas de manera autom\u00e1tica. Son ideales para verificaciones repetitivas, y permitir la ejecuci\u00f3n de pruebas continua durante TODO el ciclo de vida del software. - Ejemplo. Utilizar herramientas como Selenium para automatizar las pruebas de la interfaz de usuario en una aplicaci\u00f3n web.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Enfoques%20de%20Testing/#desde-los-requisitos","title":"Desde los Requisitos","text":"<p>Seg\u00fan el tipo de requisitos que se est\u00e1n verificando. Y se divide principalmente en requisitos funcionales o no funcionales. - Pruebas Funcionales (White Box vs. Black Box). Validan que el software cumpla con las funcionalidades descritas en los documentos de requisitos, y que las caracter\u00edsticas del sistema funcionan de acuerdo con los objetivos de negocio. - Ejemplo. Verificar que un sistema de pago en l\u00ednea acepte pagos correctamente cuando el usuario ingresa los datos de tarjeta de cr\u00e9dito. - Pruebas No Funcionales. Validan rendimiento, usabilidad, seguridad, accesibilidad, eficiencia, etc. Ayudan a evaluar la calidad general del sistema. - Ejemplo. Pruebas de carga, con grandes vol\u00famenes de usuarios simult\u00e1neos.</p> <p></p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Error%2C%20Defecto%20y%20Fallo/","title":"Error, Defecto y Fallo","text":"<p>El testing se enfoca en la identificaci\u00f3n de errores, defectos y fallos dentro de un sistema. Para entender bien estos conceptos, es clave diferenciarlos.</p> <p>(Error) Equivocaci\u00f3n humana. Ocurre cuando una persona comete una equivocaci\u00f3n, ya sea al escribir el c\u00f3digo o al documentar los requisitos del sistema.  Surge de un malentendido, o descuido. El error puede introducir un defecto en el software. - Un programador escribe mal una condici\u00f3n, por ejemplo.</p> <p>(Defecto) El error se introduce en el sistema. Consecuencia de un error que ha sido introducido en el c\u00f3digo o en un documento. Cuando el programa se ejecuta, el defecto puede generar un comportamiento no deseado. Es la anomal\u00eda en el c\u00f3digo o dise\u00f1o que provoca el incumplimiento de requisitos. - Debido al error en la condici\u00f3n l\u00f3gica, el software no procesa correctamente los casos para dicha condici\u00f3n, y esto constituye un defecto. El defecto puede categorizarse seg\u00fan la SEVERIDAD y PRIORIDAD del mismo. Estas caracter\u00edsticas son mejor detalladas en el apartado Gesti\u00f3n de Defectos.</p> <p>(Fallo) El sistema no se comporta como deber\u00eda. Es la manifestaci\u00f3n observable de un defecto, es decir, cuando el software no funciona como se espera en un caso de uso real, produciendo resultados incorrectos o un comportamiento inesperado.  - El usuario ingresa un valor, y gracias al defecto anterior, el programa se detiene o produce un resultado incorrecto, mostrando un mensaje de error inesperado.</p> <p>Un sin\u00f3nimo com\u00fan de defecto es el t\u00e9rmino bug. La palabra \"bug\" (bicho) tiene un origen curioso. En 1947, mientras trabajaban en la supercomputadora Mark II en la Universidad de Harvard, un grupo de cient\u00edficos descubri\u00f3 que una polilla se hab\u00eda colado dentro de la m\u00e1quina, causando un mal funcionamiento. Este incidente fue registrado como el \"primer caso real de un bug encontrado\", y desde entonces, los defectos en software se conocen como \"bugs\".</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Gesti%C3%B3n%20de%20Defectos/","title":"Gesti\u00f3n de Defectos","text":"<p>El prop\u00f3sito de informar un defecto es conseguir que se solucione.</p> <p>Un informe de defectos mal redactado supone una p\u00e9rdida de tiempo y esfuerzo para muchas personas. Un informe conciso y descriptivo permite eliminar un error de la forma m\u00e1s sencilla posible.</p> <p>Adem\u00e1s, para los testers, los informes de defectos representan el principal resultado de su trabajo.  Los informes de defectos van m\u00e1s all\u00e1 de su uso inmediato. Pueden incluso transmitirse a diversos niveles de gesti\u00f3n dentro de diferentes organizaciones.       Existen ciertas caracter\u00edsticas deseables para este reporte, entre ellas est\u00e1 que sea OBJETIVO, ESPEC\u00cdFICO (un informe por defecto), CONCISO (simple y directo), REPRODUCIBLE (suficiente informaci\u00f3n para que cualquier persona pueda repetir/ver claramente el problema), EXPL\u00cdCITO (informaci\u00f3n clara), PERSUASIVO (redactado de forma que promueva a los desarrolladores a corregir el problema). </p> <p>Un informe de defecto escrito sin aislarlo ni generalizarlo es un defecto informado a medias.</p> <p>ISOLACI\u00d3N. Es el proceso de examinar las causas del defecto. Es importante separar los s\u00edntomas del problema de su causa. El aislamiento de un defecto generalmente se realiza haciendo que se manifieste varias veces en diferentes situaciones para comprender c\u00f3mo y cu\u00e1ndo ocurre.</p> <p>GENERALIZACI\u00d3N. Es el proceso de entender de forma amplia el impacto del defecto. Como sabemos, los desarrolladores reutilizan c\u00f3digo y esto provoca que un error presente en una porci\u00f3n de c\u00f3digo afecte a varios m\u00f3dulos del sistema. Quienes registren defectos deben intentar extrapolar d\u00f3nde podr\u00eda ocurrir un problema para que el desarrollador considere el contexto completo del defecto, no solo un incidente aislado.</p> <p>Cuando un defecto es detectado, se documenta con un conjunto de atributos clave que permiten su gesti\u00f3n y resoluci\u00f3n, entre ellas: - ID. N\u00famero \u00fanico que identifica el defecto. - Nombre. Breve descripci\u00f3n. - Severidad. Impacto del defecto en el sistema. - Prioridad. Urgencia con la que debe corregirse.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Gesti%C3%B3n%20de%20Defectos/#severidad","title":"Severidad","text":"<p>La severidad mide el impacto del defecto en la funcionalidad del sistema o experiencia del usuario. </p> <p>Podemos clasificar la severidad de los defectos en Severidad-1 (impide la finalizaci\u00f3n del proyecto) y Severidad-2 (defectos que en cantidades limitadas permiten que el proyecto se complete). Tambi\u00e9n podemos clasificarlos en funci\u00f3n de: - Impacto (Alto/Bajo). Gravedad del defecto cuando ocurre. - Probabilidad (Alta/Baja). Frecuencia con la que es probable que ocurra el defecto.  </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Gesti%C3%B3n%20de%20Defectos/#prioridad","title":"Prioridad","text":"<p>La prioridad indica qu\u00e9 tan urgente es corregir el defecto. Un defecto menor en una pantalla poco usada es diferente en prioridad a un defecto cr\u00edtico en un sistema de pagos.  Cuando se tiene un defecto, es importante determinar si debe corregirse inmediatamente, esto determina la prioridad del mismo. Se suelen clasificar en:  - Alta. Debe resolverse dentro de un d\u00eda h\u00e1bil. Afecta la funcionalidad principal o bloquea m\u00faltiples casos de prueba.  - Media. Pueden ser solucionados dentro del ciclo normal de desarrollo ya que no bloquean la aplicaci\u00f3n. Un defecto en una funcionalidad no cr\u00edtica y que puede corregirse en una versi\u00f3n futura, por ejemplo.  - Baja. No afecta la funcionalidad, y tiene soluciones alternativas. Se debe corregir luego de otros problemas m\u00e1s importantes. Un icono que no se alinea correctamente en una interfaz de usuario, por ejemplo. </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Gesti%C3%B3n%20de%20Defectos/#estado-de-un-defecto","title":"Estado de un Defecto*","text":"<p> Estados comunes en el ciclo de vida de un defecto. 1. Nuevo. Un tester ha identificado y reportado un nuevo defecto, el cual est\u00e1 pendiente de ser asignado a un desarrollador para sus resoluci\u00f3n. 2. Asignado. Un desarrollador es responsable de investigarlo y solucionarlo. 3. Rechazado. El desarrollador lo ha considerado inv\u00e1lido. 4. Solucionado. El desarrollador ha corregido el defecto. 5. Listo para la prueba. El c\u00f3digo corregido fue incorporado, y es accesible para el tester para que este verifique que realmente fue corregido. 6. Reprueba fallida. Luego de rehacer pruebas, el tester descubre que el defecto sigue presente, y es devuelto al equipo de desarrollo. 7. Cerrado. El defecto fue corregido y ha pasado las pruebas de validaci\u00f3n. Tambi\u00e9n hay flujos diferentes que el defecto puede tomar, por ejemplo: - Diferido. La correcci\u00f3n del mismo fue postergada, para un pr\u00f3ximo sprint o versi\u00f3n futura. - Duplicado. El mismo ya fue reportado previamente y se encuentra en proceso de resoluci\u00f3n o ya ha sido resuelto.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Given-When-Then%20%28Dado-Cuando-Entonces%29/","title":"Given When Then (Dado Cuando Entonces)","text":"<p>Gherkin es un lenguaje de patrones en ingl\u00e9s simple que se usa para especificar ejemplos de escenarios que ilustran las reglas o Criterios de Aceptaci\u00f3n detr\u00e1s de un requisito. La estructura es un escenario con la forma:  - Dado (un conjunto de condiciones previas o contexto) - Cuando (se inicia una acci\u00f3n o un disparador)  - Entonces (el programa produce un resultado o un resultado)</p> <p>[!Jenkins]  \"Cuando Gherkin est\u00e1 vinculado al desarrollo metodolog\u00edas como BDD, esto proporciona un virtuoso bucle de retroalimentaci\u00f3n donde la especificaci\u00f3n valida directamente el comportamiento de la aplicaci\u00f3n a trav\u00e9s de Pruebas Automatizadas. Esto minimiza los problemas de mantenimiento con pruebas, proporciona un conjunto de pruebas que son directamente rastreables a los requisitos y ofrece a los desarrolladores una forma de refactorizar constructivamente su c\u00f3digo.\u201d</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Given-When-Then%20%28Dado-Cuando-Entonces%29/#given-dado","title":"Given (Dado)","text":"<p>Establece el contexto inicial o las condiciones previas de un escenario. Describe el estado del sistema antes de que ocurra la acci\u00f3n principal. Se utiliza para definir las precondiciones necesarias para que el escenario tenga sentido. Por ejemplo, datos iniciales, configuraciones o estados del sistema.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Given-When-Then%20%28Dado-Cuando-Entonces%29/#when-cuando","title":"When (Cuando)","text":"<p>Describe la acci\u00f3n o el evento que desencadena un cambio en el sistema. Es el paso donde se realiza la interacci\u00f3n principal que se est\u00e1 probando. Representa lo que el usuario o el sistema hace para provocar una respuesta.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Given-When-Then%20%28Dado-Cuando-Entonces%29/#then-entonces","title":"Then (Entonces)","text":"<p>Especifica el resultado esperado tras la acci\u00f3n realizada en el \"When\". Define c\u00f3mo deber\u00eda comportarse el sistema o qu\u00e9 deber\u00eda observarse. Se usa para verificar los resultados de la acci\u00f3n, comprobando si el sistema cumple con el comportamiento esperado.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Given-When-Then%20%28Dado-Cuando-Entonces%29/#ejemplo-estructura-completa-de-un-escenario-en-gherkin","title":"Ejemplo. Estructura Completa de un Escenario en Gherkin","text":"<p><pre><code>Feature: Inicio de sesi\u00f3n de usuario\n  Scenario: Inicio de sesi\u00f3n exitoso\n    Given que un usuario est\u00e1 registrado en el sistema\n    And el usuario tiene credenciales v\u00e1lidas\n    When el usuario inicia sesi\u00f3n con credenciales v\u00e1lidas\n    Then el usuario es redirigido al panel principal\n    And se muestra un mensaje de bienvenida\n</code></pre> Un escenario t\u00edpico en Gherkin combina estos tres elementos para describir un comportamiento espec\u00edfico. Adem\u00e1s, puede incluir otros elementos como And (Y) o But (Pero) para a\u00f1adir m\u00e1s condiciones o resultados. En otros ejemplos, la parte de \"Escenario (Scenario)\" suele ser m\u00e1s larga, pero al fin y al cabo se busca simplemente dar una descripci\u00f3n de la funcionalidad y el resultado esperado.  Por otra parte, el agregado de \"Funcionalidad (Feature)\" hace referencia a esto mismo, solamente la funcionalidad que se est\u00e1 trabajando en el criterio de aceptaci\u00f3n. Puede funcionar como identificador para el escenario.</p> <p>Los escenarios en Gherkin sirven como un puente entre la descripci\u00f3n de alto nivel de las Historias de Usuario (\"Criterios de Aceptaci\u00f3n\") y las Pruebas Automatizadas, ya que cada paso (Given, When, Then) puede ser mapeado a c\u00f3digo ejecutable.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Principios%20del%20Testing/","title":"Principios del Testing","text":"<p>La informaci\u00f3n de este apartado es sacada del libro \u201cFundation Level Sillabus\u201d, por parte del International Software Testing Qualifications Board (ISTQB). Organizaci\u00f3n sin \u00e1nimo de lucro creada por empresas, instituciones y profesionales especializados en testing y la industria del software. </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Principios%20del%20Testing/#1-el-testing-muestra-la-presencia-de-defectos-no-su-ausencia","title":"1. El testing muestra la presencia de defectos, no su ausencia.","text":"<p>Las pruebas pueden revelar la existencia de errores en el software, pero nunca pueden demostrar que el producto est\u00e1 completamente libre de defectos. Incluso si no se encuentran fallos, no se puede garantizar que no existan.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Principios%20del%20Testing/#2-el-testing-exhaustivo-es-imposible","title":"2. El testing exhaustivo es imposible.","text":"<p>Es imposible probar todas las combinaciones posibles de entradas y escenarios en un software, ya que esto requerir\u00eda tiempo y recursos ilimitados. Por lo tanto, se deben priorizar las pruebas en funci\u00f3n del riesgo y las \u00e1reas m\u00e1s cr\u00edticas del sistema.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Principios%20del%20Testing/#3-testea-temprano-y-frecuente","title":"3. Testea temprano, y frecuente.","text":"<p>[!Barry_Boehm] \u201cUn error encontrado en la fase de dise\u00f1o cuesta diez veces menos que uno en la codificaci\u00f3n y cien veces menos que uno encontrado despu\u00e9s del lanzamiento.\u201d</p> <p>Si quieres encontrar errores, comienza tan pronto como sea posible. Eso significa pruebas unitarias para los desarrolladores, pruebas de integraci\u00f3n durante el ensamblaje y pruebas de sistema, en ese orden de prioridad.   Identificar y corregir defectos en etapas tempranas es mucho m\u00e1s econ\u00f3mico que hacerlo al final del proyecto.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Principios%20del%20Testing/#4-agrupacion-de-defectos","title":"4. Agrupaci\u00f3n de defectos.","text":"<p>A menudo, la mayor\u00eda de los defectos se concentran en unos pocos m\u00f3dulos del software. Esto sigue el principio de Pareto: el 80% de los defectos provienen del 20% de los m\u00f3dulos. Dirigir m\u00e1s pruebas a estas \u00e1reas puede aumentar la efectividad del testing.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Principios%20del%20Testing/#5-paradoja-del-pesticida","title":"5. Paradoja del Pesticida.","text":"<p>Si las mismas pruebas se repiten una y otra vez, eventualmente dejar\u00e1n de encontrar nuevos errores. Como sucede con los pesticidas que pierden eficacia cuando los insectos desarrollan resistencia, las pruebas tambi\u00e9n deben actualizarse y mejorarse constantemente para ser efectivas.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Principios%20del%20Testing/#6-el-testing-depende-del-contexto","title":"6. El testing depende del contexto.","text":"<p>Las pruebas deben adaptarse al tipo de software que se est\u00e1 evaluando. Los riesgos y requisitos de un software m\u00e9dico, por ejemplo, son muy diferentes a los de un sistema comercial.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Principios%20del%20Testing/#7-falsedad-de-la-ausencia-de-errores","title":"7. Falsedad de la ausencia de errores.","text":"<p>Encontrar y corregir muchos defectos no garantiza el \u00e9xito del software. Aunque un producto puede estar libre de errores t\u00e9cnicos, puede fallar si no satisface las necesidades del usuario o si los requisitos no se definieron adecuadamente.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Proceso%20de%20Prueba/","title":"Proceso de Prueba","text":"<p>El PROCESO de pruebas de software incluye una serie de actividades esenciales que aseguran la Calidad del producto. </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Proceso%20de%20Prueba/#planificacion-de-las-pruebas","title":"Planificaci\u00f3n de las Pruebas.","text":"<p>Esta etapa implica definir el enfoque, los objetivos, el alcance y los recursos necesarios para las pruebas. Se establece un plan de pruebas que detalla qu\u00e9 se probar\u00e1, c\u00f3mo se probar\u00e1 y qui\u00e9n lo har\u00e1. El PLAN DE PRUEBAS es el documento que incluye la asignaci\u00f3n de recursos, la gesti\u00f3n de riesgos y los criterios de cobertura de las pruebas, lo que facilita la toma de decisiones durante todo el proceso. Por lo general, un plan de prueba cuenta con los siguientes elementos: - Introducci\u00f3n. Prop\u00f3sito y alcance del plan. - Caracter\u00edsticas a probar. Lista de aspectos/requisitos a probar. - Caracter\u00edsticas que no deben ser probadas.  - Supuestos. Suposiciones que se tienen respecto a cierta funcionalidad o m\u00f3dulo del sistema en particular. - Aproximaci\u00f3n. Estrategia general (manuales, automatizadas). - Criterios de Aceptaci\u00f3n.  - Entregables de las pruebas. C\u00f3mo ser\u00e1n documentados los resultados de las pruebas. (Los Casos de Prueba, por ejemplo, sirven como base para esta documentaci\u00f3n.) - Tareas de prueba. Actividades espec\u00edficas que se realizar\u00e1n en las pruebas. (Crear los Casos de Prueba, por ejemplo) - Ambiente. Descripci\u00f3n del entorno de pruebas (hardware, software, configuraciones) necesario para la ejecuci\u00f3n de los casos de prueba.</p> <p>El punto de partida m\u00e1s com\u00fan para la planificaci\u00f3n de pruebas es una descomposici\u00f3n funcional del producto basada en una especificaci\u00f3n t\u00e9cnica, esto nos permite abordar distintas caracter\u00edsticas deseables a testear. Este es un excelente punto de partida, pero no debe ser el \u00fanico aspecto que se aborde; de lo contrario, las pruebas se limitar\u00e1n a la 'verificaci\u00f3n' pero no a la 'validaci\u00f3n'. A continuaci\u00f3n una lista de aspectos comunes a verificar: </p> <p>Diversas fuentes sugieren en esta etapa identificar objetivos a testear (funcionalidad o rendimiento), y definir m\u00e9tricas de \u00e9xito, en cierto per\u00edodo de tiempo. Otra sugerencia suele ser que los criterios de aceptaci\u00f3n de las historias de usuario sirvan como base para las pruebas.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Proceso%20de%20Prueba/#especificacion-de-las-pruebas","title":"Especificaci\u00f3n de las Pruebas.","text":"<p>Esta fase consiste en la definici\u00f3n detallada de los Casos de Prueba, considerando principalmente el ambiente de prueba. Actividades clave: - Analizar los requisitos o historias de usuario para identificar casos de prueba. - Dise\u00f1ar casos de prueba con entradas, pasos y resultados esperados. - Preparar datos de prueba (reales o simulados). - Priorizar casos de prueba seg\u00fan riesgos o criticidad. Es crucial en esta etapa asegurarse de que los requerimientos sean testeables, es decir, que puedan ser verificados de manera adecuada mediante pruebas.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Proceso%20de%20Prueba/#ejecucion-de-las-pruebas","title":"Ejecuci\u00f3n de las Pruebas.","text":"<p>Se ejecutan los casos de prueba en el entorno preparado, registrando los resultados y detectando defectos. El sistema pasa por todos los niveles de prueba detallados en otros incisos. Actividades clave: - Configurar el entorno de pruebas. - Ejecutar los casos de prueba (manual o autom\u00e1ticamente). - Registrar los resultados (aprobado/fallido) y los defectos encontrados. - Reproducir y documentar errores para el equipo de desarrollo. La correcta instalaci\u00f3n de la versi\u00f3n del software previo a la ejecuci\u00f3n de las pruebas (pero perteneciente a la etapa) se le denomina build. </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Proceso%20de%20Prueba/#analisis-de-las-pruebas","title":"An\u00e1lisis de las Pruebas.","text":"<p>El an\u00e1lisis, es principalmente una fase en la que el probador de software aplica sus habilidades para interpretar los resultados obtenidos. Estas habilidades se desarrollan a lo largo del tiempo, ya que el tester adquiere experiencia y conocimiento mientras participa en el proceso de pruebas. Es en esta etapa, donde el probador compara los resultados reales con los esperados, se hace la clasificaci\u00f3n de defectos</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Proceso%20de%20Prueba/#caracteristicas-clave-de-la-etapa-de-analisis","title":"Caracter\u00edsticas clave de la etapa de an\u00e1lisis","text":"<ol> <li>Interpretaci\u00f3n de resultados:<ul> <li>El probador compara los resultados reales de la etapa de ejecuci\u00f3n con los resultados esperados definidos en los casos de prueba.</li> </ul> </li> <li>Clasificaci\u00f3n de defectos:<ul> <li>Los defectos encontrados se clasifican seg\u00fan su severidad y prioridad, como vimos en el apartado de Gesti\u00f3n de Defectos.</li> </ul> </li> <li>Toma de decisiones:<ul> <li>Basado en el an\u00e1lisis, el probador recomienda acciones, como aprobar el software para su liberaci\u00f3n, requerir correcciones y repetir pruebas (pruebas de regresi\u00f3n).</li> <li>Se subraya la importancia de comunicar estas decisiones a los interesados (desarrolladores, gerentes, clientes) mediante reportes claros.</li> </ul> </li> </ol>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Proceso%20de%20Prueba/#evaluacion-de-las-pruebas","title":"Evaluaci\u00f3n de las Pruebas.","text":"<p>Se comparan los resultados obtenidos con los planes y criterios de aceptaci\u00f3n previamente establecidos. Se verifica que los entregables sean correctos, que los defectos hayan sido corregidos.  Al finalizar, se elabora un resumen/reporte de los resultados.  La imagen es un ejemplo de un reporte de una prueba de humo en forma manual.  La evaluaci\u00f3n sobre si el software cumple con los criterios de salida definidos en el plan de pruebas, suele tener en cuenta aspectos como: - Porcentaje m\u00ednimo de casos de prueba aprobados. - Ausencia de defectos cr\u00edticos o de alta severidad. - Cobertura de requisitos alcanzada.</p> <p>No est\u00e1 de m\u00e1s decir que el reporte de esta etapa puede ser completamente automatizado, en herramientas como Qase (plataforma de gesti\u00f3n de pruebas).</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Automatizadas/","title":"Pruebas Automatizadas","text":"<p>La automatizaci\u00f3n de pruebas consiste en utilizar herramientas especializadas para realizar el proceso de testing de software de forma autom\u00e1tica.</p> <p>Estas permiten, por obvias razones, alcanzar una mayor cobertura en las pruebas y reducir la necesidad de intervenci\u00f3n manual, aunque no debe confundirse con ser un proceso simple o r\u00e1pido. La automatizaci\u00f3n requiere una planificaci\u00f3n cuidadosa, dise\u00f1o detallado, y una implementaci\u00f3n correcta, lo que implica una inversi\u00f3n significativa de tiempo y esfuerzo. Es una soluci\u00f3n pensada para el largo plazo.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Automatizadas/#una-prueba-automatizada-no-reemplaza-una-prueba-manual","title":"Una Prueba Automatizada NO Reemplaza una Prueba Manual","text":"<p>Las organizaciones a menudo buscan reducir el costo de las pruebas. La mayor\u00eda de las organizaciones no se sienten c\u00f3modas reduciendo la cantidad de pruebas, as\u00ed que en su lugar buscan mejorar la eficiencia de las pruebas. Afortunadamente hay variedad de herramientas para este cometido. De todas formas, existen mitos respecto a estas herramientas de automatizaci\u00f3n de pruebas: - La Automatizaci\u00f3n NO encuentra m\u00e1s errores que un Tester experimentado y familiarizado con el sistema.  - La Automatizaci\u00f3n NO soluciona el Proceso de Desarrollo. Los testers no crean defectos, los desarrolladores lo hacen, y las pruebas automatizadas no mejoran el desarrollo de los desarrolladores. - Las Pruebas Automatizadas NO son necesariamente m\u00e1s r\u00e1pidas. El esfuerzo inicial es mucho mayor que para una prueba manual y solo compensar\u00e1 a lo largo del tiempo. A la par que tambi\u00e9n es costoso mantenerlas. - NO todo necesita ser Automatizado. Hay sistemas que cambian demasiado r\u00e1pido para aplicar automatizaci\u00f3n. Tomemos el ejemplo de una interfaz de usuario, la cual es la parte del sistema que m\u00e1s ven los usuarios, y por ende, que m\u00e1s necesita ser actualizada.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Automatizadas/#principios","title":"Principios","text":"<p>Luego de lo mencionado, podemos se\u00f1alar algunos principios que hacen a las pruebas automatizadas m\u00e1s eficaces. Entre ellos la Capacidad de mantenimiento (actualizarlas f\u00e1cilmente), Flexibilidad (adaptaci\u00f3n a cambios en requerimientos o en el sistema), Capacidad de control (monitoreo), Escalabilidad (poder ejecutarse en entornos con creciente carga de trabajo), Tiempo de ejecuci\u00f3n r\u00e1pido.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Automatizadas/#pruebas-donde-la-automatizacion-es-beneficiosa","title":"*Pruebas donde la Automatizaci\u00f3n es beneficiosa*","text":"<ul> <li>Pruebas de carga y rendimiento. Ser\u00eda inviable que cientos de usuarios realicen estas pruebas manualmente.</li> <li>Pruebas de humo (Smoke Tests). </li> <li>Pruebas de configuraci\u00f3n de datos. Configurar datos de prueba puede ser una tarea tediosa y propensa a errores</li> <li>Pruebas repetitivas. </li> <li>Pruebas de regresi\u00f3n. Para detectar cambios inesperados, pero solo si la interfaz (ya sea GUI, API o Servicio) es estable; de lo contrario, es necesario refactorizar las pruebas.</li> </ul>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Automatizadas/#herramientas-populares","title":"Herramientas Populares","text":""},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Funcionales%20%28White%20Box%20vs.%20Black%20Box%29/","title":"Pruebas Funcionales (White Box vs. Black Box)","text":""},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Funcionales%20%28White%20Box%20vs.%20Black%20Box%29/#1-pruebas-de-caja-blanca-white-box-testing","title":"1. Pruebas de Caja Blanca (White Box Testing)","text":"<p>Conocidas tambi\u00e9n como pruebas estructurales. Se enfoca en validar la l\u00f3gica interna del c\u00f3digo y su estructura.  El tester necesita acceso completo al c\u00f3digo fuente para analizar el flujo del programa y asegurar que cada l\u00ednea funcione como se espera. - Significan analizar el c\u00f3digo en s\u00ed mismo, y tener un entendimiento profundo de este. - Se busca que el software se comporte correctamente en todas las situaciones posibles. - Por lo general, est\u00e1n m\u00e1s al alcance de ser realizadas por los mismos desarrolladores. - Pueden ser hechas en cualquier etapa del ciclo de vida de un software, pero tienden a encontrarse durante pruebas unitarias. - Abarcan t\u00e9cnicas como      -La Cobertura de Sentencias (cada sentencia ejecutable en el c\u00f3digo es ejecutada al menos una vez durante la prueba: mientras se ejecute, est\u00e1 cubierta, sin importar condicionales o ciclos).     -La Cobertura de Decisiones (todos los resultados if/switch son probados, cada posible resultado de una decisi\u00f3n l\u00f3gica).     -La Cobertura de Caminos (Recorre todos los caminos posibles en el c\u00f3digo, desde el inicio hasta el final del programa. Toda posible secuencia de ejecuci\u00f3n es recorrida. Puede crecer exponencialmente con decisiones y bucles).     -Pruebas Unitarias. - Ejemplo.** El ejemplo que primero se imagina es el de una prueba unitaria: utilizar un framework como JUnit para comprobar que una funci\u00f3n espec\u00edfica devuelve el resultado correcto para todos los posibles valores de entrada.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Funcionales%20%28White%20Box%20vs.%20Black%20Box%29/#2-pruebas-de-caja-negra-black-box-testing","title":"2. Pruebas de Caja Negra (Black Box Testing)","text":"<p>Probar la funcionalidad sin conocer la implementaci\u00f3n interna del sistema. No requiere acceso al c\u00f3digo fuente. - Se basan en los requisitos del usuario y las especificaciones del sistema. - Se enfocan en verificar un resultado espec\u00edfico con determinados valores de entrada. - Las Pruebas de Aceptaci\u00f3n del usuario es un ejemplo de los tests de caja negra. - Abarcan t\u00e9cnicas como     -Partici\u00f3n de equivalencia (se agrupan datos similares, y se los toma como el mismo caso de prueba para reducir los mismos).     -Pruebas de caso de uso (valida que los flujos de usuario funcionen correctamente).     -An\u00e1lisis de valores l\u00edmite (verificar comportamiento con valores extremos de entrada)     -Tablas de decisi\u00f3n (utilizar tablas para representar condiciones de entrada y sus salidas correspondientes) - Ejemplo. Pruebas de login, ingresar combinaciones de usuario y contrase\u00f1a (correctas, incorrectas, vac\u00edas) para comprobar que el sistema responde de manera adecuada.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Unitarias/","title":"Pruebas Unitarias","text":"<p>Se verifica el funcionamiento de partes peque\u00f1as y aisladas de una aplicaci\u00f3n (funciones o m\u00e9todos individuales dentro de una clase u objeto en un lenguaje de programaci\u00f3n) Prop\u00f3sito. El prop\u00f3sito principal de las pruebas unitarias es asegurarse de que cada unidad de c\u00f3digo funcione correctamente de manera independiente, sin depender de otras partes del sistema, para luego ser integrada con otros componentes del software.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Unitarias/#arneses-de-prueba","title":"Arneses de Prueba*","text":"<p>Las unidades se prueban generalmente mediante el uso de \"arneses de prueba\" que simulan el contexto en el que se integrar\u00e1 la unidad. El arn\u00e9s de prueba proporciona una serie de entradas conocidas y mide las salidas de la unidad bajo prueba, que luego se comparan con los valores esperados para determinar si existen problemas.  Es decir, se crea un conjunto de Casos de Prueba espec\u00edficos que cubren escenarios para la unidad de c\u00f3digo bajo prueba.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Unitarias/#que-mejor-que-un-ejemplo-real-en-codigo-de-lo-que-es-una-prueba-unitaria","title":"\u00bfQu\u00e9 mejor que un ejemplo real en c\u00f3digo de lo que es una prueba unitaria?","text":"<p>Supongamos tenemos la siguiente funci\u00f3n que calcula el cuadrado de un n\u00famero. <pre><code>def square(num):\n    return num * num\n    ```\nUna prueba unitaria para esta funci\u00f3n usando ```pytest```(framework para testing) podr\u00eda ser:\n```python\nimport pytest\ndef test_square():\n    assert square(3) == 9  # Prueba con un n\u00famero positivo\n    assert square(-2) == 4  # Prueba con un n\u00famero negativo\n    assert square(0) == 0  # Prueba con cero\n</code></pre></p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Unitarias/#quien-realiza-las-pruebas-unitarias","title":"\u00bfQui\u00e9n realiza las pruebas unitarias?","text":"<p>Normalmente realizadas por los desarrolladores del software, quienes escriben estas pruebas en paralelo al desarrollo del c\u00f3digo.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20Unitarias/#tipos-de-pruebas-unitarias","title":"Tipos de Pruebas Unitarias","text":"<p>Las pruebas unitarias pueden ser utilizadas para verificar diferentes caracter\u00edsticas del c\u00f3digo, y suelen responder a las preguntas: - Pruebas positivas. \u00bfCada unidad de c\u00f3digo se comporta c\u00f3mo es esperado en condiciones normales o v\u00e1lidas?. - Pruebas negativas. \u00bfEl c\u00f3digo maneja adecuadamente entradas no v\u00e1lidas?. - Pruebas de Frontera. \u00bfEl c\u00f3digo se comporta adecuadamente dentro y fuera de los l\u00edmites de sus valores permitidos?. - Pruebas de excepci\u00f3n. \u00bfC\u00f3mo se comporta el c\u00f3digo frente a un error?, \u00bfEs informada la excepci\u00f3n?.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Aceptaci%C3%B3n/","title":"Pruebas de Aceptaci\u00f3n","text":"<p>Los proyectos de software a gran escala a menudo tienen una fase final de pruebas llamada 'Pruebas de Aceptaci\u00f3n'. Otras pruebas, como las unitarias o de integraci\u00f3n, pueden realizarse de manera iterativa y con mayor libertad para ajustar el c\u00f3digo, ya que se ejecutan en etapas intermedias del desarrollo. Las pruebas de aceptaci\u00f3n, por otro lado, suelen ser la \u00faltima barrera antes de la entrega al cliente o usuario final.</p> <ul> <li>El objetivo es asegurarse de que el sistema cumple con los requisitos acordados que el usuario necesita y es apto para su uso en el mundo real.</li> <li>Se realizan en un entorno lo m\u00e1s similar posible al de producci\u00f3n.</li> <li>Su prop\u00f3sito es validar si el producto es aceptado. Por lo que tiene un enfoque especial en el usuario.</li> <li>Se llevan a cabo despu\u00e9s de que el sistema haya sido completamente desarrollado, probado en niveles previos (unitarios, integraci\u00f3n, sistema), y est\u00e1 listo para ser entregado en su versi\u00f3n final.</li> <li>Tambi\u00e9n se eval\u00faa si el sistema es f\u00e1cil de usar, intuitivo y de acuerdo con las expectativas del cliente.</li> </ul>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Aceptaci%C3%B3n/#que-se-hace-en-las-pruebas-de-aceptacion","title":"\u00bfQu\u00e9 se hace en las pruebas de aceptaci\u00f3n?.","text":"<p>Estas pruebas son cuidadosamente planificadas y documentadas: siguen un conjunto predefinido de Casos de Prueba basados en los requisitos del cliente o usuario final. Se eval\u00faa al sistema bajo condiciones de uso t\u00edpicas, y obviamente para que las funcionalidades esenciales est\u00e9n operativas. En muchos proyectos, especialmente en contratos con clientes externos, las pruebas de aceptaci\u00f3n est\u00e1n vinculadas a acuerdos legales. Si se encuentran defectos durante estas pruebas, puede haber consecuencias contractuales, como la obligaci\u00f3n de corregir los errores sin costo adicional, retrasos en la entrega o penalizaciones.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Aceptaci%C3%B3n/#quien-realiza-las-pruebas-de-aceptacion","title":"\u00bfQui\u00e9n realiza las pruebas de aceptaci\u00f3n?.","text":"<p>Las pruebas de aceptaci\u00f3n son realizadas principalmente por los usuarios finales o representantes del cliente. El equipo de pruebas de calidad (QA) o desarrollo no suele estar directamente involucrado en esta fase, ya que el objetivo es evaluar el software desde la perspectiva del usuario final.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Aceptaci%C3%B3n/#tipos-de-pruebas-de-aceptacion","title":"Tipos de Pruebas de Aceptaci\u00f3n","text":"<ul> <li>Pruebas de Aceptaci\u00f3n del Usuario (UAT). El tipo m\u00e1s com\u00fan de prueba de aceptaci\u00f3n, donde los usuarios finales prueban el sistema para verificar que cumple con sus requisitos y expectativas.</li> <li>Pruebas de Aceptaci\u00f3n Operacional (OAT). Se eval\u00faan aspectos operacionales del sistema, como su capacidad de operar correctamente en el entorno de producci\u00f3n, la seguridad, la gesti\u00f3n de fallos y la recuperaci\u00f3n.<ul> <li>Ejemplo. </li> </ul> </li> <li>Pruebas de Aceptaci\u00f3n Contractual. Aseguran que el producto cumpla con todas las leyes, reglas de seguridad o est\u00e1ndares establecidos en el contrato entre el cliente y el proveedor.<ul> <li>Ejemplo. Un sistema de gesti\u00f3n de datos personales se somete a pruebas de aceptaci\u00f3n para asegurarse de que cumple con la normativa GDPR sobre la protecci\u00f3n de datos personales.</li> </ul> </li> <li>Pruebas de Aceptaci\u00f3n de Negocio (BAT). \u00bfEl sistema entrega valor desde el punto de vista empresarial?.<ul> <li>Ejemplo. Una plataforma de comercio electr\u00f3nico es probada para asegurarse de que las funcionalidades se alineen con las metas de negocio de la empresa.</li> </ul> </li> <li>Pruebas de Aceptaci\u00f3n de Usabilidad. Eval\u00faan la facilidad de uso, experiencia del usuario (UX), interfaz de usuario (UI), accesibilidad.</li> </ul>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Aceptaci%C3%B3n/#alpha-vs-beta-testing","title":"ALPHA Vs. BETA TESTING.","text":"<p>Otros tipos de pruebas comunes de nombrar a la hora de hablar de pruebas de aceptaci\u00f3n son el Alpha vs. Beta Testing. Estas requieren dos preconceptos para ser mejor entendidas.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Integraci%C3%B3n/","title":"Pruebas de Integraci\u00f3n","text":"<p>Las unidades m\u00e1s peque\u00f1as se integran en unidades m\u00e1s grandes, y estas, a su vez, en el sistema general.  Estas pruebas difieren de las pruebas unitarias en que las unidades ya no se prueban de forma independiente, sino en grupos, y el enfoque se desplaza de las unidades individuales a la interacci\u00f3n entre ellas.</p> <p>El objetivo principal de las pruebas de integraci\u00f3n es GARANTIZAR funcionalidad conjunta, identificar fallos que puedan surgir en las interfaces entre los m\u00f3dulos, como errores en la transmisi\u00f3n de datos, problemas de sincronizaci\u00f3n o dependencias mal gestionadas.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Integraci%C3%B3n/#que-se-hace-en-las-pruebas-de-integracion","title":"\u00bfQu\u00e9 se hace en las pruebas de integraci\u00f3n?.","text":"<p>Se crean casos de prueba espec\u00edficos para examinar las interacciones entre m\u00f3dulos. Algunos ejemplos de lo que se podr\u00eda probar incluyen: - La comunicaci\u00f3n entre dos servicios web. - La integraci\u00f3n de un frontend con un backend. Se pueden utilizar distintos enfoques para llevar a cabo estas pruebas, como la integraci\u00f3n progresiva (agregar m\u00f3dulos uno por uno) o la integraci\u00f3n a gran escala, donde se prueba todo el sistema de una vez.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Integraci%C3%B3n/#quien-realiza-las-pruebas-de-integracion","title":"\u00bfQui\u00e9n realiza las pruebas de integraci\u00f3n?","text":"<p>Las pruebas de integraci\u00f3n suelen ser realizadas tanto por los desarrolladores como por los equipos de QA (Quality Assurance o Aseguramiento de la Calidad). Los desarrolladores realizan pruebas b\u00e1sicas de integraci\u00f3n mientras construyen el software, pero el equipo de QA normalmente lleva a cabo pruebas m\u00e1s exhaustivas en un entorno que simula mejor la interacci\u00f3n real entre los m\u00f3dulos.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Integraci%C3%B3n/#tipos-de-pruebas-de-integracion","title":"Tipos de Pruebas de Integraci\u00f3n","text":"<p>Las pruebas de integraci\u00f3n pueden ser utilizadas para verificar diferentes caracter\u00edsticas del c\u00f3digo, y suelen responder a las preguntas: - Enfoque Big-Bang. Todos los m\u00f3dulos se integran de una sola vez y se prueban como un sistema completo. Este enfoque puede dificultar la localizaci\u00f3n de errores si los fallos son numerosos. Los m\u00f3dulos deben estar implementados y conectados entre s\u00ed. - De Integraci\u00f3n Incremental. Los m\u00f3dulos se integran y prueban de manera gradual, uno a uno. Se pueden realizar en dos subtipos:      - Top-Down (de arriba hacia abajo) - Los m\u00f3dulos de alto nivel se prueban primero y se van integrando gradualmente los m\u00f3dulos de nivel inferior.     - Ejemplo: En una aplicaci\u00f3n web, primero se integrar\u00eda el frontend con el controlador, luego el controlador con el backend, y finalmente el backend con la base de datos.     - Bottom-Up (de abajo hacia arriba) - Se comienza integrando los m\u00f3dulos de bajo nivel y se va ascendiendo a los de alto nivel. - Pruebas de Integraci\u00f3n Continua. Com\u00fan en Modelos \u00c1giles y DevOps, las pruebas de integraci\u00f3n se realizan de forma continua a medida que se desarrollan nuevos componentes. Con cada cambio en el c\u00f3digo se ejecuta una prueba de integraci\u00f3n. Suelen ser autom\u00e1ticas.     - Ejemplo: Cada vez que un desarrollador sube cambios al repositorio de c\u00f3digo, se ejecutan autom\u00e1ticamente las pruebas de integraci\u00f3n para asegurar que esos cambios no rompan la funcionalidad de otros m\u00f3dulos. - Pruebas de Interfaz. Refieren a la COMUNICACI\u00d3N. Verifican que las interfaces (por ejemplo, APIs REST, gRPC) manejen correctamente las solicitudes y respuestas, y que los m\u00f3dulos se comuniquen correctamente (que se env\u00eden y reciban los datos correctamente). </p> <p>A su vez, podemos sumar otros tipos de pruebas a la lista, las Pruebas de Integraci\u00f3n de Extremo a Extremo, se tratan de probar un proceso completo que ofrece el sistema, pasando por todos los m\u00f3dulos que har\u00edan posible el proceso. Un ejemplo de este \u00faltimo podr\u00eda ser probar un proceso completo de compra en un sitio web, desde el frontend hasta el backend y la base de datos.</p> <p>Por otro lado, es muy com\u00fan que el cambio en el c\u00f3digo realizado para arreglar un error introduzca errores adicionales en otras partes o componentes del software, y por ello existen las llamadas: Pruebas de Regresi\u00f3n.  Es el acto de repetir otras pruebas en \u00e1reas 'paralelas', o que comparten una misma implementaci\u00f3n, para asegurarse de que un cambio de c\u00f3digo no haya introducido otros errores o comportamientos inesperados, en otros m\u00f3dulos del sistema. Se centra en validar que cambios recientes no hayan roto funcionalidades anteriores.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Sistema/","title":"Pruebas de Sistema","text":"<p>Las pruebas de sistema consisten en evaluar el software como un todo, una vez que sus componentes individuales (unidades) y sus interacciones (integraci\u00f3n) han sido probados.  Este tipo de prueba se realiza en un entorno que simula lo m\u00e1s fielmente posible el entorno de producci\u00f3n, y garantizar su funcionamiento en dicho ambiente seg\u00fan lo esperado es el prop\u00f3sito de dichas pruebas. En este tipo de pruebas se busca validar la funcionalidad completa y garantizar la Calidad del producto, adem\u00e1s de identificar errores que no fueron detectados en los otros tipos de pruebas. Estas pruebas tienen en cuenta el sistema en conjunto, incluyendo funcionalidades como aspectos no funcionales. Se incluye el rendimiento del sistema bajo cargas de trabajo intensas y capacidad de recuperaci\u00f3n ante fallos (hasta de hardware). Es a menudo la etapa m\u00e1s formal de las pruebas y m\u00e1s estructurada.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Sistema/#como-suelen-ser","title":"\u00bfC\u00f3mo suelen ser?","text":"<p>Las pruebas de sistema son ==t\u00edpicamente pruebas de caja negra==, lo que significa que los evaluadores no necesitan conocer el c\u00f3digo interno, solo el comportamiento esperado seg\u00fan los requisitos. Sin embargo, en algunos casos, se combinan con enfoques de caja blanca para pruebas m\u00e1s t\u00e9cnicas, como las de rendimiento o seguridad.  Uno de los aspectos m\u00e1s importantes es que suelen detectar problemas en entornos reales, errores que l\u00f3gicamente no pueden saltar en etapas anteriores.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Sistema/#quien-las-realiza","title":"\u00bfQui\u00e9n las realiza?","text":"<p>Suelen ser realizadas por el equipo de QA (Quality Assurance o Aseguramiento de la Calidad) o un equipo especializado en pruebas de software. Este equipo tambi\u00e9n eval\u00faa la experiencia del usuario final. En algunos casos, tambi\u00e9n pueden participar probadores externos o usuarios reales en entornos de prueba beta.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Sistema/#tipos-de-pruebas-de-sistema","title":"Tipos de Pruebas de Sistema","text":"<ul> <li>Pruebas Funcionales. Se prueban las entradas y salidas, asegur\u00e1ndose de que los resultados sean los esperados, seg\u00fan las especificaciones del cliente. Poco m\u00e1s detalladas en Enfoques de Testing.<ul> <li>Ejemplo. Probar una aplicaci\u00f3n de comercio electr\u00f3nico para verificar que los usuarios puedan agregar productos al carrito, procesar pagos y recibir confirmaciones de compra correctamente.</li> </ul> </li> <li>Pruebas No Funcionales. Se fijan en aspectos no relacionados a funcionalidad del sistema, sino m\u00e1s bien a rendimiento esperado, seguridad, usabilidad y fiabilidad.<ul> <li>Ejemplo. Medir el tiempo de respuesta del sistema bajo cierta demanda de usuarios (asegurarse que cumple con los tiempos de respuesta esperados).</li> </ul> </li> <li>Pruebas de Carga. Se eval\u00faa el rendimiento del sistema bajo diferentes niveles de carga.<ul> <li>Ejemplo. Probar una aplicaci\u00f3n de banca en l\u00ednea para ver c\u00f3mo se comporta cuando 10,000 usuarios realizan transferencias simult\u00e1neamente.</li> </ul> </li> <li>Pruebas de Estr\u00e9s. Buscan determinar los l\u00edmites del sistema someti\u00e9ndolo a condiciones extremas, como un volumen de usuarios superior al esperado o recursos del sistema limitados.</li> <li>Pruebas de Seguridad. \u00bfEl sistema resiste ataques de seguridad?. \u00bfHay brechas en el manejo de datos sensibles?.<ul> <li>Ejemplo. Se eval\u00faa la exposici\u00f3n del sistema a ataques de inyecci\u00f3n SQL. Ejemplo en c\u00f3digo m\u00e1s adelante de c\u00f3mo podr\u00eda darse este tipo de ataques.</li> </ul> </li> <li>Pruebas de Backup. Se eval\u00faa la capacidad del sistema para realizar copias de seguridad de datos de manera efectiva y restaurarlos de manera efectiva.<ul> <li>Ejemplo. Probar que un sistema de gesti\u00f3n de datos pueda realizar copias de seguridad autom\u00e1ticas, y que los datos puedan restaurarse luego de una interrupci\u00f3n.</li> </ul> </li> <li>Pruebas de Humo. Pruebas r\u00e1pidas para verificar si las funcionalidades principales del sistema funcionan correctamente despu\u00e9s de una nueva construcci\u00f3n o actualizaci\u00f3n. O simplemente para verificar que un elemento particular del sistema est\u00e1 presente y en funcionamiento.<ul> <li>Ejemplo. Ejemplo en c\u00f3digo m\u00e1s adelante.</li> </ul> </li> <li>Pruebas de Usabilidad. Eval\u00faan lo f\u00e1cil y amigable que es el sistema para los usuarios finales. Navegabilidad, dise\u00f1o y facilidad para realizar tareas. M\u00e1s adelante m\u00e1s informaci\u00f3n sobre este tipo de pruebas.</li> <li>Pruebas de Compatibilidad. \u00bfEl sistema funciona correctamente en otras plataformas?. </li> <li>Pruebas de Recuperaci\u00f3n. Eval\u00faan la capacidad del sistema para recuperarse de fallos, como ca\u00eddas del sistema o p\u00e9rdida de conexi\u00f3n.</li> <li>Pruebas de Extremo a Extremo (Endo-to-End). Validan el flujo completo de la aplicaci\u00f3n, que todos los m\u00f3dulos del sistema trabajen en conjunto correctamente.<ul> <li>Ejemplo. Probar un proceso completo de compra en l\u00ednea, verificando que el cliente pueda navegar por el sitio, agregar productos al carrito, realizar el pago y recibir la confirmaci\u00f3n de compra sin problemas a lo largo de todo el flujo.</li> </ul> </li> </ul>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Sistema/#ejemplo-smoke-testing","title":"Ejemplo Smoke Testing","text":"<p>Supongamos tenemos una API REST para gesti\u00f3n de usuarios. La siguiente es una prueba b\u00e1sica para verificar que la aplicaci\u00f3n arranca y que el endpoint principal responde como deber\u00eda. Controlador <pre><code>@RestController\n@RequestMapping(\"/api/users\")\npublic class UserController {\n\n    @GetMapping\n    public ResponseEntity&lt;String&gt; getAllUsers() {\n        return ResponseEntity.ok(\"Lista de usuarios\");\n    }\n}\n</code></pre> Smoke Test con JUnit 5 y Spring Boot: <pre><code>@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n@AutoConfigureMockMvc\npublic class SmokeTest {\n\n    @Autowired\n    private MockMvc mockMvc;\n\n    @Test\n    public void testUserEndpoint() throws Exception {\n        mockMvc.perform(get(\"/api/users\"))\n               .andExpect(status().isOk())\n               .andExpect(content().string(containsString(\"Lista de usuarios\")));\n    }\n\n    @Test\n    public void contextLoads() {\n        // Verifica que el contexto de Spring Boot se cargue correctamente\n    }\n}```\n****\n###### **Ejemplo de Ataque de Inyecci\u00f3n SQL***\n**\u00bfC\u00f3mo podr\u00eda ocurrir un ataque de inyecci\u00f3n SQL?**. El siguiente es un escenario de una aplicaci\u00f3n vulnerable (**PHP + MySQL**).\n```php\n&lt;?php\n$username = $_GET['username'];\n$password = $_GET['password'];\n\n$sql = \"SELECT * FROM usuarios WHERE username = '$username' AND password = '$password'\";\n$result = mysqli_query($conn, $sql);\n\nif (mysqli_num_rows($result) &gt; 0) {\n    echo \"Acceso concedido\";\n} else {\n    echo \"Acceso denegado\";\n}\n?&gt;\n</code></pre> La inyecci\u00f3n SQL posible puede darse de forma que un atacante coloque como usuario <code>' OR '1'='1</code>. As\u00ed, la consulta SQL quedar\u00eda as\u00ed: <pre><code>SELECT * FROM usuarios WHERE username = '' OR '1'='1' AND password = ''\n</code></pre></p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Pruebas%20de%20Sistema/#algo-mas-sobre-las-pruebas-de-usabilidad","title":"*Algo m\u00e1s sobre las Pruebas de Usabilidad*","text":"<p>En este tipo de pruebas, el probador debe observar las reacciones de los usuarios a un producto de software. Se elige en particular a un usuario final para que pruebe el producto, aunque este no tenga un conocimiento t\u00e9cnico para tomar decisiones (solo ser\u00e1n emisores de opini\u00f3n). *Gu\u00eda pr\u00e1ctica para hacer una prueba de usabilidad. - Se presenta un modelo b\u00e1sico o prototipo del producto a usuarios finales t\u00edpicos. - Se establece una serie de tareas est\u00e1ndar que deben completar con el producto. - Se registra cualquier dificultad que se encuentre durante la prueba. - Se realizan los correspondientes cambios de dise\u00f1o. - Se repite el proceso con el nuevo dise\u00f1o. No se necesitan m\u00e1s de cuatro o cinco usuarios finales para evaluar en una sesi\u00f3n.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/QA%20%28Quality%20Assurance%20o%20Aseguramiento%20de%20la%20Calidad%29/","title":"QA (Quality Assurance o Aseguramiento de la Calidad)","text":"<p>PROCESO AMPLIO Y CONTINUO. Conjunto de actividades planificadas y sistem\u00e1ticas dise\u00f1adas para garantizar la Calidad de un producto de software antes de su entrega al usuario final.  Su objetivo es prevenir errores, mejorar la calidad del software y asegurar una experiencia satisfactoria para el usuario, DURANTE TODAS LAS ETAPAS DEL DESARROLLO, incluyendo la planificaci\u00f3n, dise\u00f1o, codificaci\u00f3n, documentaci\u00f3n y entrega. Por lo que el proceso tiene un fuerte enfoque preventivo.</p> <p>Diferencias con Testing.  QA es un proceso amplio y proactivo. Abarca la planificaci\u00f3n, definici\u00f3n de procesos, revisiones y mejoras continuas en todas las etapas del ciclo de vida del software. Testing es una actividad espec\u00edfica dentro del QA, que se centra en detectar defectos en el software mediante la ejecuci\u00f3n de pruebas.  - Pregunta clave que se plantea con QA. \u00bfEstamos construyendo el producto correctamente?. - Pregunta clave que se plantea con Testing. \u00bfEl producto funciona como se espera?. El QA involucra todo el equipo (desarrolladores, gerentes, analistas, etc.), ya que se centra en los procesos, a diferencia del testing donde la responsabilidad recae principalmente en el equipo de testers.  El equipo de QA suele liderar, pero todos contribuyen.</p> <p>Alcance.  No se limita a probar el software, sino a asegurar que los procesos sean efectivos. </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/QA%20%28Quality%20Assurance%20o%20Aseguramiento%20de%20la%20Calidad%29/#mas-caracteristicas","title":"M\u00e1s Caracter\u00edsticas","text":"<ul> <li>Definici\u00f3n de est\u00e1ndares. Establece criterios claros de calidad, como requisitos funcionales, rendimiento, seguridad, usabilidad y compatibilidad. </li> <li>Se puede crear un plan de calidad con m\u00e9tricas, objetivos, estrategias, cronogramas, herramientas, responsabilidades del equipo.</li> <li>Revisi\u00f3n Continua. Se eval\u00faan los procesos de desarrollo, la documentaci\u00f3n, el c\u00f3digo y otros artefactos para asegurar que se sigan las mejores pr\u00e1cticas. Revisiones de c\u00f3digo regulares.</li> <li>Mejora Continua. Se recopilan datos y retroalimentaci\u00f3n para optimizar los procesos y evitar errores recurrentes en futuros proyectos.</li> <li>Pruebas sistem\u00e1ticas. Aunque el Testing es solo una parte del QA, se realizan diferentes tipos de pruebas (unitarias, de integraci\u00f3n, funcionales, de rendimiento, de seguridad, etc.)</li> </ul> <p>Etapas T\u00edpicas.  1. An\u00e1lisis de requisitos (que sean claros y alcanzables),  2. Planificaci\u00f3n (definir estrategias y cronogramas, un plan de QA que detalla las actividades, herramientas, m\u00e9tricas y responsabilidades del equipo), 3. Dise\u00f1o de casos de prueba (crear escenarios que cubran los aspectos del sistema),  4. Ejecuci\u00f3n de pruebas,  5. Reporte y correcci\u00f3n (documentar errores y solucionarlos),  6. Validaci\u00f3n final (\u00bfel software cumple con los est\u00e1ndares?),  7. Monitoreo post-lanzamiento (evaluar desempe\u00f1o en producci\u00f3n). </p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/QC%20%28Control%20de%20Calidad%29/","title":"QC (Control de Calidad)","text":"<p>Enfoque correctivo, implica la evaluaci\u00f3n del producto terminado para identificar defectos y problemas.  A diferencia del QA (enfoque en establecer procesos para prevenir defectos), el QC se enfoca en verificar el producto terminado mediante pruebas para detectar defectos.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/QC%20%28Control%20de%20Calidad%29/#actividades-principales-del-qc","title":"Actividades principales del QC","text":"<p>El QC se lleva a cabo a trav\u00e9s de diferentes tipos de pruebas y revisiones. Algunas de las actividades m\u00e1s comunes incluyen:  - Pruebas de software  - Revisiones y auditor\u00edas. Revisi\u00f3n de c\u00f3digo y Auditor\u00edas de documentaci\u00f3n.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/QC%20%28Control%20de%20Calidad%29/#enfoques-para-implementar-qc","title":"Enfoques para implementar QC","text":"<ul> <li>Pruebas manuales: Un equipo de testers ejecuta casos de prueba sin herramientas automatizadas. \u00datil para pruebas exploratorias o de usabilidad.</li> <li>Pruebas Automatizadas: Se utilizan scripts para ejecutar pruebas repetitivas de manera eficiente, especialmente en proyectos grandes o \u00e1giles.</li> <li>Enfoque \u00e1gil: En metodolog\u00edas como Scrum, el QC se integra en cada sprint, con pruebas continuas y feedback r\u00e1pido.</li> <li>DevOps y CI/CD: El QC se incorpora en pipelines de integraci\u00f3n y entrega continua, automatizando pruebas en cada cambio de c\u00f3digo.</li> </ul>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Roles%20en%20el%20Testing/","title":"Roles en el Testing","text":"<p>Seg\u00fan la ISQTB, dos roles principales se encuentran para el proceso de Testing: Un rol de gesti\u00f3n de pruebas y un rol de pruebas.  Las actividades y tareas asignadas a estos dos roles dependen de factores como el contexto del proyecto y del producto, las habilidades de las personas que los desempe\u00f1an y la organizaci\u00f3n.</p> <p>Rol de gesti\u00f3n de pruebas. Este asume responsabilidad general del proceso de pruebas, el equipo de pruebas y el liderazgo de las actividades de prueba. La funci\u00f3n de gesti\u00f3n de pruebas se centra principalmente en la planificaci\u00f3n, la supervisi\u00f3n, el control y la finalizaci\u00f3n de las pruebas.</p> <p>Rol de pruebas. Asume la responsabilidad del aspecto t\u00e9cnico de las pruebas. Se centra principalmente en las actividades de an\u00e1lisis, dise\u00f1o, implementaci\u00f3n y ejecuci\u00f3n de pruebas.</p> <p>Distintas personas pueden asumir estos roles en distintos momentos. Por ejemplo, el rol de gesti\u00f3n de pruebas puede ser desempe\u00f1ado por un l\u00edder de equipo, un gerente de desarrollo. Tambi\u00e9n es posible que una misma persona asuma los roles de pruebas y gesti\u00f3n de pruebas simult\u00e1neamente.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Roles%20en%20el%20Testing/#perfil-del-tester-y-aspectos-a-considerar","title":"Perfil del Tester y Aspectos a considerar","text":"<p>Su tarea es esencial para asegurar la calidad del producto antes de que llegue a los usuarios finales. El probador utiliza diversas t\u00e9cnicas y enfoques para identificar errores y asegurar que el producto cumple con los requisitos establecidos. Se enfoca en varios aspectos clave:  - Bugs (Errores). Identifica fallos o cualquier cosa que pueda afectar negativamente el valor del producto. - Riesgos. Identifican indicios de problemas que podr\u00edan derivar en futuros errores. - Problemas. Un problema no necesariamente afecta directamente al producto, pero puede amenazar el \u00e9xito del proyecto. Estos problemas pueden tener que ver m\u00e1s con aspectos externos, como la usabilidad o el entorno de uso.  - Testeabilidad (Testability). Identifican caracter\u00edsticas del software que dificultan o limitan el proceso de pruebas. (autenticaci\u00f3n con tokens de sesi\u00f3n muy cortos por ejemplo). - Artefactos. Problemas que surgen como consecuencia de la herramienta utilizada para realizar las pruebas o de la forma en que se est\u00e1n llevando a cabo. (Notar diferencia con respecto a Artefacto en el contexto UML)</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Testing%20en%20Ambientes%20%C3%81giles/","title":"Testing en Ambientes \u00c1giles","text":"<p>En el desarrollo \u00e1gil, los Casos de Prueba son dados como criterios de aceptaci\u00f3n.</p> <p>Para las metodolog\u00edas tradicionales, el Testing es una etapa que se realiza al final del proceso de desarrollo, mientras que para las metodolog\u00edas \u00e1giles, el Testing es una actividad continua que se realiza de forma iterativa y forma parte del ciclo de vida del producto.  Todo el equipo es responsable de la calidad del producto en las metodolog\u00edas de este \u00faltimo tipo (testers y especialistas QA deben participar en eventos clave de Scrum como reuniones diarias, refinamiento, y dem\u00e1s).  Esta adaptaci\u00f3n del testing \u00e1gil trae como ventajas la detecci\u00f3n temprana de errores, reducci\u00f3n de costos y mayor valor entregado al cliente. Existen pr\u00e1cticas que podr\u00edamos referir al \"Testing \u00c1gil\" que se adecuan a estos ciclos de retroalimentaci\u00f3n cortos fundamentales para Modelos \u00c1giles, entre ellas se encuentran las enunciadas abajo.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Testing%20en%20Ambientes%20%C3%81giles/#test-driven-development-tdd","title":"Test Driven Development (TDD)","text":"<p>T\u00e9cnica de dise\u00f1o e implementaci\u00f3n de software que forma parte de la metodolog\u00eda XP (Extreme Programming), desarrollada por Kent Beck (m\u00e1s informaci\u00f3n en el apartado de Agilidad) alrededor del 2003. </p> <p>Para esta pr\u00e1ctica los desarrolladores escriben pruebas unitarias antes de escribir el c\u00f3digo fuente (pruebas que por supuesto van a fallar por obvias razones), luego se escribe el c\u00f3digo m\u00ednimo para que cada prueba pase, y finalmente se optimiza el c\u00f3digo en conjunto sin alterar su funcionalidad. Este proceso se conoce como \"Red-Green-Refactor\". Esto garantiza que solo se agregue el c\u00f3digo suficiente para que la prueba pase, proporcionando la soluci\u00f3n m\u00e1s simple a un problema de software. El TDD crea ciclos de retroalimentaci\u00f3n cortos mediante la regresi\u00f3n a nivel de unidad y significa que el c\u00f3digo se autodocumenta eficazmente a trav\u00e9s de sus pruebas integradas, por lo que se integra de manera natural con Modelos \u00c1giles.  El desarrollador no solo puede ver qu\u00e9 hace el c\u00f3digo, sino que tambi\u00e9n comprende por qu\u00e9. Ejemplo. (La primera funci\u00f3n es la escrita con anterioridad) <pre><code>def test_calcular_cuadrado():\n\u00a0 \u00a0 assert calcular_cuadrado(3) == 9, \"El cuadrado de 3 debe ser 9\"\n\u00a0 \u00a0 assert calcular_cuadrado(0) == 0, \"El cuadrado de 0 debe ser 0\"\n\u00a0 \u00a0 assert calcular_cuadrado(-2) == 4, \"El cuadrado de -2 debe ser 4\"\n\ndef calcular_cuadrado(numero):\n\u00a0 \u00a0 return numero * numero\n</code></pre></p> <p>Se dice hay hasta beneficios psicol\u00f3gicos para el uso de esta pr\u00e1ctica, reduciendo el estr\u00e9s y aumentando la satisfacci\u00f3n laboral al minimizar errores inesperados, lo cual es comprensible cuando cada funcionalidad tiene una prueba asociada, asegurando cobertura completa.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Testing%20en%20Ambientes%20%C3%81giles/#behavior-driven-development-bdd","title":"Behavior Driven Development (BDD)","text":"<p>Los conceptos b\u00e1sicos del TDD se han ampliado para incluir pruebas de nivel superior y definir el comportamiento esperado del software desde la perspectiva del usuario, y del negocio. Esto se conoce como \"Especificaci\u00f3n por ejemplo\".</p> <p>Es un enfoque de desarrollo de software que utiliza un lenguaje natural para describir el comportamiento esperado del sistema, asegurando que cumpla con las expectativas del usuario. Se basa en escribir escenarios en formato \"Given-When-Then (Dado-Cuando-Entonces)\" que sirven como pruebas ejecutables y documentaci\u00f3n.</p> <p>Este enfoque asegura que las pruebas sean comprensibles, ejecutables, proporcionando un marco para definir y validar el comportamiento del sistema de manera colaborativa. BDD puede considerarse una evoluci\u00f3n de TDD, ya que combina las t\u00e9cnicas de TDD con un enfoque m\u00e1s orientado al negocio, haciendo que las pruebas sean m\u00e1s accesibles y comprensibles para las partes interesadas no t\u00e9cnicas.  En BDD, el ciclo de desarrollo no necesariamente implica hacer TDD primero, sino que comienza con la definici\u00f3n de criterios de aceptaci\u00f3n en forma de escenarios de comportamiento. El flujo t\u00edpico que se repite sigue de la forma: 1. Definir Criterios de Aceptaci\u00f3n: Se escriben escenarios en Given-When-Then (Dado-Cuando-Entonces) colaborativamente. 2. Automatizar pruebas de comportamiento: Convertir escenarios en pruebas ejecutables. Se suelen utilizar herramientas como Cucumber, Behave o SpecFlow. 3. Usar TDD (si aplica): Escribir pruebas unitarias (TDD) para desarrollar el c\u00f3digo que cumpla con las pruebas de comportamiento. 4. Implementar y refactorizar: Escribir el c\u00f3digo funcional, ejecutando pruebas de comportamiento y unitarias para validar.</p> <p>De momento, la informaci\u00f3n de este inciso la considero suficiente para entender a grandes rasgos ambas metodolog\u00edas. Sin embargo, en el apartado de Implementaci\u00f3n del BDD se hace un ejemplo m\u00e1s pr\u00e1ctico del uso del BDD con herramientas reales.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Testing%20en%20Ambientes%20%C3%81giles/#acceptance-test-driven-development-atdd","title":"Acceptance Test Driven Development (ATDD)","text":"<p>Como pasa con las pr\u00e1cticas mencionadas arriba, la siguiente tambi\u00e9n agrega un nivel m\u00e1s a lo que ser\u00eda la definici\u00f3n de la funcionalidad del sistema. ATDD opera a un nivel m\u00e1s alto, enfoc\u00e1ndose en funcionalidad completa desde la perspectiva del usuario, por lo que una de las diferencias con BDD es que las pruebas escritas durante ATDD son pensadas para que sean le\u00eddas por clientes.</p> <p>Metodolog\u00eda de desarrollo de software \u00e1gil que fomenta la colaboraci\u00f3n entre clientes, desarrolladores y testers para definir criterios de aceptaci\u00f3n antes de iniciar la codificaci\u00f3n.</p> <p>ATDD comparte principios con otras metodolog\u00edas como Test-Driven Development (TDD), Behavior-Driven Development (BDD), pero se distingue por la colaboraci\u00f3n de las tres partes (a menudo referida como los \"three amigos\": cliente, desarrollador y tester). El enfoque est\u00e1  El ciclo de desarrollo se ve de la siguiente forma: 1. Discutir: Los \"tres amigos\" (cliente, desarrollador, tester) colaboran en un taller de especificaci\u00f3n para definir los requisitos a trav\u00e9s de historias de usuario y criterios de aceptaci\u00f3n. Este paso busca alinear expectativas. Ejemplo: Para una funcionalidad de \"pago con tarjeta de cr\u00e9dito\", los tres amigos discuten c\u00f3mo el sistema debe manejar transacciones v\u00e1lidas e inv\u00e1lidas. 2. Destilar: Los requisitos se convierten en pruebas de aceptaci\u00f3n claras y concisas, a menudo utilizando el formato Given-When-Then (Dado-Cuando-Entonces). 3. Desarrollar: Los desarrolladores escriben el c\u00f3digo necesario para que las pruebas de aceptaci\u00f3n pasen. 4. Demostrar: Se presenta un prototipo funcional a los interesados para obtener retroalimentaci\u00f3n. Esto permite iterar sobre el producto y ajustar los requisitos si es necesario. En general, ATDD no incluye TDD, pero ambas metodolog\u00edas pueden complementarse en un proyecto de desarrollo \u00e1gil.</p> <p>Para evitar mareos, se enuncia de forma m\u00e1s breve cada metodolog\u00eda nuevamente: \u2022 TDD (Test Driven Development): El ciclo comienza con la escritura de una prueba que falla, luego se escribe el c\u00f3digo m\u00ednimo necesario para pasar la prueba, y finalmente se refactoriza el c\u00f3digo para mejorarlo.</p> <p>\u2022 BDD (Behavior Driven Development): Se enfoca en el comportamiento del sistema a trav\u00e9s de escenarios, permitiendo definir los requisitos de manera que todos los miembros del equipo los comprendan. </p> <p>\u2022 ATDD (Acceptance Test Driven Development): Implica discusiones entre el equipo para definir los criterios de aceptaci\u00f3n antes de escribir el c\u00f3digo, seguido de la demostraci\u00f3n y el desarrollo.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Testing/","title":"Testing","text":"<p>El desarrollo de software implica ambig\u00fcedad, suposiciones y comunicaci\u00f3n humana defectuosa. Cada cambio realizado a una pieza de software, introduce el riesgo de error, testing reduce ese riesgo. Se suelen utilizar diferentes enfoques y Enfoques de Testing para lograr reducir el riesgo.</p> <p>Concepto. Serie de actividades orientadas a recopilar informaci\u00f3n sobre el funcionamiento y comportamiento de una aplicaci\u00f3n, con el fin de determinar si est\u00e1 lista para su uso p\u00fablico o generalizado. Otra definici\u00f3n. IEEE (1990): \u201cEl proceso de operar un sistema o componente bajo condiciones espec\u00edficas, observando o registrando los resultados, y evaluando alg\u00fan aspecto del sistema o componente.\u201d</p> <ul> <li>Podemos usar procesos de QA (Quality Assurance o Aseguramiento de la Calidad) para intentar prevenir defectos en el software, pero lo \u00fanico que podemos hacer para reducir la cantidad de errores ya presente es testear.</li> <li>El testing tambi\u00e9n nos ayuda a cuantificar los Riesgos en un software no probado. Sobre todo cuando usamos un ciclo de testing.</li> <li>Mindset. Un tester profesional encara esta actividad suponiendo que el producto est\u00e1 roto, y ya tiene defectos por descubrir. Siempre se hace la pregunta \u00bfpor qu\u00e9?, y buscan la certeza donde no la hay. Desarrolladores y dise\u00f1adores pueden adoptar esta mentalidad tambi\u00e9n, lo cual beneficia enormemente al proyecto. M\u00e1s sobre esto, en el inciso de Roles en el Testing.</li> </ul> <p>Idealmente las pruebas deber\u00edan llevarse a cabo a lo largo del ciclo de vida del desarrollo, ya que a medida que retrasamos la evaluaci\u00f3n del producto durante el desarrollo, tambi\u00e9n aumenta la complejidad de resolver los problemas.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Testing/#trazabilidad","title":"Trazabilidad","text":"<p>Otra funci\u00f3n del testing es (de manera extra\u00f1a) confirmar lo que se ha entregado. \"Que sea rastreable\". Dado un proyecto complejo con miles de requisitos de posibles clientes, \u00bfc\u00f3mo sabemos que se cumplen las expectativas? \u00bfC\u00f3mo demostramos que se ha cumplido un requerimiento en particular?. </p> <p>(Una posible soluci\u00f3n es el uso de herramientas disponibles en el mercado que utilizan bases de datos para rastrear requisitos, y est\u00e1n vinculadas a otras herramientas de especificaci\u00f3n de pruebas.).</p> <p>Retesteo. (Volver a testear). Es el acto de repetir una prueba para verificar que el defecto encontrado fue correctamente arreglado.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Testing/#cuanto-testing-es-suficiente","title":"*\u00bfCu\u00e1nto testing es suficiente?*","text":"<p>Los errores humanos son impredecibles, por lo tanto no es posible probar todas las combinaciones posibles de errores o defectos. Esto hace que el testing exhaustivo sea imposible, ya que no podemos cubrir cada posible situaci\u00f3n en la que el software podr\u00eda fallar.  Pero en un proyecto, determinar cu\u00e1nto testing es necesario y suficiente para garantizar calidad, es por supuesto algo que nos interesa. Para resolver esta cuesti\u00f3n, se utilizan dos variables clave: Riesgos y Costos.</p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Verificaci%C3%B3n%20vs.%20Validaci%C3%B3n/","title":"Verificaci\u00f3n vs. Validaci\u00f3n","text":"<p>Los encargados de testear a menudo cometen el error de no mantener su enfoque en el objetivo final. Centran su atenci\u00f3n en la fase inmediata del desarrollo del software y pierden de vista el panorama general.</p> <p>Verificaci\u00f3n. Las tareas de verificaci\u00f3n est\u00e1n dise\u00f1adas para garantizar que el producto sea INTERNAMENTE CONSISTENTE. Aseguran que el producto cumpla con la especificaci\u00f3n, que la especificaci\u00f3n cumpla con los requisitos... y as\u00ed sucesivamente. La mayor\u00eda de tareas de testing son verificaci\u00f3n. ...Los casos de prueba se redactan normalmente a partir del Documento de Requerimientos del Sistema (ERS). Esto verifica que el software cumple con los requisitos establecidos en las especificaciones t\u00e9cnicas y de requisitos, pero para nada abordan la correctitud de dichos requerimientos.</p> <p>Validaci\u00f3n. Este tipo de tareas son tan importantes como las de verificaci\u00f3n, pero menos comunes. La validaci\u00f3n es el uso de referencias externas para asegurar que EL DISE\u00d1O ES V\u00c1LIDO, es decir, que cumpla con las expectativas de los usuarios. Este uso de referencias externas puede ser el involucrar usuarios finales, por ejemplo. Las pruebas de Usabilidad, aceptaci\u00f3n, funcionales son un ejemplo \u00fatil de validaci\u00f3n.</p> <p></p>"},{"location":"A%20Software%20Testing%20Primer%20-%20Nick%20Jenkins/Verificaci%C3%B3n%20vs.%20Validaci%C3%B3n/#importancia-de-vv-en-el-ciclo-de-vida-del-software","title":"Importancia de V&amp;V en el Ciclo de Vida del Software","text":"<p>La Calidad se convierte en un resultado directo de la correcta implementaci\u00f3n de los procesos de verificaci\u00f3n y validaci\u00f3n.  La verificaci\u00f3n asegura que los procedimientos sean adecuados desde el inicio, mientras que la validaci\u00f3n garantiza que el producto final cumple con las expectativas del usuario.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Actividad/","title":"Diagrama de Actividad","text":"<p>El diagrama de Actividad es un diagrama UML de comportamiento que muestra el flujo de control o el flujo de objetos, con especial \u00e9nfasis en la secuencia y las condiciones de este flujo.</p> <p>Estos diagramas son utilizados para describir cualquier tipo de Flujos de Proceso, es especialmente com\u00fan para modelar de forma gr\u00e1fica los diferentes casos de uso, transacciones o procedimientos que haya en un sistema de informaci\u00f3n. </p> <p> La Figura 3.8 muestra un diagrama de actividad de dudosa fidelidad para el montaje de una obra teatral, pero que sirve para ejemplificar. Las flechas muestran dependencias secuenciales. Este diagrama muestra: - Las actividades (tareas o pasos) que se realizan. - El orden en que se ejecutan, definido por flujos de control. - Las condiciones o decisiones que afectan el flujo. - Los flujos de datos (opcionalmente), que indican c\u00f3mo los datos pasan entre actividades. - La posibilidad de modelar comportamientos secuenciales o concurrentes (paralelos).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Casos%20de%20Uso/","title":"Diagrama de Casos de Uso","text":"<p>Los casos de uso representan todas las interacciones posibles que se describir\u00e1n en los requerimientos del sistema. Los actores en el proceso pueden ser individuos u otros sistemas y se representan como figuras sencillas. Cada interacci\u00f3n se constituye como una elipse con etiqueta. L\u00edneas vinculan a los Actores con la interacci\u00f3n.  Los diagramas de casos de uso contienen adem\u00e1s, relaciones de dependencia, generalizaci\u00f3n y asociaci\u00f3n, tal que los actores se conectan a los casos de uso a trav\u00e9s de asociaciones. Los casos de uso pueden organizarse especificando Relaciones entre Casos de Uso.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Casos%20de%20Uso/#ejemplo-de-sommerville","title":"Ejemplo de *Sommerville","text":"<p> Cada Caso de Uso debe documentarse con una descripci\u00f3n textual. Ejemplo:     El establecimiento de consulta permite que dos o m\u00e1s m\u00e9dicos, que trabajan en diferentes consultorios, vean el mismo registro simult\u00e1neamente. Un m\u00e9dico inicia la consulta al elegir al individuo involucrado de un men\u00fa desplegable de m\u00e9dicos que est\u00e9n en l\u00ednea. Entonces el registro del paciente se despliega en sus pantallas,... Sin embargo, debido a que se enfocan en interacciones con el sistema, no son tan efectivas para adquirir restricciones o requerimientos empresariales y no funcionales de alto nivel, ni para descubrir requerimientos de dominio. El UML es un est\u00e1ndar para modelado orientado a objetos, as\u00ed que los casos de uso ahora se utilizan ampliamente para adquisici\u00f3n de requerimientos.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Casos%20de%20Uso/#ejemplo-de-uml","title":"Ejemplo de UML","text":"<p> Los Actores son el empleado, el supervisor y el quiosco. El quiosco es un sistema distinto que acepta peticiones de un cliente. Los casos de uso tambi\u00e9n se pueden describir a varios niveles de detalle. Se pueden descomponer en partes y ser descritos en t\u00e9rminos de otros casos de uso m\u00e1s simples.  Un Caso de Uso se implementa como una Colaboraci\u00f3n en la vista de interacci\u00f3n.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Casos%20de%20Uso/#paquete-en-el-diagrama-de-casos-de-uso","title":"Paquete en el Diagrama de Casos de Uso","text":"<p>Si el modelo de casos de uso es grande, es decir si el n\u00famero de ellos es elevado es \u00fatil introducir el concepto de \u201cPaquete\u201d. Un paquete reunir\u00e1 cierto n\u00famero de casos de uso agrupados por alg\u00fan criterio de homogeneidad: los que corresponden a un mismo actor, los que se refieren a un mismo proceso, etc. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Clases/","title":"Diagrama de Clases","text":"<p>Las Clases se dibujan como rect\u00e1ngulos. La lista de atributos y operaciones se muestran en compartimentos separados. Las Relaciones entre clases se muestran como las l\u00edneas que conectan los rect\u00e1ngulos de las clases. Los diferentes tipos de relaciones se distinguen por la textura de la l\u00ednea y por los ador nos en las l\u00edneas o en sus extremos. El calificador es un atributo (clave) que se coloca cerca de una clase asociada para indicar que la selecci\u00f3n de la instancia relacionada depende de un valor espec\u00edfico. - El diagrama de clases se puede representar gr\u00e1ficamente en forma abreviada, cuando no muestra atributos ni m\u00e9todos.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Clases/#problema","title":"Problema","text":"<p>La Figura 3.1 muestra un diagrama de clases de la aplicaci\u00f3n de la taquilla del teatro.  Muestra varias clases importantes, como <code>Cliente</code>, <code>Reserva</code>, <code>Entrada</code> y Representaci\u00f3n. Los clientes pueden tener muchas reservas, pero cada reserva es hecha por un \u00fanico cliente. Las reservas son de dos tipos: suscripci\u00f3n a un ciclo y reservas individuales. Ambos reservan entradas: en el primer caso varias entradas, mientras que en el segundo s\u00f3lo una entrada. Cada entrada puede ser parte de una suscripci\u00f3n a un ciclo o de una reserva individual, pero no de ambos. Cada representaci\u00f3n tiene muchas entradas disponibles, cada una con un \u00fanico n\u00famero de asiento. Una representaci\u00f3n se puede identificar mediante la obra, la fecha y la hora.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Colaboraci%C3%B3n/","title":"Diagrama de Colaboraci\u00f3n","text":"<p>Una Colaboraci\u00f3n es una relaci\u00f3n contextual entre un conjunto de objetos que trabajan juntos para lograr un prop\u00f3sito.   Contiene una colecci\u00f3n de roles dentro de un patr\u00f3n gen\u00e9rico, que pueden ser representadas por objetos individuales, o vinculadas a ellos. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Colaboraci%C3%B3n/#problema","title":"Problema","text":"<p>La Figura 3.3 muestra un diagrama de colaboraci\u00f3n para el sistema de venta del teatro. En \u00e9l interact\u00faan tres tipos distintos de componentes para proporcionar la funcionalidad al sistema: quiosco, terminales de ventas y la aplicaci\u00f3n de la taquilla. Los diferentes componentes no pertenecen a una \u00fanica clase global, sino que cooperan de maneras bien definidas para ofrecer servicios a los usuarios.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Colaboraci%C3%B3n/#discrepancias","title":"Discrepancias","text":"<p>Para este diagrama en particular, hay diferencias con respecto a lo dictado en el apunte te\u00f3rico y el Manual de Referencia UML, por lo que se describe a continuaci\u00f3n la otra cara de lo que ser\u00eda un diagrama de colaboraci\u00f3n.</p> <p>Este diagrama muestra como los objetos y los Actores intercambian mensajes y colaboran entre s\u00ed para cumplir el objetivo de un Caso de Uso. Es decir, ambas perspectivas concuerdan en que el diagrama representa Interacci\u00f3nes. Se utilizan tres tipos de clases: de entidad, de interfaz y de control.  Este diagrama es el modelo l\u00f3gico para representar el concepto del Modelo vista controlador. (MVC), veamos el ejemplo: </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Componentes/","title":"Diagrama de Componentes","text":"<p>Un diagrama de componentes muestra los Componentes de un sistema, es decir, las unidades software con las que se construye la aplicaci\u00f3n, as\u00ed como las dependencias entre componentes, - Muestra la organizaci\u00f3n de los componentes software, sus interfaces y las dependencias entre ellos.</p> <p>Un componente es un tipo de Clasificador estructurado, por lo que es recomendable definir su estructura interna en un Diagrama de Estructura Interna, el cual adjuntaremos m\u00e1s abajo. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Componentes/#interfaces-y-dependencias","title":"Interfaces y Dependencias","text":"<p>Un peque\u00f1o c\u00edrculo vinculado a un componente o a una clase es una interfaz proporcionada (el componente implementa una funcionalidad para otros). Un peque\u00f1o semic\u00edrculo vinculado a un componente o a una clase es una interfaz obligatoria (el componente espera que otro le proporcione esa funcionalidad). Anidando una interfaz proporcionada con una interfaz obligatoria se indica que un componente llamar\u00e1 a otro para obtener los servicios que necesita</p> <p>Las l\u00edneas discontinuas de dependencia muestran interfaces proporcionadas y obligatorias compatibles entre s\u00ed, pero cuando las interfaces tienen los mismos nombres las l\u00edneas de dependencia son redundantes.</p> <p>Un componente puede proporcionar m\u00e1s de una interfaz.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Componentes/#diagrama-de-estructura-interna-de-uno-de-los-componentes","title":"Diagrama de Estructura Interna de uno de los Componentes","text":""},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Comunicaci%C3%B3n/","title":"Diagrama de Comunicaci\u00f3n","text":"<p>Un diagrama de comunicaci\u00f3n est\u00e1 basado en el contexto proporcionado por un Clasificador estructurado. </p> <p>Tipo de diagrama de Interacci\u00f3n que muestra c\u00f3mo los objetos de un sistema intercambian Mensajes para realizar una tarea espec\u00edfica, destacando las relaciones estructurales entre ellos m\u00e1s que el orden temporal (a diferencia de los diagramas de secuencia).</p> <p>Los roles y conectores describen la configuraci\u00f3n de los objetos y enlaces que pueden ocurrir cuando se ejecuta una instancia del contexto. Enfoque en la estructura: - Muestra los objetos (o instancias de Clases) y los enlaces (relaciones o asociaciones) entre ellos. - Los mensajes se representan superpuestos sobre estos enlaces, indicando c\u00f3mo los objetos colaboran. - S\u00f3lo se modelan los objetos involucrados en el contexto, aunque puede haber otros en el sistema completo.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Comunicaci%C3%B3n/#notacion","title":"Notaci\u00f3n","text":"<p>Los objetos son representados como rect\u00e1ngulos con nombres en el formato <code>nombreObjeto:NombreClase</code>. Los enlaces son l\u00edneas que conectan los objetos. Los Mensajes son flechas o etiquetas sobre los enlaces, numeradas para indicar el orden de las Interacci\u00f3nes (<code>1:autenticar(usuario, contrase\u00f1a)</code>). </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Despliegue/","title":"Diagrama de Despliegue","text":"<p>Un diagrama de despliegue representa el despliegue de Artefactos de tiempo de ejecuci\u00f3n sobre Nodos.  Esta vista permite valorar las consecuencias de la distribuci\u00f3n y de la asignaci\u00f3n de recursos.  Representa la arquitectura f\u00edsica de un sistema, mostrando c\u00f3mo los Componentes de software (artefactos) se distribuyen en recursos f\u00edsicos (nodos, como servidores o dispositivos) y las conexiones entre ellos. - Su prop\u00f3sito es modelar el entorno de ejecuci\u00f3n del sistema.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Despliegue/#mas","title":"M\u00e1s","text":"<p>Los nodos tambi\u00e9n pueden ser representados utilizando iconos personalizados con la finalidad de clarificar el contenido del diagrama. Algunos de estos iconos de uso extendido son:  \u2022 Un muro para representar un Firewall.  \u2022 Un icono de un PC para representar el equipo de un usuario.  \u2022 Un circulo con flechas para identificar a un router.</p> <p>Un nodo a su vez, puede tener nodos incluidos en su interior, dando a conocer que son sistemas separados incluidos dentro del mismo nodo f\u00edsico. De esta forma se compondr\u00edan los nodos compuestos. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Estructura%20Interna/","title":"Diagrama de Estructura Interna","text":"<p>Muestra la descomposici\u00f3n de una clase. - Representa la estructura interna de un Clasificador (clase o componente). Un clasificador estructurado modela las partes de una clase y sus conectores contextuales. Una clase estructurada puede ser encapsulada forzando a que las comunicaciones desde el exterior pasen a trav\u00e9s de los puertos cumpliendo con las interfaces declaradas.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Estructura%20Interna/#problema","title":"Problema","text":"<p>La Figura 3.2 muestra el diagrama de estructura interna de la aplicaci\u00f3n de la taquilla de teatro para el sistema de venta de entradas. Esta clase se descompone en tres partes: la interfaz del expendedor de entradas, una gu\u00eda de representaci\u00f3n, que recupera representaciones seg\u00fan la fecha u otro criterio, y un conjunto de bases de datos que contienen los datos de las representaciones y de las entradas. Cada parte interact\u00faa con el exterior a trav\u00e9s de un puerto. Lo mensajes sobre este puerto son enviados a la clase expendedor de entradas, pero la estructura interna de la clase taquilla est\u00e1 oculta de los clientes externos.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Paquetes/","title":"Diagrama de Paquetes","text":"<p>Es un diagrama de estructura cuyo contenido es principalmente, para sorpresa de muchos, Paquetes y sus relaciones.  No hay ninguna l\u00ednea r\u00edgida entre los tipos diferentes de diagramas de estructura, as\u00ed que el nombre es meramente una convenci\u00f3n sin importancia sem\u00e1ntica.  Otro Ejemplo: En un sistema de biblioteca, un paquete <code>Dominio</code> podr\u00eda contener clases como <code>Libro</code> y <code>Usuario</code>, mientras que un paquete <code>InterfazUsuario</code> agrupa elementos relacionados con la interfaz gr\u00e1fica.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Secuencia/","title":"Diagrama de Secuencia","text":"<p>Tipo de diagrama de interacci\u00f3n que muestra c\u00f3mo los objetos intercambian Mensajes en un sistema durante un Caso de Uso espec\u00edfico, enfatizando el orden temporal de estas interacciones.</p> <p>Muestra una Interacci\u00f3n como un gr\u00e1fico de dos dimensiones. La dimensi\u00f3n vertical es el eje de tiempo, de arriba hacia abajo. Los mensajes m\u00e1s altos ocurren antes que los m\u00e1s bajos. Un Mensaje se muestra como una flecha desde la l\u00ednea de vida de un objeto a la l\u00ednea de vida del otro.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diagrama%20de%20Secuencia/#estructura-general","title":"Estructura general","text":"<ul> <li>En la parte superior, se colocan los actores u objetos participantes. Las entidades que interact\u00faan, y se dibujan como rect\u00e1ngulos en la parte superior del diagrama.</li> <li>Las l\u00edneas de vida se extienden hacia abajo desde cada objeto.</li> <li>Las flechas de mensajes conectan las l\u00edneas de vida, mostrando la secuencia de interacciones. Cada rol se representa mediante una columna vertical que contiene un s\u00edmbolo de cabecera y una l\u00ednea de vida vertical. Durante el tiempo que existe un objeto, la l\u00ednea de vida se representa con una l\u00ednea discontinua. Durante el tiempo que la ejecuci\u00f3n de una acci\u00f3n sobre el objeto est\u00e1 activa, la l\u00ednea de vida se representa con una l\u00ednea doble.  La imagen adjunta muestra un diagrama de secuencia t\u00edpico con mensajes as\u00edncronos, pero tener en cuenta que los Mensajes pueden ser de cualquier tipo.</li> </ul> <p>Fragmentos combinados: - Estructuras que agrupan mensajes para mostrar condiciones, bucles o interacciones opcionales:     - alt: Alternativa (similar a un \"if-else\").     - opt: Opcional (algo que puede o no ocurrir).     - loop: Bucle (repetici\u00f3n de mensajes).     - par: Paralelo (mensajes que ocurren simult\u00e1neamente). </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Elementos%20UML%20%28Apunte%20te%C3%B3rico%29/","title":"Elementos UML (Apunte te\u00f3rico)","text":"<p>%%Este apartado es simplemente una versi\u00f3n resumida de la dem\u00e1s informaci\u00f3n que se puede encontrar en otros apartados.%% Existen 4 tipos de elementos en UML. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Elementos%20UML%20%28Apunte%20te%C3%B3rico%29/#elementos-estructurales","title":"Elementos Estructurales","text":"<p>Son los elementos estructurales b\u00e1sicos (Clases, interfaces, Colaboraci\u00f3nes, clases activas, Caso de Uso, Componentes y Nodos) que se pueden incluir en el modelo UML y son est\u00e1ticos.  Tambi\u00e9n existen variaciones de estos siete elementos, tales como actores, procesos, hilos y aplicaciones, documentos, archivos, bibliotecas, p\u00e1ginas y tablas. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Elementos%20UML%20%28Apunte%20te%C3%B3rico%29/#elementos-de-comportamiento","title":"Elementos De Comportamiento","text":"<p>Son las partes din\u00e1micas de los modelos UML.  Estos son los verbos de un modelo y representan comportamiento en el tiempo y en el espacio. Se clasifican en: Interacci\u00f3n y M\u00e1quina de Estados. Estos elementos est\u00e1n conectados normalmente a diversos elementos estructurales, principalmente clases, colaboraciones y objetos. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Elementos%20UML%20%28Apunte%20te%C3%B3rico%29/#elementos-de-agrupacion","title":"Elementos De Agrupaci\u00f3n","text":"<p>Son las partes organizativas de los modelos UML. Estos son las cajas en las que pueden descomponerse un modelo. Pueden ser Paquetes. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Elementos%20UML%20%28Apunte%20te%C3%B3rico%29/#elementos-de-anotacion","title":"Elementos De Anotaci\u00f3n","text":"<p>Son las partes explicativas de los modelos UML.  Son comentarios que se a\u00f1aden para describir, clarificar y hacer observaciones.  Hay un tipo principal: Nota: S\u00edmbolo para mostrar restricciones y comentarios asociados a un elemento o colecci\u00f3n de elementos.  Se usan para aquello que se muestra mejor en forma textual (comentario) o formal (Restricci\u00f3n).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Historia%20de%20UML/","title":"Historia de UML","text":"<p>UML fue desarrollado en un esfuerzo para simplificar y consolidar el gran n\u00famero de m\u00e9todos de desarrollo orientados a objetos que hab\u00edan surgido.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Historia%20de%20UML/#orientacion-a-objetos","title":"Orientaci\u00f3n a Objetos","text":"<p>El movimiento de la orientaci\u00f3n a objetos se volvi\u00f3 activo con la amplia difusi\u00f3n de Smalltalk a principios de los a\u00f1os 80, seguido por otros lenguajes orientados a objetos, como Objetive C, C++, Eiffel y CLOS. Aproximadamente cinco a\u00f1os despu\u00e9s de que Smalltalk se convirtiera en ampliamente conocido, fueron publicados los primeros m\u00e9todos de desarrollo orientado a objetos. El libro Objectory, fue publicado poco despu\u00e9s por Ivar Jacobson, y promov\u00eda un enfoque centrado en la utilizaci\u00f3n de casos de uso como una herramienta fundamental para la especificaci\u00f3n de requisitos y para guiar el proceso de desarrollo. Se lo nombra ya que es considerada una de las primeras metodolog\u00edas comerciales que adoptaron un enfoque orientado a objetos. Durante los siguientes cinco a\u00f1os aparecieron gran cantidad de libros sobre metodolog\u00eda orientada a objetos, cada uno con su propio conjunto de conceptos, definiciones, notaci\u00f3n, terminolog\u00eda y proceso. Surgiendo as\u00ed, un n\u00facleo de conceptos comunes. En todos estos m\u00e9todos y notaciones, dividimos el sistema en dos partes: una secci\u00f3n de datos y una secci\u00f3n de procedimientos. Esto es claramente reconocible en lenguajes de programaci\u00f3n m\u00e1s antiguos, como COBOL.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Historia%20de%20UML/#esfuerzo-de-unificacion","title":"Esfuerzo de Unificaci\u00f3n","text":"<p> Es claro que con el pasar del tiempo los sistemas requer\u00edan cada vez m\u00e1s complejidad en su desarrollo, y por esta raz\u00f3n el mantenimiento y el desarrollo exig\u00eda otro tipo de visi\u00f3n. Esto dio lugar a la conocida crisis del software. El primer intento con \u00e9xito de unificar conceptos entre m\u00e9todos lleg\u00f3 cuando Rumbaugh se uni\u00f3 a Booch (dos importantes investigadores en el \u00e1rea de metodolog\u00eda del software) en la compa\u00f1\u00eda Rational en 1994. Ellos empezaron intentado unificar los conceptos que hab\u00edan desarrollado: OMT (Object Modelling Tool) y los m\u00e9todos de Booch, obteniendo una primera propuesta en 1995. En ese momento, Jacobson tambi\u00e9n se uni\u00f3 a Racional y comenz\u00f3 a trabajar con Booch y Rumbaugh. Estas tres personas son conocidas como los \u201ctres amigos\u201d. Su trabajo conjunto recibi\u00f3 el nombre de Lenguaje Unificado de Modelado (UML).  El impulso ganado al tener a los autores de los tres m\u00e9todos m\u00e1s relevantes trabajando juntos para unificar sus aproximaciones los ayud\u00f3 bastante. El objetivo no era formular una notaci\u00f3n completamente nueva, sino adaptar, expandir y simplificar los tipos de diagramas existentes y aceptados de varios m\u00e9todos orientados a objetos</p> <p>El OMG (Object Management Group) es una organizaci\u00f3n internacional dedicada al desarrollo y promoci\u00f3n de est\u00e1ndares tecnol\u00f3gicos para la integraci\u00f3n de sistemas de software. En 1996, public\u00f3 una petici\u00f3n de propuestas para una aproximaci\u00f3n est\u00e1ndar al modelado orientado a objetos. La propuesta final fue el UML, aportada por los tres amigos, y muchos m\u00e1s metod\u00f3logos y desarrolladores, que se envi\u00f3 al OMG en septiembre de1997.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Metodolog%C3%ADas%20de%20Modelado/","title":"Metodolog\u00edas de Modelado","text":"<p>El t\u00e9rmino Metodolog\u00eda, sugiere la existencia y descripci\u00f3n de m\u00e9todos estructurados, los cuales tienen por objetivo ayudar a desarrollar modelos de sistemas en forma sistem\u00e1tica. Las vistas en este inciso tienen como objetivo ayudar a desarrollar modelos de sistemas en forma sistem\u00e1tica. Reduciendo la ambig\u00fcedad de los requerimientos por parte del cliente.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Metodolog%C3%ADas%20de%20Modelado/#1-modelado-entidad-relacion-er","title":"1. Modelado Entidad-Relaci\u00f3n (ER)","text":"<p>Descripci\u00f3n: Es una de las metodolog\u00edas m\u00e1s utilizadas para dise\u00f1ar bases de datos y sistemas de informaci\u00f3n. Se centra en identificar entidades (objetos del mundo real) y las relaciones entre ellas.     - Elementos clave: Entidades, atributos, relaciones y cardinalidades.     - Ejemplo de patr\u00f3n: \"Cliente\" o \"Pedido\" y sus relaciones como \"realiza\".</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Metodolog%C3%ADas%20de%20Modelado/#2-proceso-de-desarrollo-unificado-pud","title":"2. Proceso de Desarrollo Unificado (PUD)","text":""},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Metodolog%C3%ADas%20de%20Modelado/#3-metodologia-de-analisis-estructurado","title":"3. Metodolog\u00eda de An\u00e1lisis Estructurado","text":"<p>Descripci\u00f3n: Se basa en descomponer el sistema en procesos y flujos de datos, utilizando herramientas como el Diagrama de Flujo de Datos (DFD).     - Elementos clave: Procesos, almacenes de datos, flujos de datos y entidades externas.     -      - Patr\u00f3n: Representaci\u00f3n jer\u00e1rquica de niveles (contexto, nivel 0, nivel 1, etc.).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Metodolog%C3%ADas%20de%20Modelado/#4-patrones-de-modelado-conceptual-especificos","title":"4. Patrones de Modelado Conceptual Espec\u00edficos","text":"<p>Patr\u00f3n CRUD: Representa las operaciones b\u00e1sicas (Crear, Leer, Actualizar, Eliminar) en sistemas de informaci\u00f3n.     - Patr\u00f3n MVC (Modelo-Vista-Controlador): Separa la l\u00f3gica del sistema en tres componentes para facilitar el dise\u00f1o y mantenimiento.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Metodolog%C3%ADas%20de%20Modelado/#enfoque-segun-el-contexto","title":"Enfoque seg\u00fan el contexto","text":"<p>La elecci\u00f3n de la metodolog\u00eda depende del prop\u00f3sito del modelado: - Si es para bases de datos, el modelo ER es predominante. - Si es para software orientado a objetos, UML es m\u00e1s adecuados. - Para sistemas centrados en procesos, el an\u00e1lisis estructurado con DFD es com\u00fan.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Metodolog%C3%ADas%20de%20Modelado/#caracteristicas-deseables-de-las-metodologias-y-herramientas","title":"Caracter\u00edsticas deseables de las metodolog\u00edas y herramientas","text":"<ul> <li> <p>Modelado iterativo y evolutivo: Las actividades de elicitaci\u00f3n, especificaci\u00f3n y validaci\u00f3n deber\u00edan ser repetidas varias veces en un proceso iterativo, de forma que los requerimientos sean refinados y evolucionen, como es detallado en el apartado de Ingenier\u00eda de Requerimientos. </p> <ul> <li>En cada iteraci\u00f3n el Modelo debe permitir identificar el origen del requerimiento, y el versionado actual de los mismos. De forma que figure como un seguimiento durante todo el proceso de modelado, hasta su efectivo cumplimiento plasmado en la funcionalidad del Modelo.</li> </ul> </li> <li> <p>Diferentes vistas: vistas que son importantes que est\u00e9n presentes en cualquier conjunto de metodolog\u00edas para facilitar la comprensi\u00f3n del sistema: vista est\u00e1tica, din\u00e1mica y funcional (especifica en forma declarativa, c\u00f3mo en cada servicio, ante un est\u00edmulo, se producen los cambios de estados en sus atributos.)</p> </li> <li> <p>Documentaci\u00f3n proporcionada por el Modelo: La misma debe estar destinada al cliente de manera que certifique los requisitos a satisfacer, y que a su vez, sirva como insumo en las restantes etapas de construcci\u00f3n del sistema.</p> </li> <li> <p>Flexibilidad para cambio de Requisitos: El Modelo debe ser flexible, permitiendo introducir cambios. Y a su vez, se debe realizar una evaluaci\u00f3n de impacto que producir\u00e1 en el resto del sistema la modificaci\u00f3n introducida.</p> </li> <li> <p>Notaci\u00f3n favorable: El lenguaje natural es inherentemente ambiguo, por lo tanto, se deber\u00e1 procurar llevar a una notaci\u00f3n que permita reducir la ambig\u00fcedad y unificar el l\u00e9xico empleado por el usuario, en lo posible.</p> </li> <li> <p>Traducir a lenguaje t\u00e9cnico los Requerimientos: Sumado a una notaci\u00f3n adecuada, el lenguaje empleado debe poder ser utilizado en pr\u00f3ximas etapas.</p> </li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Modelo%20de%20Dominio/","title":"Modelo de Dominio","text":"<p>Representa las \u201ccosas\u201d que existen o los \u201ceventos\u201d que suceden en el entorno en el que se desenvuelve el sistema.</p> <p>Representaci\u00f3n conceptual de los elementos clave, conceptos y relaciones dentro de un dominio de problema espec\u00edfico en el desarrollo de software.</p> <p>Describe entidades del negocio que representan cosas que se manipulan en el negocio.  Es especialmente representado en un Diagrama de Clases, que muestra las entidades del dominio como clases, con sus atributos, operaciones y Relaciones (asociaci\u00f3n, agregaci\u00f3n, composici\u00f3n, generalizaci\u00f3n).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Modelo%20de%20Dominio/#que-no-es","title":"Qu\u00e9 no es","text":"<p>Este modelo del dominio del problema, y por ende el diagrama de clases, NO son una representaci\u00f3n de la base de datos donde el objetivo que se persigue es diferente y se construye en base a reglas diferentes como la normalizaci\u00f3n.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Modelo%20de%20Vistas%204%2B1/","title":"Modelo de Vistas 4+1","text":"<p>El modelo de vistas 4+1 es un marco conceptual utilizado en ingenier\u00eda de software, propuesto por Philippe Kruchten en 1995, para describir la arquitectura de un sistema de software desde m\u00faltiples perspectivas o \"vistas\".</p> <p>Kruchten argumenta que una sola vista arquitect\u00f3nica no puede capturar la complejidad de un sistema de software, ya que las partes interesadas (desarrolladores, gerentes, clientes, administradores de sistemas) tienen preocupaciones distintas. El modelo propone que un sistema software se ha de documentar y mostrar (tal y como se propone en el est\u00e1ndar IEEE 1471-2000) con 4 vistas bien diferenciadas.  Kruchten enfatiza que el modelo 4+1 no es un proceso de dise\u00f1o, sino un marco para describir la arquitectura. No dicta c\u00f3mo dise\u00f1ar el sistema, sino c\u00f3mo comunicarlo. El nombre \"4+1\" se refiere a cuatro vistas principales m\u00e1s una vista adicional que las unifica, que es la vista de escenario. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Modelo%20de%20Vistas%204%2B1/#las-cuatro-vistas-principales","title":"Las Cuatro Vistas Principales","text":"<p>Vista L\u00f3gica/Dise\u00f1o (Logical View) - Representa la descomposici\u00f3n funcional del sistema, enfoc\u00e1ndose en los elementos que proveen la funcionalidad requerida por los usuarios finales. - Representa la estructura del sistema en t\u00e9rminos de sus componentes funcionales, como Clases, objetos, interfaces o m\u00f3dulos. Colaboraci\u00f3n entre clases. - Audiencia: Dise\u00f1adores, usuarios finales y analistas de sistemas. - Diagramas UML asociados: Diagrama de Clases, diagramas de objetos, Diagrama de Secuencia,</p> <p>Vista de Implementaci\u00f3n (Implementation View) - Describe c\u00f3mo se organiza el sistema en t\u00e9rminos de Artefactos f\u00edsicos, como archivos de c\u00f3digo, bibliotecas, ejecutables o componentes desplegables.  - Se centra en la estructura del software implementado, la organizaci\u00f3n del software desde la perspectiva del desarrollo.  - Audiencia: Desarrolladores, gestores de configuraci\u00f3n, arquitectos. - Diagramas UML asociados: Diagrama de Componentes, Diagrama de Paquetes.</p> <p>Vista de Proceso (Process View) - Representa el comportamiento din\u00e1mico del sistema, incluyendo PROCESOS, hilos, Interacci\u00f3nes entre Componentes y concurrencia.  - Refiere a la sincronizaci\u00f3n de procesos. - Audiencia: Integradores, desarrolladores  - Se centra en aspectos como rendimiento, escalabilidad y tolerancia a fallos. -  Diagrama de Actividad, Diagrama de Comunicaci\u00f3n.</p> <p>Vista F\u00edsica (Physical View) - Describe c\u00f3mo los componentes del software se mapean/distribuyen a la infraestructura f\u00edsica, como servidores, nodos, redes y dispositivos. Se centra en la topolog\u00eda del sistema y su despliegue. - Audiencia: Administradores de sistemas, ingenieros de infraestructura, integradores. - Diagrama de Despliegue.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Modelo%20de%20Vistas%204%2B1/#la-vista-adicional-vista-de-escenarios-scenarios-view-o-1","title":"La Vista Adicional: Vista de Escenarios (Scenarios View o +1)","text":"<p>Esta vista unifica las otras cuatro vistas al describir Caso de Uso o escenarios clave que ilustran c\u00f3mo los elementos de las vistas l\u00f3gica, de implementaci\u00f3n, de proceso y de despliegue interact\u00faan para cumplir con los requisitos del sistema. Es la \"vista integradora\". Por lo tanto, la audiencia de esta vista ser\u00edan todas las partes interesadas. - Diagramas UML asociados: Diagrama de Casos de Uso. - Ejemplo: Un escenario como \"Usuario realiza un pr\u00e9stamo de libro\" mostrar\u00eda c\u00f3mo el usuario interact\u00faa con la interfaz (vista l\u00f3gica), c\u00f3mo se ejecuta el proceso (vista de proceso), qu\u00e9 componentes se usan (vista de implementaci\u00f3n) y en qu\u00e9 nodos se ejecuta (vista de despliegue).</p> <p>Resumen adicional. El modelo 4+1 utiliza diagramas UML para representar cada vista, asegurando que cada perspectiva sea clara para las partes interesadas relevantes: - Vista L\u00f3gica: Enfocada en la funcionalidad (UML: clases, objetos). - Vista de Implementaci\u00f3n: Enfocada en la construcci\u00f3n del software (UML: componentes). - Vista de Proceso: Enfocada en el comportamiento din\u00e1mico (UML:  actividad). - Vista de Despliegue: Enfocada en la infraestructura (UML: despliegue). - Vista de Escenarios: Une todo con casos de uso (UML: casos de uso).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/M%C3%A1quina%20de%20Estados/","title":"M\u00e1quina de Estados","text":"<p>Si bien parece ser que una m\u00e1quina de estados (modelo conceptual/l\u00f3gica subyacente) difiere de lo que ser\u00eda un diagrama de estados (representaci\u00f3n del modelo conceptual), para este repositorio lo tomaremos como id\u00e9nticos y se har\u00e1 referencia a uno para indicar el otro y viceversa.</p> <p>Una m\u00e1quina de estados es un grafo de estados y transiciones.</p> <p>Modela las posibles historias de vida de un objeto de una clase, todos el conjunto de estados por los cuales pasa el objeto en respuesta a eventos.  Una m\u00e1quina de estados contiene estados conectados por transiciones. (Clases)      Normalmente, una m\u00e1quina de estados est\u00e1 vinculada a una clase, y describe la respuesta de una instancia de la clase a los eventos que recibe.  Las m\u00e1quinas de estados tambi\u00e9n se pueden vincular a comportamientos, casos de uso y Colaboraci\u00f3nes para describir su ejecuci\u00f3n.  - Los estados se representan como rect\u00e1ngulos con esquinas redondeadas. Cada estado modela un periodo de tiempo durante la vida de un objeto en el que satisface ciertas condiciones. - Las transiciones son flechas etiquetadas con eventos y, opcionalmente, acciones o guardas. Llevan al objeto a un nuevo estado. - Cuando se dispara una transici\u00f3n, se ejecuta un efecto (acci\u00f3n o actividad) asociada a la transici\u00f3n.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/M%C3%A1quina%20de%20Estados/#problema","title":"Problema","text":"<p>El estado inicial de una entrada (representado por un punto negro) es el estado Disponible. Antes de que comience la temporada, se asignan los asientos para los abonados de la temporada. Las entradas individuales adquiridas interactivamente se bloquean primero mientras los clientes realizan una selecci\u00f3n. Despu\u00e9s de esto, se venden o se liberan si son rechazadas. Si el cliente tarda demasiado tiempo en realizar la selecci\u00f3n, finaliza el tiempo para la transacci\u00f3n y el asiento se libera. Los asientos vendidos a los abonados de la temporada se pueden cambiar para otras representaciones, en cuyo caso, vuelven a estar disponibles de nuevo.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/M%C3%A1quina%20de%20Estados/#mas","title":"M\u00e1s","text":"<p>Este diagrama puede ser implementado mediante estados anidados y estados compuestos. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Proceso%20de%20Desarrollo%20Unificado%20%28PUD%29/","title":"Proceso de Desarrollo Unificado (PUD)","text":"<p>En cierto modo, el proceso unificado es un intento por obtener los mejores rasgos y caracter\u00edsticas de los modelos tradicionales del PROCESO del software, pero en forma que implemente muchos de los mejores principios de Agilidad en el software.  Desarrollado por Ivar Jacobson, Grady Booch y James Rumbaugh en Rational Software.  - Es un proceso iterativo e incremental que utiliza el Lenguaje Unificado de Modelado (UML) como herramienta principal para modelar sistemas. - Dirigido por casos de uso. Utiliza los Caso de Uso como base para capturar y validar Requerimientos (pruebas). - Iterativo e incremental. El desarrollo se divide en iteraciones cortas, cada una produciendo un incremento funcional del sistema. - Centrado en la arquitectura. Se prioriza la creaci\u00f3n de una arquitectura robusta desde el inicio. El Proceso Unificado se organiza en dos dimensiones principales: - Dimensi\u00f3n horizontal: Representa el tiempo, dividido en fases del ciclo de vida. - Dimensi\u00f3n vertical: Representa las disciplinas (o flujos de trabajo), que son actividades que se realizan a lo largo del proyecto.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Proceso%20de%20Desarrollo%20Unificado%20%28PUD%29/#fases","title":"Fases","text":"<ol> <li>Fase de inicio: <ul> <li>Identificar los casos de uso principales (requisitos iniciales).</li> <li>Definir el alcance del sistema y sus objetivos.</li> <li>Se puede dise\u00f1ar una arquitectura del sistema de alto nivel.</li> <li>Se desarrolla una descripci\u00f3n del producto final a partir de una idea y se presenta el an\u00e1lisis de negocio para el producto.</li> </ul> </li> <li>Fase de elaboraci\u00f3n: <ul> <li>Se especifican en detalle la mayor\u00eda de los casos de uso y se dise\u00f1a la arquitectura del sistema (con diagramas UML y dem\u00e1s elementos). </li> <li>Refinar el plan del proyecto y el cronograma.</li> </ul> </li> <li>Fase de construcci\u00f3n: <ul> <li>Se crea al producto. Implementar y probar los casos de uso en iteraciones.</li> <li>Realizar Pruebas Unitarias, Pruebas de Integraci\u00f3n y Pruebas de Sistema.</li> </ul> </li> <li>Fase de transici\u00f3n: <ul> <li>Se prueba el producto y se informan defectos e deficiencias.</li> <li>Corregir defectos y ajustar el sistema seg\u00fan retroalimentaci\u00f3n.</li> <li>Pruebas beta o Pruebas de Aceptaci\u00f3n.</li> <li>Desplegar el sistema en el entorno de producci\u00f3n.</li> </ul> </li> </ol>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Proceso%20de%20Desarrollo%20Unificado%20%28PUD%29/#flujos-de-trabajo","title":"Flujos de Trabajo","text":"<p>$$\\text{FT}=\\text{actividades}\\space+\\space \\text{trabajadores} \\space+\\space \\text{artefactos}$$ Cada flujo de trabajo est\u00e1 compuesto por: Actividades, que son las tareas que se llevan a cabo en el flujo de trabajo; Trabajadores que son qui\u00e9nes ejecutan las actividades y Artefactos que es toda la informaci\u00f3n generada a partir del trabajo realizado en el FT. Estas actividades se realizan a lo largo de las fases, pero con diferente intensidad en cada una.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Proceso%20de%20Desarrollo%20Unificado%20%28PUD%29/#requisitos","title":"Requisitos","text":"<ul> <li>Capturar y documentar los requisitos funcionales (a trav\u00e9s de casos de uso) y no funcionales (rendimiento, seguridad, etc.).</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Proceso%20de%20Desarrollo%20Unificado%20%28PUD%29/#analisis-y-diseno","title":"An\u00e1lisis y Dise\u00f1o","text":"<ul> <li>Dise\u00f1ar la arquitectura y los Componentes del sistema, transformando requisitos en modelos t\u00e9cnicos.</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Proceso%20de%20Desarrollo%20Unificado%20%28PUD%29/#implementacion","title":"Implementaci\u00f3n","text":"<ul> <li>Escribir el c\u00f3digo fuente y construir el sistema basado en los modelos de dise\u00f1o.</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Proceso%20de%20Desarrollo%20Unificado%20%28PUD%29/#pruebas","title":"Pruebas","text":"<ul> <li>Verificar que el sistema cumple con los requisitos y est\u00e1 libre de defectos.</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones%20entre%20Casos%20de%20Uso/","title":"Relaciones entre Casos de Uso","text":"<p>Este tipo de Relaciones en particular, se utilizan para factorizar el comportamiento com\u00fan entre los Caso de Uso y para factorizar variantes (poniendo ese comportamiento en otros casos de uso que lo extienden). </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones%20entre%20Casos%20de%20Uso/#generalizacion","title":"Generalizaci\u00f3n","text":"<p>La generalizaci\u00f3n entre casos de uso es como la generalizaci\u00f3n entre clases. - - El caso de uso hijo hereda el comportamiento del caso de uso padre. El hijo puede modificar y/o agregar comportamiento al heredado. - Es utilizada m\u00e1s que nada para simplificar la comprensi\u00f3n del Diagrama de Casos de Uso. Gr\u00e1ficamente se indica, al igual que la herencia entre clases, con una l\u00ednea continua con punta de flecha vac\u00eda dirigida del caso de uso hijo hacia el padre. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones%20entre%20Casos%20de%20Uso/#inclusion","title":"Inclusi\u00f3n","text":"<p>Significa que un caso de uso base incorpora expl\u00edcitamente el comportamiento de otro caso de uso. - El caso de uso incluido nunca es instanciado por un Actor, sino que es instanciado por el/los casos de uso que lo incluyen. Por ello, un caso de uso de inclusi\u00f3n es siempre un caso de uso abstracto. - La relaci\u00f3n se usa para abstraer el comportamiento com\u00fan entre casos de uso, evitando describir el mismo flujo de eventos repetidas veces.  - La secuencia de comportamiento y los atributos del caso de uso incluido se encapsulan y no pueden modificarse o accederse, solamente puede utilizarse el resultado (o funci\u00f3n) del caso de uso incluido. - Se representa como una dependencia estereotipada (Estereotipo) con la palabra <code>&lt;&lt;include&gt;&gt;</code>.  </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones%20entre%20Casos%20de%20Uso/#extension","title":"Extensi\u00f3n","text":"<p>Significa que un caso de uso base incorpora impl\u00edcitamente el comportamiento de otro caso de uso.  - El caso de uso base puede ejecutarse aisladamente, pero bajo ciertas condiciones su funcionalidad ser\u00e1 extendida por la del caso de uso de extensi\u00f3n. De esta forma se separa el comportamiento opcional del obligatorio. - El caso de uso de extensi\u00f3n puede en algunos casos ser instanciado directamente por un actor (en este caso se considera un caso de uso concreto). - Si el caso de uso de extensi\u00f3n nunca es instanciado directamente por un actor, entonces es un caso de uso abstracto. - Se representa como una dependencia estereotipada (Estereotipo) con la palabra extend, dirigida desde el caso de uso de extensi\u00f3n hacia el caso de uso base. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones/","title":"Relaciones","text":"<p>Las relaciones entre Clasificadores son asociaci\u00f3n, generalizaci\u00f3n y varios tipos de dependencia, entre los que se incluyen la realizaci\u00f3n y el uso. Describen c\u00f3mo se conectan y colaboran los diferentes Componentes de un sistema, como Clases, objetos, Caso de Uso, entre otros. Tambi\u00e9n suelen mostrar informaci\u00f3n adicional como multiplicidad (n\u00famero de instancias de una clase que pueden estar relacionadas con la clase asociada) y nombres de roles (identificaci\u00f3n del extremo de una asociaci\u00f3n). </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones/#asociacion","title":"Asociaci\u00f3n","text":"<p>La relaci\u00f3n de asociaci\u00f3n describe conexiones sem\u00e1nticas entre objetos individuales (instancias) de clases dadas. Indicando que los objetos de una clase pueden estar relacionados con los objetos de otra. Las relaciones restantes relacionan las descripciones de los propios clasificadores, no de sus instancias. No implica una dependencia fuerte, sino que simplemente existe una conexi\u00f3n entre las clases. Ambas pueden existir por separado. - Notaci\u00f3n: Una l\u00ednea s\u00f3lida entre dos clases, a menudo con un nombre que describe la relaci\u00f3n.  - Puede incluir multiplicidad (e.g., 1, <code>0..</code>, <code>1..</code>), es decir, cu\u00e1ntas instancias pueden estar relacionadas con una instancia de otra clase en una relaci\u00f3n. Se especifica en los extremos de una l\u00ednea de relaci\u00f3n, donde corresponde la navegaci\u00f3n. - La navegaci\u00f3n indica la direcci\u00f3n en la que se puede acceder a los objetos en una relaci\u00f3n. Se indica con una flecha en un extremo de la l\u00ednea de relaci\u00f3n, para decir que la navegaci\u00f3n es unidireccional. La navegaci\u00f3n es bidireccional, en cambio, si lleva una flecha en ambos extremos de la l\u00ednea o si no lleva ninguna, pero se aclara con una nota que es bidireccional. En general, las asociaciones son bidireccionales.  - <code>Estudiante ---- Curso</code> - Ejemplo: Una clase <code>Estudiante</code> est\u00e1 asociada con una clase <code>Curso</code>. Un estudiante puede estar inscrito en varios cursos (multiplicidad <code>0..*</code>).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones/#agregacion","title":"Agregaci\u00f3n","text":"<p>Es un tipo especial de asociaci\u00f3n que representa una relaci\u00f3n \"todo-parte\" donde las partes pueden existir independientemente del todo. Es una relaci\u00f3n m\u00e1s d\u00e9bil que la composici\u00f3n.  Quiere decir que si el objeto \"todo\" se destruye, el objeto \"parte\" sigue existiendo. - Notaci\u00f3n: Una l\u00ednea con un diamante hueco en el lado del \"todo\". <code>Universidad \u25c7---- Departamento</code> - Ejemplo: Una clase <code>Universidad</code> tiene una agregaci\u00f3n con la clase <code>Departamento</code>. Los departamentos forman parte de la universidad, pero un departamento puede existir sin una universidad espec\u00edfica.     - </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones/#composicion","title":"Composici\u00f3n","text":"<p>Es una forma m\u00e1s fuerte de agregaci\u00f3n, donde las partes no pueden existir sin el todo. Si el todo se destruye, las partes tambi\u00e9n.  El compuesto es el responsable \u00fanico de gestionar sus partes. - Notaci\u00f3n: Una l\u00ednea con un diamante lleno en el lado del \"todo\". - Ejemplo: Una clase <code>Casa</code> tiene una composici\u00f3n con la clase <code>Habitaci\u00f3n</code>. Si la casa se destruye, las habitaciones tambi\u00e9n dejan de existir. - <code>Casa \u25c6---- Habitaci\u00f3n</code>     - </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones/#dependencia","title":"Dependencia","text":"<p>Indica que una clase depende de otra para realizar alguna funci\u00f3n, pero la relaci\u00f3n es m\u00e1s d\u00e9bil y no implica una conexi\u00f3n estructural permanente. Un cambio en la clase de la que depende puede afectar a la otra clase. - Seg\u00fan esta definici\u00f3n, las relaciones de asociaci\u00f3n, de generalizaci\u00f3n y realizaci\u00f3n son dependencias, pero \u00e9stas tienen sem\u00e1nticas espec\u00edficas con consecuencias importantes. Por lo tanto, ellas tienen sus propios nombres y su sem\u00e1ntica detallada. - Generalmente, las dependencias se utilizan para indicar que una clase utiliza a otra como argumento en la signatura de una operaci\u00f3n.     -  - Notaci\u00f3n: Una l\u00ednea discontinua con una flecha apuntando a la clase de la que se depende. - Ejemplo: Una clase Informe depende de una clase Impresora para imprimir un documento. - <code>Informe ----&gt; Impresora</code></p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones/#generalizacion-herencia","title":"Generalizaci\u00f3n (Herencia)","text":"<p>La descripci\u00f3n m\u00e1s espec\u00edfica es completamente consistente con la m\u00e1s general. Representa una relaci\u00f3n \"es-un\" entre una clase padre (superclase) y una clase hija (subclase). La subclase hereda atributos y m\u00e9todos de la superclase. - Notaci\u00f3n: Una l\u00ednea con una flecha triangular hueca apuntando a la superclase. - Ejemplo: Una clase <code>Veh\u00edculo</code> es la superclase de <code>Coche</code> y <code>Bicicleta</code>. Ambos heredan propiedades de veh\u00edculo. - <code>Coche ----|&gt; Veh\u00edculo</code> - La generalizaci\u00f3n permite operaciones polim\u00f3rficas, es decir, cuya implementaci\u00f3n (m\u00e9todo) se determina por la clase de objeto a la que se aplican, en lugar de ser expl\u00edcitamente indicadas en la subclase. - Adem\u00e1s permite lo que se denomina herencia, que permite que las partes compartidas de la descripci\u00f3n se declaren una vez y sean compartidas por muchas clases, en lugar de repetirlas en cada clase que las utiliza.     -  - Se puede dar el caso de herencia m\u00faltiple, donde una clase hereda los atributos y operaciones de sus dos padres.     - </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Relaciones/#realizacion","title":"Realizaci\u00f3n","text":"<p>Es una relaci\u00f3n entre una interfaz y una clase concreta que la implementa. La clase se compromete a implementar todos los m\u00e9todos definidos en la interfaz, pero no la estructura. El cliente debe tener (por herencia o por declaraci\u00f3n directa) al menos todas las operaciones que tiene el proveedor. - Notaci\u00f3n: Similar a la herencia, pero con una l\u00ednea discontinua y una flecha triangular hueca. - Ejemplo: Una clase <code>Coche</code> implementa una interfaz <code>Veh\u00edculoConducible</code>. - <code>Coche ----|&gt; Veh\u00edculoConducible</code> - Notar que para interfaz, as\u00ed como para otros elementos UML, hay m\u00e1s de una notaci\u00f3n com\u00fan, pero que son m\u00e1s convenientes unas u otras notaciones dependiendo el diagrama o vista UML. Se adjunta otro ejemplo, este tipo de notaci\u00f3n es m\u00e1s com\u00fan en un Diagrama de Componentes (apartado donde adem\u00e1s se aprovecha para explicar la interfaz obligatoria y proporcionada)     - </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/UML/","title":"UML","text":"<p>El Lenguaje Unificado de Modelado (UML) es un lenguaje de Modelado visual de prop\u00f3sito general que se utiliza para especificar, visualizar, construir y documentar los artefactos de un sistema de software, sus modelos de arquitectura, en particular.</p> <p>Cuando decimos artefactos, nos referimos a bloques de informaci\u00f3n. - Tambi\u00e9n est\u00e1 pensado pasa ser utilizado con todos los m\u00e9todos de desarrollo, etapas del ciclo de vida, dominios de aplicaci\u00f3n y medios.  - Pretende unificar el modelado de software, incorporando las mejores pr\u00e1cticas.  - Tiene partes est\u00e1ticas, din\u00e1micas, de entorno y organizativas. - UML es s\u00f3lo un lenguaje, no una metodolog\u00eda. Es parte de un m\u00e9todo de desarrollo.</p> <p>En esencia, como se cuenta en la Historia de UML, UML agrupa notaciones y conceptos provenientes de distintos tipos de m\u00e9todos orientado a objetos  Es aconsejable acompa\u00f1ar este lenguaje con una metodolog\u00eda, como por ejemplo el PUD, o Proceso de Desarrollo Unificado (PUD), tambi\u00e9n desarrollado por Jacobson, Rumbaugh y Booch.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/UML/#proposito-del-uml","title":"Prop\u00f3sito del UML","text":"<p>El modelado proporciona una comprensi\u00f3n de un sistema. Nunca es suficiente con un \u00fanico modelo, a menudo se necesitan m\u00faltiples modelos conectados entre s\u00ed. Por lo que el vocabulario y las reglas de UML indican c\u00f3mo crear y leer modelos bien formados. El UML nos permite entonces: - Visualizar. Detr\u00e1s de cada s\u00edmbolo en la notaci\u00f3n UML hay una sem\u00e1ntica bien definida. As\u00ed, un desarrollador puede construir un modelo en UML y otro desarrollador, puede interpretar ese modelo sin ambig\u00fcedad. - Especificar. UML cubre la especificaci\u00f3n de todas las decisiones de an\u00e1lisis, dise\u00f1o e implementaci\u00f3n que deben realizarse al desarrollar un sistema con gran cantidad de software. - Construir. La correspondencia UML permite ingenier\u00eda directa: la generaci\u00f3n de c\u00f3digo a partir de un modelo UML en un lenguaje de programaci\u00f3n. UML no es un lenguaje de programaci\u00f3n visual, pero sus modelos pueden corresponderse a muchos lenguajes de programaci\u00f3n. - Documentar. Producir Artefactos (requisitos, arquitectura, dise\u00f1o, c\u00f3digo fuente, planificaci\u00f3n de proyectos, pruebas, prototipos, versiones).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/UML/#objetivos","title":"Objetivos","text":"<ul> <li>UML es un lenguaje de modelado de prop\u00f3sito general que pueden utilizar todos los modeladores. Est\u00e1 basado en el com\u00fan acuerdo de gran parte de la comunidad inform\u00e1tica, por lo que est\u00e1 pensado para ser tan familiar como sea posible.</li> <li>Dar soporte a la mayor\u00eda de Modelos de PROCESO.</li> <li>Ser tan simple como fuera posible.</li> </ul> <p>No hay una l\u00ednea clara entre los diversos conceptos y construcciones en UML, pero el Manual de Referencia UML lo divide en lo que denominan Vistas de UML, que nos ayudar\u00e1n a tener una impresi\u00f3n para utilizar UML.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/","title":"Vistas de UML","text":"<p>Son una forma de organizar y representar diferentes aspectos de un sistema de software mediante diagramas del Lenguaje Unificado de Modelado (UML).</p> <p>Cada vista se enfoca en un conjunto espec\u00edfico de caracter\u00edsticas o perspectivas del sistema, permitiendo a los interesados comprender y analizar el sistema desde diferentes \u00e1ngulos. </p> <p>A continuaci\u00f3n se adjunta una tabla con las vistas y sus correspondientes diagramas y conceptos. Para mayor entendimiento es recomendable leer el apartado de \u00c1reas Conceptuales de UML. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#vista-estatica","title":"Vista est\u00e1tica","text":"<ul> <li>Modela conceptos del dominio de la aplicaci\u00f3n.</li> <li>Est\u00e1tica porque no describe el comportamiento dependiente del tiempo del sistema.</li> <li>Captura la estructura de los objetos. Todo lo que concierne a estructura de datos tradicional. Tanto los datos, como las operaciones, son cuantificadas en clases. Y como sabemos, los objetos son instancias de clases.</li> <li>Clases y sus Relaciones como principales componentes.<ul> <li></li> </ul> </li> <li>Un Diagrama de Clases es donde mejor se aprecia esta vista.</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#vista-de-diseno","title":"Vista de Dise\u00f1o","text":"<ul> <li>Modelan la estructura de dise\u00f1o de la propia aplicaci\u00f3n, como su expansi\u00f3n en clasificadores estructurados, las Colaboraci\u00f3nes que proporcionan funcionalidad y su ensamblado a partir de Componentes con interfaces bien definidas.</li> <li>Proporcionan una oportunidad para establecer una correspondencia entre las clases y los componentes de implementaci\u00f3n.</li> <li>Refiere al Diagrama de Colaboraci\u00f3n, Diagrama de Estructura Interna, Diagrama de Componentes.</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#vista-de-casos-de-uso","title":"Vista de Casos de Uso","text":"<ul> <li>Modela la funcionalidad de un sistema tal como lo perciben los agentes externos, denominados actores, que interact\u00faan con el sistema desde un punto de vista particular.</li> <li>Un caso de uso es una unidad de funcionalidad expresada como una transacci\u00f3n entre los actores y el sistema.</li> <li>Diagrama de Casos de Uso.</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#vista-de-maquina-de-estados","title":"Vista de M\u00e1quina de Estados","text":"<ul> <li>Describe el comportamiento din\u00e1mico de los objetos, durante un periodo de tiempo, mediante el modelado de los ciclos de vida de cada clase.</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#vista-de-actividad","title":"Vista de Actividad","text":"<ul> <li>Un Diagrama de Actividad encapsula un modelo desde la perspectiva de Actividad. </li> <li>Esta vista modela los flujos de trabajo, procesos o c\u00e1lculos como una secuencia de actividades conectadas por flujos de control y, en algunos casos, flujos de datos. </li> <li>Tambi\u00e9n puede mostrar la especificaci\u00f3n de un Caso de Uso.</li> </ul> <p>Trazando similitudes y diferencias. Las M\u00e1quina de Estados y las Actividades son similares, en tanto que ambas describen secuencias de estados que ocurren a lo largo del tiempo, y las condiciones que causan los cambios entre los estados. Pero se diferencian en que la primera es m\u00e1s reduccionista y hace enfoque en los estados de un objeto que se someten a un c\u00f3mputo, mientras que la actividad se enfoca en los propios estados de c\u00f3mputo.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#vista-de-interaccion","title":"Vista de Interacci\u00f3n","text":"<p>Describe el intercambio de secuencias de Mensajes entre las partes de un sistema.  Bajo esta vista, el Diagrama de Comunicaci\u00f3n y Diagrama de Secuencia. Los diagramas de secuencia muestran claramente secuencias temporales pero no muestran expl\u00edcitamente relaciones entre objetos.  Los diagramas de comunicaci\u00f3n muestran relaciones entre objetos con claridad, pero las secuencias temporales se obtienen de los n\u00fameros de secuencia.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#vista-de-despliegue","title":"Vista de Despliegue","text":"<p>Vistas arquitect\u00f3nicas que se utiliza para modelar la estructura f\u00edsica de un sistema, mostrando c\u00f3mo se distribuyen los Componentes de software en el hardware y c\u00f3mo interact\u00faan a trav\u00e9s de la red o infraestructura f\u00edsica.  Esta vista es representada principalmente mediante el Diagrama de Despliegue, que describe la topolog\u00eda f\u00edsica del sistema, incluyendo Nodos, conexiones y Artefactos.  Muestra la disposici\u00f3n f\u00edsica de los nodos. Tambi\u00e9n puede resaltar los cuellos de botella en el rendimiento debidos a la ubicaci\u00f3n de los artefactos que manifiestan componentes independientes en diferentes nodos</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#vista-de-gestion-del-proyectode-agrupacion","title":"Vista de Gesti\u00f3n del Proyecto/de Agrupaci\u00f3n","text":"<p>La vista de gesti\u00f3n del modelo modela la organizaci\u00f3n del modelo en s\u00ed mismo. Un modelo abarca un conjunto de Paquetes que contienen los elementos del modelo. La informaci\u00f3n de la gesti\u00f3n del modelo se suele mostrar en un Diagrama de Paquetes, que son una variedad de los diagramas de clases.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Vistas%20de%20UML/#perfiles","title":"Perfiles","text":"<p>UML est\u00e1 definido utilizando un metamodelo, es decir, un modelo del propio lenguaje de modelado. La modificaci\u00f3n del metamodelo es complicada, pero el mecanismo de los Perfiles permite cambios limitados sobre UML sin modificar el metamodelo subyacente. Los perfiles y las Restricci\u00f3nes permiten que UML sea adaptado a dominios o plataformas espec\u00edficas.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/%C3%81reas%20Conceptuales%20de%20UML/","title":"\u00c1reas Conceptuales de UML","text":"<p>%%Inciso incomprensible con el no entendimiento de conceptos agrupados en la carpeta \"Diccionario\"%%</p> <p>Son categor\u00edas definidas en la especificaci\u00f3n de UML para clasificar diagramas seg\u00fan el tipo de informaci\u00f3n que modelan (estructura, comportamiento, interacci\u00f3n). Son parte del est\u00e1ndar UML y se centran en la sem\u00e1ntica de los diagramas.</p> <p>La sem\u00e1ntica, la consideramos inherente a un Modelo, y es en ese inciso donde es mencionada. Son una gu\u00eda para los modeladores sobre qu\u00e9 diagramas usar seg\u00fan el aspecto del sistema, y con qu\u00e9 elementos. Los conceptos, modelos, y elementos de UML pueden agruparse en las siguientes \u00e1reas conceptuales:</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/%C3%81reas%20Conceptuales%20de%20UML/#estructura-estatica","title":"Estructura est\u00e1tica","text":"<p>Clases, Atributos y Operaciones. Esta \u00e1rea se centra en c\u00f3mo est\u00e1n organizados los componentes, relaciones y propiedades de un modelo en un momento dado.  - Los conceptos son modelados como Clases. - Varias clases pueden compartir su estructura com\u00fan utilizando la generalizaci\u00f3n, herencias. - Los objetos tambi\u00e9n tienen conexiones en tiempo de ejecuci\u00f3n con otros objetos individuales. Estas relaciones objeto a objeto se modelan mediante asociaciones entre clases. - Las clases pueden tener interfaces, los cuales describen su comportamiento visible desde el exterior.  - Los diagramas asociados m\u00e1s comunes a estas \u00e1reas son el Diagrama de Clases, diagrama de objetos (muestra instancias espec\u00edficas de clases), Diagrama de Componentes.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/%C3%81reas%20Conceptuales%20de%20UML/#construcciones-de-diseno","title":"Construcciones de Dise\u00f1o","text":"<p>Clasificadores, Puertos, Colaboraci\u00f3nes y Componentes. Describe los elementos que se utilizan en la fase de dise\u00f1o para modelar la arquitectura y los detalles t\u00e9cnicos de un sistema, orientados a la implementaci\u00f3n. - Un Clasificador estructurado es una extensi\u00f3n de una clase en UML que permite modelar su estructura interna como una colecci\u00f3n de partes conectadas mediante conectores. - Se suele representar en un Diagrama de Estructura Interna, donde la clase se muestra como un rect\u00e1ngulo que contiene partes internas (rect\u00e1ngulos m\u00e1s peque\u00f1os) unidas por l\u00edneas (conectores).</p> <ul> <li> <p>Una clase puede encapsular su estructura interna y exponer solo ciertas interfaces al exterior mediante un Puerto o m\u00e1s de uno.</p> </li> <li> <p>Colaboraci\u00f3n, Diagrama de Colaboraci\u00f3n.</p> </li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/%C3%81reas%20Conceptuales%20de%20UML/#construcciones-de-despliegue","title":"Construcciones de Despliegue","text":"<p>Nodo, Artefacto, Manifestaci\u00f3n y Vista de Despliegue. Son los elementos utilizados para modelar la distribuci\u00f3n f\u00edsica de un sistema en ejecuci\u00f3n, es decir, c\u00f3mo los elementos de software se implementan en el hardware o infraestructura f\u00edsica. - El Diagrama de Despliegue es el principal veh\u00edculo para la vista de despliegue, mostrando nodos como cubos 3D, artefactos como rect\u00e1ngulos, y relaciones como flechas. Adem\u00e1s de contener la representaci\u00f3n de todos los elementos mencionados.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/%C3%81reas%20Conceptuales%20de%20UML/#comportamiento-dinamico","title":"Comportamiento Din\u00e1mico","text":"<p>Interacci\u00f3n, Vida de un Objeto, Actividad. Elementos y diagramas utilizados para modelar el comportamiento de un sistema, es decir, c\u00f3mo sus componentes interact\u00faan o cambian de estado.  Un Diagrama de Casos de Uso muestra c\u00f3mo fluye la interacci\u00f3n entre usuarios y el sistema a lo largo del tiempo, lo cual es una forma de comportamiento observable y no una estructura est\u00e1tica, por lo que se dice que pertenece a esta \u00e1rea conceptual. Intentan capturar la vida de un objeto, las interacciones entre objetos y los flujos de ejecuci\u00f3n. - La historia de vida de un objeto muestra c\u00f3mo este interact\u00faa con el resto del mundo a lo largo de su existencia, enfoc\u00e1ndose en sus estados, eventos que lo afectan, acciones que realiza y transiciones entre estados. - Se representa mediante una M\u00e1quina de Estados. - Por ejemplo, en un sistema de biblioteca, un objeto <code>Libro</code> podr\u00eda tener estados como <code>Disponible</code>, <code>Prestado</code> y <code>Reservado</code>, con transiciones desencadenadas por eventos como \"prestar\" o \"devolver\".</p> <ul> <li> <p>Las interacciones se representan en un Diagrama de Secuencia y Diagrama de Comunicaci\u00f3n (notar diferencia entre ambos).</p> </li> <li> <p>Una actividad representa Flujos de Proceso, en un Diagrama de Actividad, que puede ser secuencial o concurrente, e incluye construcciones como decisiones, bucles y bifurcaciones. </p> </li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/%C3%81reas%20Conceptuales%20de%20UML/#organizacion-del-modeloelementos-de-agrupacion","title":"Organizaci\u00f3n del Modelo/Elementos de Agrupaci\u00f3n","text":"<p>Refiere a c\u00f3mo se estructura la informaci\u00f3n de modelado para que sea comprensible, manejable y escalable, especialmente en sistemas grandes. - Los Paquetes dividen un modelo grande en unidades m\u00e1s peque\u00f1as y comprensibles. - Se representan en un Diagrama de Paquetes. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/%C3%81reas%20Conceptuales%20de%20UML/#perfileselementos-de-anotacion","title":"Perfiles/Elementos de Anotaci\u00f3n","text":"<p>Perfiles, Estereotipos, Valores Etiquetados y Restricci\u00f3nes. Mecanismos de extensibilidad dise\u00f1ados para personalizar y adaptar el lenguaje a necesidades espec\u00edficas. Estas construcciones permiten a los usuarios definir nuevos tipos de elementos, agregar atributos personalizados y establecer restricciones adicionales, manteniendo la compatibilidad con el est\u00e1ndar UML.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Actividad/","title":"Actividad","text":"<p>Elemento que representa un comportamiento o PROCESO din\u00e1mico dentro de un sistema, modelado t\u00edpicamente en un Diagrama de Actividad.</p> <p>Es una unidad de trabajo que describe una secuencia de acciones ejecutadas para alcanzar un objetivo espec\u00edfico, como parte de un Caso de Uso, un proceso de negocio o una Interacci\u00f3n en el sistema. - Representa un proceso que puede incluir decisiones, bucles, entradas, salidas, transiciones. - Representa la ejecuci\u00f3n de un c\u00e1lculo. Se modela como un conjunto de nodos de actividad conectados mediante flujos de control (secuencia l\u00f3gica de acciones con flechas) y flujos de datos (transferencia de datos u objetos entre acciones con flechas). - Actividad vs. Acci\u00f3n: Una actividad es un proceso completo que contiene m\u00faltiples acciones. Una acci\u00f3n es un paso at\u00f3mico dentro de la actividad. - Pueden incluir condiciones previas y posteriores para definir requisitos antes o despu\u00e9s de la actividad.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Actividad/#notacion","title":"Notaci\u00f3n","text":"<p>Un componente de una actividad son los nodos, que difieren de lo que definimos como nodo de un diagrama de despliegue. Los nodos de este inciso son elementos que representan puntos espec\u00edficos en el flujo de una actividad. Incluyen:     - Nodo de inicio: Punto de partida del flujo (c\u00edrculo negro).     - Nodo de fin: Punto de finalizaci\u00f3n (c\u00edrculo con borde grueso o \"X\").     - Nodo de acci\u00f3n: Tarea espec\u00edfica (rect\u00e1ngulo con bordes redondeados).     - Nodo de decisi\u00f3n: Punto de bifurcaci\u00f3n condicional (rombo).</p> <p>Supongamos una actividad para \"Procesar un inicio de sesi\u00f3n\": - Nodo de inicio \u2192 Acci\u00f3n: \"Ingresar credenciales\" \u2192 Nodo de decisi\u00f3n: \"\u00bfCredenciales v\u00e1lidas?\"     - Si s\u00ed \u2192 Acci\u00f3n: \"Conceder acceso\" \u2192 Nodo de fin.     - Si no \u2192 Acci\u00f3n: \"Mostrar error\" \u2192 Nodo de fin. En un Diagrama de Actividad, esto se representa con nodos conectados por flechas, mostrando el flujo l\u00f3gico.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Actor/","title":"Actor","text":"<p>Un actor es el rol que juega un usuario en un Caso de Uso. </p> <p>Normalmente, un actor representa un rol que es jugado por una persona, un dispositivo de hardware o incluso otro sistema al interactuar con nuestro sistema. El Diagrama de Casos de Uso describe lo que hace el sistema para cada tipo de usuario. Cada usuario puede representarse por uno o m\u00e1s actores. El actor suele tener un nombre, que debe reflejar el rol que cumple el usuario al interactuar con el caso de uso al que est\u00e1 conectado. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Artefacto/","title":"Artefacto","text":"<p>Representa elementos tangibles del software, como archivos, bibliotecas, bases de datos o scripts, que se despliegan en Nodos. </p> <p>Son elementos concretos del mundo real que resultan del desarrollo. Un modelo, una descripci\u00f3n, o software, son ejemplos de lo que puede llegar a ser un artefacto. - Se encuentran inherentemente conectados con la implementaci\u00f3n de un sistema.  - Un artefacto se puede asociar con un Componente.} - Artefactos anidados. Un artefacto puede contener otros artefactos. Los artefactos anidados se despliegan en la misma instancia de nodo que el artefacto contenedor Ejemplo: En el sistema de biblioteca, un artefacto podr\u00eda ser <code>BibliotecaApp.jar</code> (un archivo Java ejecutable) o <code>BaseDatosBiblioteca.sql</code> (un archivo de base de datos).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Artefacto/#notacion","title":"Notaci\u00f3n","text":"<p>Un artefacto se muestra como un rect\u00e1ngulo con la palabra clave <code>\u00abartifact\u00bb</code> (artefacto) sobre el nombre del artefacto.  Una instancia de un artefacto se muestra con su nombre subrayado. El despliegue de un artefacto en un nodo (o en instancias de \u00e9l) se muestra colocando el s\u00edmbolo del artefacto dentro de los l\u00edmites del s\u00edmbolo del nodo.  En el apartado de Nodo se ve una figura de ambos elementos.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Caso%20de%20Uso/","title":"Caso de Uso","text":"<p>Descripci\u00f3n de una interacci\u00f3n entre un usuario (o actor) y un sistema que logra un objetivo espec\u00edfico para ese usuario.</p> <p>Un caso de uso es una unidad de funcionalidad proporcionada por un Clasificador y manifestada mediante secuencias de Mensajes intercambiados entre el sistema y uno o m\u00e1s usuarios externos (representados como actores).</p> <p>El prop\u00f3sito de un caso de uso es definir una pieza de comportamiento de un clasificador, de un sistema desde la perspectiva del usuario. Describe qu\u00e9 hace el sistema, no c\u00f3mo lo hace. La utilizaci\u00f3n de los casos de uso hace que los analistas deben pensar en t\u00e9rminos de qui\u00e9nes son los usuarios y qu\u00e9 necesidad de funcionalidades requieren cada actor.  El comportamiento de un caso de uso se puede especificar de varias maneras: mediante una M\u00e1quina de Estados adjunta, una especificaci\u00f3n de actividad. - Son muy comunes por supuesto en Diagrama de Casos de Uso.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Clases/","title":"Clases","text":"<p>Describen objetos discretos que almacenan la informaci\u00f3n y se comunican para implementar un comportamiento.  La informaci\u00f3n que almacenan es modelada como atributos; el comportamiento que realizan es modelado como operaciones.</p> <p>Una clase es el descriptor de un conjunto de objetos que comparten los mismos atributos, operaciones, m\u00e9todos, relaciones y comportamiento.</p> <p>En UML, una clase es un tipo de Clasificador. Los clasificadores incluyen a elementos parecidos a las clases, pero encuentran su expresi\u00f3n m\u00e1s completa en las clases, por lo que podemos decir que comparten notaci\u00f3n.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Clases/#instancias","title":"Instancias","text":"<p>Un objeto instanciado de una clase es una instancia directa de la clase y una instancia indirecta de los antepasados de la clase. El objeto contiene una ranura para albergar un valor para cada atributo; acepta todas las operaciones y se\u00f1ales de su clase, y puede aparecer en enlaces de asociaciones involucrando a la clase.</p> <p>Algunas clases pueden no ser instanciadas directamente, pero en su lugar se utilizan s\u00f3lo para describir estructuras compartidas entre sus descendientes. Tales clases se denominan clases abstractas. Una clase que se puede instanciar es una clase concreta.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Clasificador/","title":"Clasificador","text":"<p>Elemento del modelo que describe caracter\u00edsticas de comportamiento y estructurales.</p> <p>Elemento que describe un conjunto de objetos con caracter\u00edsticas comunes, como propiedades, comportamientos y relaciones.</p> <p>Es un concepto fundamental que sirve como plantilla para definir estas caracter\u00edsticas. Ejemplos de clasificadores incluyen Clases, interfaces, tipos de datos, actores, casos de uso, Componentes y Nodos, entre otros. En UML, una clase es un tipo de clasificador. El clasificador incluye un n\u00famero de elementos parecidos a las clases, pero encuentra su expresi\u00f3n plena en la clase.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Clasificador/#flexibilidad","title":"Flexibilidad","text":"<p>Al ser un concepto amplio, los clasificadores abarcan muchos elementos de UML, desde clases en Diagrama de Clases hasta Caso de Uso en Diagrama de Casos de Uso, lo que los hace omnipresentes. Adem\u00e1s, los clasificadores pueden relacionarse entre s\u00ed (herencia, asociaci\u00f3n, etc.), lo que permite modelar sistemas complejos de manera coherente.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Clasificador/#notacion","title":"Notaci\u00f3n","text":"<p>En UML, la notaci\u00f3n de un clasificador y de una clase est\u00e1 estrechamente relacionada, ya que una clase es un tipo espec\u00edfico de clasificador. La notaci\u00f3n espec\u00edfica de un clasificador depende del tipo de elemento que represente, pero en general, se muestra cono un rect\u00e1ngulo de l\u00ednea continua con tres compartimentos separados por l\u00edneas horizontales.  El compartimento intermedio alberga una lista de atributos. El compartimento inferior contiene una lista de operaciones.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Colaboraci%C3%B3n/","title":"Colaboraci\u00f3n","text":"<p>Representa un conjunto de objetos (o instancias) que trabajan juntos temporalmente para cumplir una funci\u00f3n espec\u00edfica, como un caso de uso o un proceso.</p> <p>Una colaboraci\u00f3n es una descripci\u00f3n de una estructura. La colaboraci\u00f3n es una forma de Clasificador estructurado. Una forma de modelar un grupo de roles que interact\u00faan para un objetivo com\u00fan. - Conjunto de roles: Una colaboraci\u00f3n define roles que representan a los clasificadores (como clases, objetos o componentes) involucrados en la Interacci\u00f3n. - Interacciones: Describe c\u00f3mo los roles intercambian mensajes o realizan acciones coordinadas para cumplir un objetivo.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Colaboraci%C3%B3n/#notacion","title":"Notaci\u00f3n","text":"<p>En un Diagrama de Colaboraci\u00f3n, una colaboraci\u00f3n se representa como un \u00f3valo con bordes discontinuos que contiene el nombre de la colaboraci\u00f3n.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Componente/","title":"Componente","text":"<p>Clasificador que representa una parte modular de un sistema, encapsulando un conjunto de funcionalidades o comportamientos espec\u00edficos que se pueden reutilizar, implementar o reemplazar de manera independiente.</p> <p>Parte modular del dise\u00f1o de un sistema que oculta su implementaci\u00f3n tras un conjunto de inter faces externas.</p> <p>Utilizados principalmente en un Diagrama de Componentes, para modelar la estructura f\u00edsica o l\u00f3gica de un sistema, como m\u00f3dulos de software, bibliotecas, archivos, o subsistemas. - Encapsulaci\u00f3n: Un componente agrupa un conjunto de Clases, interfaces u otros elementos, exponiendo solo ciertas interfaces o Puertos al exterior, ocultando los detalles internos.  - Ejemplo: En el sistema de biblioteca, un componente <code>GestorPr\u00e9stamos</code> podr\u00eda implementar una interfaz <code>IPrestamo</code> con operaciones como <code>prestar()</code> y <code>devolver()</code>. Encapsula funcionalidad, y est\u00e1 dise\u00f1ado para ser reemplazable.</p> <p>Los componentes tienen dos aspectos. Definen la apariencia externa de una pieza de un sistema e implementan dicha funcionalidad. Los componentes sin implementaci\u00f3n son tipos abstractos. Se utilizan para especificar los requisitos de una ranura del sistema. Los componentes con implementaci\u00f3n deben ser subtipos de un componente abstracto.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Componente/#notacion","title":"Notaci\u00f3n","text":"<p>Un componente se representa como un rect\u00e1ngulo con el Estereotipo <code>&lt;&lt;component&gt;&gt;</code> o con un s\u00edmbolo de componente (dos peque\u00f1os rect\u00e1ngulos sobresaliendo del lado izquierdo). Dentro del rect\u00e1ngulo, se escribe el nombre del componente. Puede incluir Puertos (peque\u00f1os cuadrados en el borde) para definir puntos de interacci\u00f3n.  En vez de la palabra clave, o adem\u00e1s de ella, puede contener un icono de componente en su esquina superior derecha.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Estereotipo/","title":"Estereotipo","text":"<p>Mecanismo de extensi\u00f3n que permite personalizar o especializar elementos del modelo para adaptarlos a un contexto o dominio espec\u00edfico.</p> <p>Se utiliza para a\u00f1adir informaci\u00f3n adicional, sem\u00e1ntica o restricciones a elementos UML existentes (como clases, asociaciones, componentes, etc.) sin modificar la estructura b\u00e1sica del lenguaje.</p> <p>Un elemento estereotipado puede tener restricciones m\u00e1s all\u00e1 de aqu\u00e9llos del elemento base, as\u00ed como una imagen visual distinta y propiedades adicionales definidos a trav\u00e9s de Valores Etiquetados. Los estereotipos suelen definirse en un Perfil UML, que es un conjunto de extensiones para un dominio o prop\u00f3sito espec\u00edfico.</p> <p>Ejemplo: En un sistema de biblioteca, una clase Libro podr\u00eda estereotiparse como <code>&lt;&lt;Persistent&gt;&gt;</code> para indicar que sus instancias se almacenan en una base de datos. Se aplican a cualquier diagrama UML.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Estereotipo/#notacion","title":"Notaci\u00f3n","text":"<p>Se representa entre guillemets (<code>&lt;&lt; &gt;&gt;</code>), como <code>&lt;&lt;entity&gt;&gt;</code>, <code>&lt;&lt;controller&gt;&gt;</code> o <code>&lt;&lt;interface&gt;&gt;</code>, y se coloca generalmente encima o junto al nombre del elemento al que aplica. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Interacci%C3%B3n/","title":"Interacci\u00f3n","text":"<p>Una interacci\u00f3n es un concepto que describe el comportamiento din\u00e1mico de un sistema mediante el intercambio de Mensajes entre objetos, roles o Clasificadores (como Clases, Componentes o actores) en un contexto espec\u00edfico, como un Caso de Uso o un escenario.</p> <p>Especificaci\u00f3n de c\u00f3mo se intercambian los mensajes a lo largo del tiempo entre roles dentro de un contexto para realizar una tarea.</p> <ul> <li>Utilizadas para modelar c\u00f3mo los elementos colaboran para lograr un objetivo, enfoc\u00e1ndose en la secuencia, el flujo y las condiciones de sus comunicaciones.</li> <li>Una secuencia de mensajes (comunicaci\u00f3n entre objetos) dentro de una Colaboraci\u00f3n que implementan un comportamiento se denomina interacci\u00f3n.</li> <li>Encapsulaci\u00f3n: Puede definirse dentro de un clasificador (como un componente) o en una colaboraci\u00f3n, que agrupa roles e interacciones para un prop\u00f3sito com\u00fan.</li> <li>Un rol es una ranura que debe ser rellenada con objetos en un uso concreto de una interacci\u00f3n.</li> </ul> <p>Las interacciones se modelan principalmente en los siguientes diagramas, conocidos como diagramas de interacci\u00f3n: 1. Diagrama de Secuencia: Muestra el orden temporal de los mensajes entre l\u00edneas de vida, enfatizando la secuencia de eventos.     - Ejemplo: Un cliente env\u00eda un mensaje <code>realizarPedido()</code> a un sistema, que responde tras verificar el inventario. 2. Diagrama de Comunicaci\u00f3n (o colaboraci\u00f3n): Enfoca la estructura de las interacciones, mostrando los roles y los mensajes con un n\u00famero que indica el orden.     - Ejemplo: <code>:Cliente</code> conectado a <code>:SistemaPedidos</code> con un mensaje etiquetado <code>1: realizarPedido()</code>.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Manifestaci%C3%B3n/","title":"Manifestaci\u00f3n","text":"<p>Implementaci\u00f3n f\u00edsica de un elemento del modelo como un artefacto.</p> <p>Un Artefacto puede ser una manifestaci\u00f3n (es decir, una implementaci\u00f3n) de un componente. La manifestaci\u00f3n es una relaci\u00f3n que conecta un artefacto f\u00edsico con un elemento l\u00f3gico del dise\u00f1o. - La relaci\u00f3n de manifestaci\u00f3n indica que un artefacto \"da vida\" a un componente, implementando sus interfaces y comportamiento.  - Se utiliza principalmente en Diagrama de Despliegue para conectar el mundo l\u00f3gico (dise\u00f1o del software) con el mundo f\u00edsico (archivos o productos concretos que se despliegan en nodos). - Direcci\u00f3n: La manifestaci\u00f3n va del artefacto al Clasificador (el artefacto \"manifiesta\" o implementa el clasificador).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Manifestaci%C3%B3n/#notacion","title":"Notaci\u00f3n","text":"<p>Una relaci\u00f3n de manifestaci\u00f3n se representa con una flecha de dependencia, una l\u00ednea discontinua con una cabeza de flecha sencilla, desde un artefacto a un elemento del modelo. Se coloca la palabra clave <code>&lt;&lt;manifest&gt;&gt;</code> en la flecha. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Mensaje/","title":"Mensaje","text":"<p>Transporte de informaci\u00f3n desde un rol a otro como parte de una Interacci\u00f3n dentro de un contexto;  A nivel de instancia, comunicaci\u00f3n desde un objeto a otro.</p> <p>Un mensaje es una representaci\u00f3n de la comunicaci\u00f3n entre objetos, roles o Clasificadores en un sistema, modelando c\u00f3mo interact\u00faan para realizar una funcionalidad espec\u00edfica.</p> <p>Un mensaje puede ser una se\u00f1al o la llamada a una operaci\u00f3n. Se utiliza principalmente en Diagrama de Secuencia y Diagrama de Comunicaci\u00f3n (o colaboraci\u00f3n) para mostrar el intercambio de informaci\u00f3n, solicitudes de acciones o invocaciones de comportamientos. Tambi\u00e9n, la recepci\u00f3n de un mensaje puede desencadenar una transici\u00f3n de M\u00e1quina de Estados.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Mensaje/#notacion","title":"Notaci\u00f3n","text":"<p>Tipos de mensajes: - S\u00edncrono: El emisor espera una respuesta (flecha llena: \u2192). - As\u00edncrono: El emisor no espera respuesta (flecha abierta: \u279c). - Respuesta: Retorno de un mensaje s\u00edncrono (flecha discontinua: --&gt;). - Creaci\u00f3n/Destrucci\u00f3n: Indica la creaci\u00f3n o eliminaci\u00f3n de un objeto. La notaci\u00f3n para los diagramas de secuencia y de comunicaci\u00f3n es diferente. - En Diagrama de Secuencia: Flechas entre l\u00edneas de vida de objetos, etiquetadas con el nombre del mensaje. - En Diagrama de Comunicaci\u00f3n: L\u00edneas etiquetadas con un n\u00famero de orden (ejemplo: <code>1: realizarPedido()</code>).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Modelo/","title":"Modelo","text":"<p>Arquetipo o punto de referencia. Representaci\u00f3n simplificada de un objeto, sistema, proceso o idea que se utiliza para comprender c\u00f3mo funciona. - REPRESENTACI\u00d3N DE UN OBJETO, SISTEMA O IDEA, de forma diferente al de la entidad misma.  - A su vez, documenta las decisiones que se han adoptado, por lo que aporta trazabilidad entre diferentes modelos  - El modelo capta los aspectos importantes de lo que se est\u00e1 modelando, desde un cierto punto de vista, y simplifica u omite el resto.</p> <p>Viendo el concepto desde lo que nos compete como desarrolladores, un modelo deber\u00e1 representar fiel y completamente los Requerimientos de los usuarios. Adem\u00e1s de describir al sistema con suficiente detalle como para hacer predicciones v\u00e1lidas sobre el comportamiento de este. - Sirve de gu\u00eda en la construcci\u00f3n de un sistema. - Una abstracci\u00f3n de la estructura y comportamiento de un sistema. - Captura las propiedades estructurales (est\u00e1ticas) y de comportamiento (din\u00e1micas) de un sistema.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Modelo/#que-hay-en-un-modelo","title":"\u00bfQu\u00e9 hay en un modelo?","text":"<p>Sem\u00e1ntica y presentaci\u00f3n. Los modelos tienen dos aspectos principales: la informaci\u00f3n sem\u00e1ntica (sem\u00e1ntica) y la presentaci\u00f3n visual (notaci\u00f3n).     La sem\u00e1ntica en un modelo se refiere al significado preciso y consistente de los elementos (clases, objetos, estados), relaciones y diagramas que componen el modelo. Las \u00c1reas Conceptuales de UML organizan los diagramas seg\u00fan la sem\u00e1ntica que representan, por ejemplo.     La presentaci\u00f3n visual se refiere a la notaci\u00f3n gr\u00e1fica o sintaxis visual utilizada para representar los elementos, relaciones y estructuras de un modelo en los diagramas UML, por ejemplo.     Mientras que la sem\u00e1ntica define el significado de los elementos (qu\u00e9 representa una clase, una asociaci\u00f3n, etc.), la presentaci\u00f3n visual define c\u00f3mo se dibujan esos elementos en un diagrama. Por ejemplo:     - Sem\u00e1ntica: Una clase representa un conjunto de objetos con atributos y comportamientos comunes.     - Presentaci\u00f3n visual: Una clase se representa como un rect\u00e1ngulo dividido en compartimentos (nombre, atributos, operaciones). Contexto. Refiere al entorno, prop\u00f3sito y perspectiva en los que se define y utiliza el modelo. Es el marco que establece los l\u00edmites, las suposiciones y las condiciones bajo las cuales los elementos del modelo (como clases, objetos, relaciones o comportamientos) tienen significado. Ayuda a delimitar qu\u00e9 se est\u00e1 modelando.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Modelo/#para-que-sirven-los-modelos","title":"\u00bfPara qu\u00e9 sirven los modelos?","text":"<ol> <li>Para capturar los requisitos y el dominio del conocimiento, de forma que todos los implicados puedan entenderlos y estar de acuerdo con ellos.</li> <li>Para pensar en el dise\u00f1o de un sistema.</li> <li>Para capturar las decisiones de dise\u00f1o en un formato alterable.</li> <li>Para generar productos usables para el trabajo.</li> <li>Para explorar econ\u00f3micamente m\u00faltiples soluciones.</li> <li>Para dominar sistemas complejos (complejidad dif\u00edcil de tratar directamente). </li> </ol>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Modelo/#clasificacion","title":"Clasificaci\u00f3n","text":"<p>Existen modelos esquem\u00e1ticos que abarcan dibujos, mapas y diagramas. Existen modelos simb\u00f3licos, los cuales est\u00e1n basados en las matem\u00e1ticas o en un c\u00f3digo de computadora. Incluso modelos f\u00edsicos tales como el modelo de un avi\u00f3n. Una forma de clasificarlos es seg\u00fan la forma que representan el tiempo:</p> <p>EST\u00c1TICOS: Un modelo est\u00e1tico omite ya sea un reconocimiento del tiempo o describe un instante del estado de un sistema en determinado momento. Debe proporcionar, y especificar propiedades no cambiantes, de manera que se soporte toda la funcionalidad requerida del Modelo.</p> <p>DIN\u00c1MICOS: Un modelo din\u00e1mico reconoce expl\u00edcitamente el transcurso del tiempo. Proporciona una secuencia de estados del sistema en el tiempo. Ciclo de vida de los objetos e interrelaciones que se producen entre los mismos.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Nodo/","title":"Nodo","text":"<p>Objeto f\u00edsico en tiempo de ejecuci\u00f3n que representa un recurso computacional que generalmente tiene por lo menos capacidad de proceso y memoria. </p> <p>Recurso Clasificador de c\u00e1lculo de tiempo de ejecuci\u00f3n que define una ubicaci\u00f3n f\u00edsica o l\u00f3gica en la que se ejecutan los elementos de software.</p> <p>Es posible desplegar artefactos ejecutables en los nodos. - Modelan los elementos f\u00edsicos o l\u00f3gicos donde el software se despliega y ejecuta, como servidores, bases de datos o m\u00e1quinas virtuales. - Los nodos pueden conectarse mediante enlaces (que indican comunicaci\u00f3n o interacci\u00f3n entre ellos, como una red o un protocolo). - Un nodo define una localizaci\u00f3n en la que reside un Artefacto. - Se utilizan principalmente en Diagrama de Despliegue para modelar la arquitectura f\u00edsica del sistema. - Un nodo es inherentemente parte de la vista de implementaci\u00f3n y no de la vista de an\u00e1lisis. Al ser un objeto f\u00edsico, hay un gran n\u00famero de posibilidades para sus propiedades, por lo que pueden modelarse usando Estereotipos y Valores Etiquetados.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Nodo/#notacion","title":"Notaci\u00f3n","text":"<p>Se representa como un cubo 3D (un rect\u00e1ngulo con perspectiva tridimensional) con el nombre del nodo dentro o encima. Los artefactos o Componentes desplegados en el nodo se dibujan dentro del cubo o conectados a \u00e9l. Los enlaces entre nodos se representan como l\u00edneas s\u00f3lidas, a menudo etiquetadas con el protocolo o medio de comunicaci\u00f3n (por ejemplo, \"TCP/IP\").  Los nodos pueden ser conectados por s\u00edmbolos de asociaci\u00f3n a otros nodos. Una asociaci\u00f3n entre dos nodos indica un camino de comunicaci\u00f3n entre ellos. La asociaci\u00f3n puede tener un estereotipo para indicar la naturaleza del medio de comunicaci\u00f3n.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Paquete/","title":"Paquete","text":"<p>Mecanismo de uso general para organizar elementos en grupos, estableciendo propiedades de elementos, y proveyendo nombres \u00fanicos para hacer referencia a los elementos.</p> <p>Agrupaci\u00f3n de elementos del modelo y diagramas, similar a una carpeta en un sistema de archivos. Un paquete puede poseer cualquier clase de elemento del modelo (clases, casos de uso, diagramas). - Un paquete puede contener adem\u00e1s, paquetes anidados. Normalmente hay un paquete ra\u00edz que posee al modelo completo de un sistema. - Su prop\u00f3sito principal es estructurar el modelo de manera modular. - Se usa en diversos diagramas UML, como Diagrama de Clases, Diagrama de Casos de Uso, Diagrama de Componentes o Diagrama de Despliegue, Diagrama de Paquetes y tambi\u00e9n a nivel de modelo general. - Un paquete define la visibilidad de sus elementos contenidos como privado o p\u00fablico. - Tambi\u00e9n son unidades para cualquier mecanismo de control de versiones.</p> <p>Una dependencia entre paquetes es una relaci\u00f3n que indica que los elementos de un paquete (el cliente) dependen de los elementos de otro paquete (el proveedor). Una dependencia significa que un cambio en el paquete proveedor puede afectar al paquete cliente, pero no al rev\u00e9s. Las dependencias pueden incluir estereotipos como <code>&lt;&lt;import&gt;&gt;</code> (importar elementos del paquete proveedor) o <code>&lt;&lt;access&gt;&gt;</code> (acceso directo a elementos).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Paquete/#notacion","title":"Notaci\u00f3n","text":"<p>Un paquete se muestra como un rect\u00e1ngulo grande con un rect\u00e1ngulo peque\u00f1o (una \u201cetiqueta\u201d) unido en una esquina (normalmente, la cima izquierda del rect\u00e1ngulo grande). Pueden dibujarse flechas discontinuas entre los s\u00edmbolos del paquete para mostrar las relaciones, indica que un paquete depende de otro porque sus elementos usan elementos del paquete destino.  M\u00e1s sobre relaciones entre paquetes. Importaci\u00f3n: - Representada por una flecha punteada con el estereotipo <code>&lt;&lt;import&gt;&gt;</code>. - Permite que los elementos de un paquete sean accesibles en otro.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Perfil/","title":"Perfil","text":"<p>Conjunto de Estereotipos, Valores Etiquetados y restricciones desarrollados con un prop\u00f3sito espec\u00edfico, que puede almacenarse en bibliotecas para su reutilizaci\u00f3n en diferentes modelos.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Puerto/","title":"Puerto","text":"<p>Punto de interacci\u00f3n. Especifica un lugar donde el Clasificador intercambia mensajes, datos o servicios con el exterior.</p> <p>Punto de conexi\u00f3n entre un clasificador y su entorno. Las conexiones del mundo externo se hacen a los puertos seg\u00fan sean requeridos por las interfaces declaradas en un puerto.</p> <p>Interfaz Asociada. El comportamiento de un puerto se especifica por sus interfaces proporcionadas e interfaces requeridas. Pueden verse estas dos en un Diagrama de Componentes, donde son comunes los puertos. - Definen un punto de entrada/salida en una clase. Ejemplo: En el sistema de biblioteca, la clase <code>SistemaBiblioteca</code> podr\u00eda tener un puerto <code>InterfazUsuario</code> que expone operaciones como <code>prestarLibro()</code></p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Puerto/#notacion","title":"Notaci\u00f3n","text":"<p>Puertos declarados en Diagrama de Estructura Interna: Un puerto se muestra como un cuadrado peque\u00f1o que monta el l\u00edmite de un rect\u00e1ngulo del clasificador. El nombre del puerto se pone cerca del cuadrado. El cuadrado puede ponerse en el interior del rect\u00e1ngulo del clasificador para indicar un puerto con visibilidad restringida, como un puerto de servicio; \u00e9stos deben ser raros, porque el prop\u00f3sito principal de los puertos es encapsular comunicaci\u00f3n con el ambiente.  El tipo de un puerto puede mostrarse siguiendo una coma, usando la sintaxis: <code>nombre: Tipo[multiplicidad]</code>. En lugar de declarar el puerto por tipos, pueden mostrarse las interfaces para el puerto usando s\u00edmbolos de la interfaz. </p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Restricci%C3%B3n/","title":"Restricci\u00f3n","text":"<p>Condici\u00f3n sem\u00e1ntica representada como texto en lenguaje natural o en un lenguaje formal especificado.</p> <p>Se puede adjuntar a cualquier elemento del modelo o lista de elementos del modelo, por lo que pueden aplicarse en casi cualquier diagrama UML. Una restricci\u00f3n es una aserci\u00f3n, no un mecanismo ejecutable.  - Se utilizan para especificar requisitos adicionales, e indica una restricci\u00f3n que debe ser impuesta por el correcto dise\u00f1o del sistema.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Restricci%C3%B3n/#notacion","title":"Notaci\u00f3n","text":"<p>S\u00edmbolo: Las restricciones se representan encerradas entre llaves {} y suelen colocarse cerca del elemento al que afectan. La descripci\u00f3n dentro de las llaves puede ser: - Texto informal: Una frase en lenguaje natural (por ejemplo, <code>{edad debe ser mayor a 18}</code>). - Expresi\u00f3n formal: Usando un lenguaje como OCL (Object Constraint Language, es un lenguaje formal de UML) o pseudoc\u00f3digo (por ejemplo, <code>{self.edad &gt; 18}</code>).</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Restricci%C3%B3n/#tipos-de-restricciones","title":"Tipos de restricciones","text":"<ol> <li>Restricciones de atributos:<ul> <li>Limitan los valores de un atributo.</li> <li>Ejemplo: <code>{edad &gt;= 18}</code> en un atributo edad de una clase <code>Usuario</code>.</li> </ul> </li> <li>Restricciones de asociaciones:<ul> <li>Definen reglas sobre las relaciones entre clases.</li> <li>Ejemplo: En una asociaci\u00f3n entre <code>Estudiante</code> y <code>Curso</code>, <code>{un estudiante puede inscribirse en un m\u00e1ximo de 5 cursos}</code>.</li> </ul> </li> <li>Restricciones de operaciones:<ul> <li>Especifican condiciones para ejecutar una operaci\u00f3n.</li> <li>Ejemplo: <code>{pre: usuario autenticado}</code> para una operaci\u00f3n <code>realizarPago()</code>.</li> </ul> </li> <li>Restricciones de estados o transiciones (en diagramas de estados):<ul> <li>Definen condiciones para cambiar de un estado a otro.</li> <li>Ejemplo: <code>{transici\u00f3n solo si pago confirmado}</code> en una M\u00e1quina de Estados.</li> </ul> </li> <li>Restricciones globales:<ul> <li>Aplican a todo un modelo o diagrama.</li> <li>Ejemplo: <code>{todas las transacciones deben completarse en menos de 5 segundos}</code>. </li> </ul> </li> </ol>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Valores%20Etiquetados/","title":"Valores Etiquetados","text":"<p>Un par etiqueta valor, conectado a un elemento del modelo para contener informaci\u00f3n.</p> <p>Un valor etiquetado es una pareja valor nombre, que puede conectarse a un elemento del modelo, que usa un Estereotipo. Los valores etiquetados suelen estar vinculados a estereotipos, que definen qu\u00e9 etiquetas son v\u00e1lidas y qu\u00e9 tipo de valores pueden tomar.</p> <ul> <li>Representan informaci\u00f3n de modelado adicional. Una extensi\u00f3n a los metaatributos de las metaclases de UML.</li> <li>Esta informaci\u00f3n adicional puede ser \u00fatil para el beneficio de herramientas de soporte, tales como generadores de c\u00f3digo, de informes y simuladores.</li> <li>Puede aplicarse a cualquier elemento UML, como Clases, atributos, operaciones, o incluso estereotipos definidos en un perfil UML.</li> </ul>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Valores%20Etiquetados/#notacion","title":"Notaci\u00f3n","text":"<p>Cada valor etiquetado se muestra en la forma <code>{etiqueta=valor}</code>. Una clase <code>Producto</code> con el estereotipo <code>&lt;&lt;entity&gt;&gt;</code> podr\u00eda tener valores etiquetados:  Aqu\u00ed, <code>{tabla=productos}</code> indica que la clase se mapea a una tabla llamada \"productos\" en la base de datos, y <code>{version=2.1}</code> especifica la versi\u00f3n del modelo. Una relaci\u00f3n entre dos clases podr\u00eda tener un valor etiquetado como <code>{cascade=true}</code> para indicar que las operaciones en una clase afectan a la otra.</p>"},{"location":"El%20Lenguaje%20Unificado%20de%20Modelado.%20Manual%20de%20Referencia/Diccionario/Vista%20de%20Despliegue/","title":"Vista de Despliegue","text":"<p>Perspectiva del sistema que se enfoca en su implementaci\u00f3n f\u00edsica, mostrando c\u00f3mo los Nodos (hardware o entornos) est\u00e1n organizados y c\u00f3mo los Artefactos (software) se distribuyen en ellos.</p>"},{"location":"PMBOK/Acta%20de%20Constituci%C3%B3n%20del%20Proyecto/","title":"Acta de Constituci\u00f3n del Proyecto","text":"<p>Documento clave que autoriza formalmente la existencia de un proyecto y otorga al gerente del proyecto la autoridad para asignar recursos organizacionales y llevar a cabo las actividades del proyecto. </p> <p>Es emitida por el patrocinador del proyecto o un iniciador externo y establece las bases para la gesti\u00f3n del proyecto.</p>"},{"location":"PMBOK/Acta%20de%20Constituci%C3%B3n%20del%20Proyecto/#proposito-del-acta-de-constitucion","title":"Prop\u00f3sito del Acta de Constituci\u00f3n","text":"<ul> <li>Autorizaci\u00f3n formal: Define el inicio oficial del proyecto y otorga autoridad al gerente del proyecto.</li> <li>Alineaci\u00f3n estrat\u00e9gica: Vincula el proyecto con los objetivos estrat\u00e9gicos de la organizaci\u00f3n.</li> <li>Marco de referencia: Proporciona una visi\u00f3n general del proyecto, sus objetivos, y sirve como base para la toma de decisiones.</li> <li>Compromiso inicial: Asegura el compromiso de las partes interesadas clave y establece expectativas claras.</li> </ul> <p>Aunque no d\u00e9 esta primera impresi\u00f3n, el acta de constituci\u00f3n debe ser un documento conciso, no un plan detallado, por lo que es importante la brevedad en el mismo. El objetivo es proporcionar una visi\u00f3n general, con informaci\u00f3n de alto nivel (los detalles se desarrollan en fases posteriores como la planificaci\u00f3n).  Por \u00faltimo, es imprescindible para este documento que sea aprobado por el patrocinador o un comit\u00e9 directivo para formalizar el inicio del proyecto.</p> <p>Su informaci\u00f3n esencial, contiene el Prop\u00f3sito o justificaci\u00f3n del proyecto, Objetivos del proyecto, Requisitos de alto nivel, Descripci\u00f3n del proyecto, Supuestos y restricciones (disponibilidad de recursos y restricciones), Partes interesadas clave, Criterios de \u00e9xito, Riesgos de alto nivel, Asignaci\u00f3n del gerente del proyecto, Patrocinador del proyecto, Presupuesto inicial (estimaci\u00f3n general en espec\u00edfico de los recursos financieros disponibles), Cronograma general. </p>"},{"location":"PMBOK/An%C3%A1lisis%20FODA/","title":"An\u00e1lisis FODA","text":"<p>Esta t\u00e9cnica examina el proyecto desde cada uno de los aspectos FODA (fortalezas, oportunidades, debilidades y amenazas) para aumentar la cantidad de Riesgos identificados. T\u00e9cnica de planificaci\u00f3n estrat\u00e9gica utilizada en la gesti\u00f3n de proyectos para identificar y evaluar factores internos y externos que pueden impactar el \u00e9xito del proyecto.</p> <p>La t\u00e9cnica comienza con la identificaci\u00f3n de las fortalezas y debilidades de la organizaci\u00f3n, centr\u00e1ndose ya sea en el proyecto, en la organizaci\u00f3n o en el negocio en general.  El an\u00e1lisis FODA identifica luego cualquier oportunidad para el proyecto con origen en las fortalezas de la organizaci\u00f3n y cualquier amenaza con origen en las debilidades de la organizaci\u00f3n.  El an\u00e1lisis tambi\u00e9n examina el grado en el que las fortalezas de la organizaci\u00f3n contrarrestan las amenazas, e identifica las oportunidades que pueden servir para superar las debilidades.</p>"},{"location":"PMBOK/An%C3%A1lisis%20FODA/#desglose-del-analisis-foda-en-el-contexto-del-pmbok","title":"Desglose del an\u00e1lisis FODA en el contexto del PMBOK","text":"<ol> <li>Fortalezas (Strengths): Factores internos positivos que favorecen el logro de los objetivos del proyecto. </li> <li> <p>Ejemplo: Equipo altamente calificado, acceso a tecnolog\u00eda avanzada o experiencia previa en proyectos similares.</p> </li> <li> <p>Debilidades (Weaknesses): Factores internos negativos que pueden obstaculizar el proyecto. </p> </li> <li> <p>Ejemplo: Falta de recursos, limitaciones presupuestarias o carencia de habilidades espec\u00edficas en el equipo.</p> </li> <li> <p>Oportunidades (Opportunities): Factores externos que el proyecto puede aprovechar para mejorar su desempe\u00f1o.</p> </li> <li> <p>Ejemplo: Cambios en el mercado, nuevas regulaciones favorables o alianzas estrat\u00e9gicas.</p> </li> <li> <p>Amenazas (Threats): Factores externos que podr\u00edan afectar negativamente el proyecto. </p> </li> <li>Ejemplo: Cambios econ\u00f3micos, riesgos pol\u00edticos o competencia en el mercado.</li> </ol>"},{"location":"PMBOK/Costos/","title":"Costos","text":"<p>Se refiere tanto al costo financiero del proyecto como al costo potencial de no detectar y corregir defectos a tiempo. Cuanto mayor sea el impacto de un defecto no detectado, mayor ser\u00e1 el costo para la empresa.</p> <p>En un sistema de control de tr\u00e1fico a\u00e9reo, los errores pueden costar vidas humanas, por lo que el costo de no encontrar un defecto cr\u00edtico es extremadamente alto. En este caso, se justificar\u00eda una inversi\u00f3n mayor en Testing. Por otro lado, en una aplicaci\u00f3n de uso interno para gestionar agendas, el costo de un fallo podr\u00eda ser mucho menor, y el Testing podr\u00eda ajustarse para reflejar este menor riesgo.</p>"},{"location":"PMBOK/EDT%20o%20WBS/","title":"EDT o WBS","text":"<p>La EDT/WBS es una descomposici\u00f3n jer\u00e1rquica del alcance total del trabajo a realizar por el equipo del proyecto para cumplir con los objetivos del proyecto y crear los entregables requeridos.  Est\u00e1 fuertemente orientada a entregables del trabajo total que debe realizar el equipo del proyecto para cumplir con los objetivos del proyecto. - Herramienta fundamental para la Gesti\u00f3n del Alcance del Proyecto a realizar. - Por lo general es creada durante la definici\u00f3n del alcance de un proyecto.</p> <p>Cada nivel descendente de la EDT/WBS representa una definici\u00f3n cada vez m\u00e1s detallada del trabajo del proyecto.  - Permite asignar responsabilidades, estimar recursos y controlar el progreso del proyecto m\u00e1s f\u00e1cilmente. - Proporciona una visi\u00f3n estructurada de lo que se debe entregar.</p>"},{"location":"PMBOK/EDT%20o%20WBS/#crear-la-edtwbs","title":"Crear la EDT/WBS*","text":"<ul> <li>Proceso de subdividir los entregables del proyecto y el trabajo del proyecto en componentes m\u00e1s peque\u00f1os y m\u00e1s f\u00e1ciles de manejar, hasta que estos componentes representen productos, servicios o resultados verificables.</li> <li>La EDT/WBS se puede estructurar como un esquema, como un organigrama, o mediante otro m\u00e9todo que represente un desglose jer\u00e1rquico.</li> <li>El trabajo planificado est\u00e1 contenido en el nivel m\u00e1s bajo de los componentes de la EDT/WBS, denominados paquetes de trabajo. En este contexto, la palabra trabajo se refiere a los productos o entregables del trabajo que son el resultado de la actividad realizada, y no a la actividad en s\u00ed misma.</li> </ul> <p>Un ejemplo de una EDT dividiendo un proyecto en componentes m\u00e1s peque\u00f1os: - M\u00f3dulo de b\u00fasqueda de productos. - M\u00f3dulo de carrito de compras. - M\u00f3dulo de procesamiento de pagos. - Interfaz de usuario UI.</p>"},{"location":"PMBOK/EDT%20o%20WBS/#diccionario-de-la-edtwbs","title":"Diccionario de la EDT/WBS","text":"<p>Documento que proporciona informaci\u00f3n detallada sobre los entregables, actividades y programaci\u00f3n de cada uno de los componentes de la EDT/WBS.</p>"},{"location":"PMBOK/Ejemplo%20Integral.%20Interacci%C3%B3n%20de%20las%20Seis%20Restricciones/","title":"Ejemplo Integral. Interacci\u00f3n de las Seis Restricciones","text":"<p>Consideremos un proyecto de desarrollo de una aplicaci\u00f3n de e-commerce, con las siguientes condiciones iniciales: - Alcance inicial: Funcionalidades b\u00e1sicas como b\u00fasqueda de productos, carrito de compras, y procesamiento de pagos. - Tiempo estimado: 12 semanas. - Costo estimado: $65,000. - Calidad esperada: La aplicaci\u00f3n debe ser r\u00e1pida, intuitiva y libre de errores cr\u00edticos. - Riesgos identificados: Posible incompatibilidad con ciertas versiones de sistemas operativos m\u00f3viles y la posibilidad de retrasos debido a dependencias de terceros. - Recursos disponibles: Un equipo de 5 desarrolladores, 1 dise\u00f1ador, 2 testers, y las herramientas de desarrollo necesarias.</p>"},{"location":"PMBOK/Ejemplo%20Integral.%20Interacci%C3%B3n%20de%20las%20Seis%20Restricciones/#nueva-solicitud-del-cliente","title":"Nueva Solicitud del Cliente","text":"<p>A mitad del proyecto, el cliente solicita la inclusi\u00f3n de una funci\u00f3n de \"recomendaciones personalizadas\".</p> Restricciones Cambio Impacto Alcance Inclusi\u00f3n de la nueva funcionalidad. M\u00e1s trabajo para el equipo de desarrollo. Tiempo 3 semanas adicionales. Extender la l\u00ednea de tiempo a 15 semanas para completar el proyecto. Esto tambi\u00e9n podr\u00eda tener un efecto domin\u00f3, retrasando otras actividades como las pruebas finales y la publicaci\u00f3n en las tiendas de aplicaciones. Costo Incremento del costo estimado del proyecto en $10,000 debido a los recursos adicionales y el tiempo extra requerido. El presupuesto total ahora es de $75,000. Este aumento de costos debe ser aprobado por el cliente, o bien, deben encontrarse formas de reducir costos en otras \u00e1reas para mantener el presupuesto original. Calidad La nueva funcionalidad a\u00f1ade complejidad, lo que puede comprometer la calidad si no se gestiona adecuadamente. Para mantener la calidad, se necesitan pruebas adicionales y una posible revisi\u00f3n del dise\u00f1o para asegurar que la nueva funcionalidad no cause errores o afecte el rendimiento de la aplicaci\u00f3n. Riesgos Posibilidad de incompatibilidades con ciertos dispositivos o la necesidad de integrar con tecnolog\u00edas no previstas inicialmente. Los riesgos deben ser gestionados con nuevas estrategias de mitigaci\u00f3n, como pruebas adicionales en dispositivos espec\u00edficos o la creaci\u00f3n de prototipos para asegurar la viabilidad t\u00e9cnica de la nueva funcionalidad. Recursos Para desarrollar y probar la nueva funcionalidad dentro del tiempo y costo ajustados, podr\u00eda ser necesario reasignar recursos o incluso contratar personal adicional. El equipo de desarrollo podr\u00eda verse sobrecargado, lo que podr\u00eda afectar la productividad y la moral. Si no se pueden a\u00f1adir recursos adicionales, el equipo existente deber\u00e1 trabajar horas extras, lo que tambi\u00e9n podr\u00eda impactar la calidad del trabajo y aumentar los costos indirectos. **** ##### El turno del Gestor del Proyecto El gestor de proyectos debe equilibrar estas seis restricciones para tomar una decisi\u00f3n informada. Este puede extender el cronograma a 15 semanas y aumentar el presupuesto a $75,000, mientras se asegura que la calidad no se vea comprometida. Esto tambi\u00e9n implica gestionar los nuevos riesgos (implementar estrategias de mitigaci\u00f3n) y ajustar la asignaci\u00f3n de recursos para evitar la sobrecarga del equipo. La otra opci\u00f3n es revisar el alcance, es decir, negociar con el cliente para eliminar o posponer otras funcionalidades menos cr\u00edticas para mantener el proyecto dentro del presupuesto y tiempo originales, sin comprometer la calidad."},{"location":"PMBOK/El%20Surgir%20de%20la%20Gesti%C3%B3n%20de%20Proyectos/","title":"El Surgir de la Gesti\u00f3n de Proyectos","text":"<p>En la d\u00e9cada de 1950, el desarrollo de sistemas militares complejos requer\u00eda la coordinaci\u00f3n del trabajo entre equipos multidisciplinarios, lo que demandaba una organizaci\u00f3n rigurosa. Bernard Schriever, considerado el \"padre de la gesti\u00f3n de proyectos\", introdujo el concepto de \u201cconcurrencia\u201d. Esta idea buscaba integrar todos los elementos del plan del proyecto en un \u00fanico programa y presupuesto, permitiendo que diferentes actividades se llevaran a cabo simult\u00e1neamente en lugar de en secuencia. A partir de entonces, la industria automotriz adopt\u00f3 estas t\u00e9cnicas para gestionar la coordinaci\u00f3n entre diferentes \u00e1reas y equipos. Surgieron herramientas y m\u00e9todos espec\u00edficos, como los histogramas, los cronogramas, los conceptos de ciclo de vida del Proyecto, y la descomposici\u00f3n del trabajo en tareas.</p> <p>El desarrollo de sistemas complejos que involucraban m\u00faltiples disciplinas subray\u00f3 la necesidad de nuevas metodolog\u00edas de organizaci\u00f3n en los a\u00f1os 60, para abordar problemas de retrasos en las agendas (TIEMPO), sobrecostes (Costos), problemas de calidad o utilidad en resultados obtenidos (Alcance).</p> <p>Para abordar estas necesidades, comenzaron a surgir organizaciones dedicadas a desarrollar un cuerpo de conocimiento en gesti\u00f3n de proyectos, entre ellas el Project Management Institute (PMI), fundado en 1965. El PMBOK (Project Management Body of Knowledge) es una gu\u00eda fundamental para la gesti\u00f3n de proyectos, desarrollada por el PMI. En esta gu\u00eda, las restricciones de Costos, Alcance y tiempo son conocidas como la \"Triple Restricci\u00f3n\" o \"Tri\u00e1ngulo del Proyecto\".</p>"},{"location":"PMBOK/Exactitud%20y%20Precisi%C3%B3n/","title":"Exactitud y Precisi\u00f3n","text":"<p>Los conceptos de precisi\u00f3n y exactitud son fundamentales en la gesti\u00f3n de la calidad de un proyecto, particularmente en el contexto del proceso \"Controlar la Calidad\".  Estos conceptos se utilizan para evaluar si los entregables y procesos cumplen con los requisitos establecidos y son esenciales para garantizar que los resultados del proyecto sean de alta calidad.</p>"},{"location":"PMBOK/Exactitud%20y%20Precisi%C3%B3n/#definiciones-segun-el-pmbok","title":"Definiciones seg\u00fan el PMBOK","text":"<ol> <li>Exactitud (Accuracy)<ul> <li>Se refiere a cu\u00e1n cerca est\u00e1 un valor medido o observado del valor real o verdadero.</li> <li>En la gesti\u00f3n de calidad, la exactitud implica que los datos, mediciones o resultados se alinean con los est\u00e1ndares o especificaciones establecidos.</li> </ul> </li> <li>Precisi\u00f3n (Precision)<ul> <li>Se refiere a la consistencia o repetibilidad de las mediciones, es decir, cu\u00e1n similares son los resultados cuando se mide o eval\u00faa repetidamente el mismo elemento.</li> <li>La precisi\u00f3n mide la variabilidad en los resultados de un proceso.</li> </ul> </li> </ol>"},{"location":"PMBOK/Exactitud%20y%20Precisi%C3%B3n/#ejemplo","title":"Ejemplo","text":"<p>Una ilustraci\u00f3n de este concepto es por ejemplo la comparaci\u00f3n de dianas de tiro al blanco. Las flechas api\u00f1adas en un \u00e1rea de la diana, incluso si no lo est\u00e1n en el objetivo central, se consideran de alta precisi\u00f3n. Las dianas cuyas flechas se encuentran m\u00e1s dispersas pero equidistantes (misma distancia) del objetivo central se considera que tienen el mismo grado de exactitud. Las dianas en que las flechas se encuentran muy agrupadas y dentro del objetivo central se considera que son tanto exactas como precisas. Las medidas precisas no son necesariamente exactas, y las medidas exactas no son necesariamente precisas.</p>"},{"location":"PMBOK/Factibilidad/","title":"Factibilidad","text":"<p>La factibilidad se refiere a la capacidad de llevar a cabo un Proyecto, evaluando si este puede realizarse con los recursos, tecnolog\u00eda, personal y tiempo disponibles.</p>"},{"location":"PMBOK/Factibilidad/#estudio-de-la-factibilidad-en-un-proyecto","title":"Estudio de la Factibilidad en un Proyecto","text":"<ul> <li>La evaluaci\u00f3n de factibilidad no solo se centra en la disponibilidad de los recursos, sino tambi\u00e9n en la identificaci\u00f3n de posibles obst\u00e1culos y limitaciones que podr\u00edan surgir durante la implementaci\u00f3n. Tiene en cuenta aspectos t\u00e9cnicos, econ\u00f3micos, operativos y de mercado.</li> <li> <p>Un estudio de factibilidad es una evaluaci\u00f3n exhaustiva que se realiza antes de iniciar un proyecto para determinar si este es viable y factible. Busca responder a la pregunta \u00bfPodemos hacer este proyecto?.</p> </li> <li> <p>Ejemplo: un proyecto de software que pretende utilizar inteligencia artificial requiere una infraestructura de servidores espec\u00edficos y personal con conocimientos avanzados. Si la empresa no dispone de estas tecnolog\u00edas o no puede contratar a los especialistas necesarios, el proyecto no ser\u00eda factible.</p> </li> </ul>"},{"location":"PMBOK/Factibilidad/#viabilidad-neq-factibilidad","title":"Viabilidad $\\neq$ Factibilidad","text":"<p>La viabilidad eval\u00faa si es rentable o sostenible a largo plazo realizar un proyecto. Este an\u00e1lisis considera principalmente los factores econ\u00f3micos y los beneficios que el proyecto generar\u00e1 en el futuro, en comparaci\u00f3n con los costos que implicar\u00e1 su desarrollo. - El estudio de la viabilidad en un proyecto va m\u00e1s all\u00e1 de la simple comparaci\u00f3n de costos y beneficios; tambi\u00e9n implica un estudio detallado del mercado, la demanda esperada, y las tendencias econ\u00f3micas.</p> <ul> <li>Ejemplo: un proyecto podr\u00eda ser t\u00e9cnicamente posible, pero si los costos de desarrollo superan los beneficios que generar\u00e1, no ser\u00eda viable. Asimismo, un an\u00e1lisis de viabilidad deber\u00eda incluir escenarios de sensibilidad que eval\u00faen c\u00f3mo cambios en los costos, la demanda o las condiciones del mercado podr\u00edan afectar la rentabilidad del proyecto</li> </ul> <p>Tipos de Factibilidad, en un proyecto.</p>"},{"location":"PMBOK/Gesti%C3%B3n%20Predictiva%20vs.%20%C3%81gil%20en%20Proyectos/","title":"Gesti\u00f3n Predictiva vs. \u00c1gil en Proyectos","text":"<p>Antes de divagar por cada enfoque, se proporciona una definici\u00f3n de lo que ser\u00eda la Gesti\u00f3n de Proyectos.</p> <p>\u201cLa aplicaci\u00f3n de conocimientos, habilidades, t\u00e9cnicas y herramientas a las actividades de un proyecto con el fin de cumplir los requerimientos del proyecto\u201d.</p>"},{"location":"PMBOK/Gesti%C3%B3n%20Predictiva%20vs.%20%C3%81gil%20en%20Proyectos/#gestion-predictiva-o-clasica","title":"Gesti\u00f3n Predictiva o Cl\u00e1sica","text":"<p>La gesti\u00f3n de proyectos, tal como se desarroll\u00f3 en las \u00faltimas d\u00e9cadas del siglo XX, se fundamenta en la planificaci\u00f3n detallada, el seguimiento riguroso y el control continuo de las actividades necesarias para alcanzar los objetivos del proyecto. Este enfoque tiene los siguientes elementos clave:</p>"},{"location":"PMBOK/Gesti%C3%B3n%20Predictiva%20vs.%20%C3%81gil%20en%20Proyectos/#1-planificacion-basada-en-la-descomposicion-del-trabajo","title":"1. Planificaci\u00f3n Basada en la Descomposici\u00f3n del Trabajo","text":"<ul> <li>Descomposici\u00f3n del proyecto en tareas o actividades m\u00e1s peque\u00f1as o manejables.</li> <li>Organizaci\u00f3n de dichas tareas/requisitos en un plan de trabajo estructurado.</li> </ul>"},{"location":"PMBOK/Gesti%C3%B3n%20Predictiva%20vs.%20%C3%81gil%20en%20Proyectos/#2-elaboracion-del-plan-de-proyecto","title":"2. Elaboraci\u00f3n del Plan de Proyecto","text":"<ul> <li>Elaboraci\u00f3n de un plan que ajusta los recursos, tiempos y costos disponibles. Servir\u00e1 de gu\u00eda principal para la ejecuci\u00f3n del proyecto.</li> </ul>"},{"location":"PMBOK/Gesti%C3%B3n%20Predictiva%20vs.%20%C3%81gil%20en%20Proyectos/#3-desarrollo-de-la-gestion-predictiva","title":"3. Desarrollo de la Gesti\u00f3n Predictiva","text":"<ul> <li>El objetivo principal es lograr que el producto o servicio final se obtenga tal como se ha \u201cprevisto\u201d al inicio del proyecto, y su \u00e9xito se mide por la capacidad de cumplir con la Triple Restricci\u00f3n original.</li> <li>Seguimiento constante para identificar posibles desviaciones respecto al plan inicial.</li> <li>Hacer los ajustes necesarios seg\u00fan el seguimiento.</li> </ul> <p>Y adem\u00e1s se apoya en componentes como el Conocimiento (del producto, negocio, mejores pr\u00e1cticas de gesti\u00f3n de proyectos), Habilidades (interpersonales y de liderazgo), T\u00e9cnicas (para abordar problemas) y Herramientas (M\u00e9todo de la Ruta Cr\u00edtica, Gr\u00e1ficos de Gantt, entre otros). El ciclo de vida del proyecto bajo un enfoque predictivo es dividido en fases secuenciales, es decir, cada fase se completa antes de que la siguiente comience, lo que facilita el control y enfoque, suponiendo siempre que el proyecto se desarrollar\u00e1 en un entorno estable y predecible, y con el objetivo de cumplir con criterios de \u00e9xito claramente definidos (Triple Restricci\u00f3n). Inicio \u2192 Planeaci\u00f3n \u2192 Ejecuci\u00f3n \u2192 Control \u2192 Cierre</p>"},{"location":"PMBOK/Gesti%C3%B3n%20Predictiva%20vs.%20%C3%81gil%20en%20Proyectos/#gestion-agil","title":"Gesti\u00f3n \u00c1gil","text":"<p>Caracterizada por los principios del Manifiesto \u00c1gil, detallado en el apartado de Agilidad. La novedad, el valor de innovaci\u00f3n necesario y la velocidad de cambio del entorno, no puede definir con precisi\u00f3n c\u00f3mo ser\u00e1 el producto final. Esto se debe a que ya no existen \u201cproductos finales\u201d, sino productos en evoluci\u00f3n continua desde su primera versi\u00f3n.</p> <p>El enfoque de la gesti\u00f3n \u00e1gil de proyectos no se basa en la anticipaci\u00f3n (requisitos, dise\u00f1o, planificaci\u00f3n y seguimiento detallados), sino en la adaptaci\u00f3n continua (visi\u00f3n compartida, exploraci\u00f3n iterativa y ajustes frecuentes), permitiendo responder r\u00e1pidamente a cambios y necesidades emergentes.</p> <p>La exploraci\u00f3n iterativa y ajustes frecuentes subrayan la naturaleza c\u00edclica e incremental de los proyectos \u00e1giles. Entrega de Valor. El agilismo se centra en aportar valor de manera constante durante todo el ciclo de vida del proyecto.</p>"},{"location":"PMBOK/Gesti%C3%B3n%20Predictiva%20vs.%20%C3%81gil%20en%20Proyectos/#objetivos-clave","title":"Objetivos Clave","text":"<p>1. Maximizaci\u00f3n del Valor 2. Reducci\u00f3n del Tiempo de Salida al Mercado (el tiempo es un factor competitivo cr\u00edtico, el objetivo es entregar lo antes posible un M\u00ednimo Producto Viable (MVP)) 3. Agilidad 4. Flexibilidad (capacidad de adaptar el desarrollo a las caracter\u00edsticas del proyecto y a la evoluci\u00f3n de los requisitos) 5. Resultados Fiables (mientras que la gesti\u00f3n predictiva busca cumplir con plazos y costos predefinidos, la gesti\u00f3n \u00e1gil se centra en entregar resultados valiosos)</p>"},{"location":"PMBOK/Gesti%C3%B3n%20Predictiva%20vs.%20%C3%81gil%20en%20Proyectos/#gestion-agil-neq-gestion-evolutiva","title":"Gesti\u00f3n \u00c1gil $\\neq$ Gesti\u00f3n Evolutiva","text":"<p>M\u00e9todos \u00e1giles como Scrum o Kanban son ejemplos de gesti\u00f3n evolutiva, ya que promueven iteraciones cortas (sprints) y adaptaciones continuas. Sin embargo, existen Metodolog\u00edas para las que no ser\u00eda correcto clasificarlas como \u00e1giles, pero si como evolutivas (ver ).</p> <p>La gesti\u00f3n evolutiva, es un modelo de gesti\u00f3n cuyo objetivo es entregar lo antes posible un producto m\u00ednimo viable, e incrementar su valor de forma continua. Emplea una estrategia de solapamiento de las fases de trabajo, y desarrollo incremental, que se puede obtener manteniendo un ritmo de iteraciones breves y c\u00edcilicas o un flujo de desarrollo constante. Puede llevarse a cabo con producci\u00f3n basada en procesos o con producci\u00f3n basada en personas (agilidad). La primera refiere a que el conocimiento o know-how se encuentra en mayor medida en los procesos y tecnolog\u00eda empleada.</p>"},{"location":"PMBOK/Gesti%C3%B3n%20de%20Costos%20del%20Proyecto/","title":"Gesti\u00f3n de Costos del Proyecto","text":"<p>Incluye los procesos relacionados con planificar, estimar, presupuestar, financiar, obtener financiamiento, gestionar y controlar los costos de modo que se complete el proyecto dentro del presupuesto aprobado.     </p> <p>La Gesti\u00f3n de los Costos del Proyecto se ocupa principalmente del costo de los recursos necesarios para completar las actividades del proyecto.  La Gesti\u00f3n de los Costos del Proyecto tambi\u00e9n deber\u00eda tener en cuenta el efecto de las decisiones tomadas en el proyecto sobre los costos recurrentes posteriores de utilizar, mantener y dar soporte al producto, servicio o resultado del proyecto. Las fuentes de informaci\u00f3n de entrada se derivan de las salidas de los procesos del proyecto en otras \u00c1reas de Conocimiento. Una vez recibida, toda esta informaci\u00f3n permanecer\u00e1 disponible como entradas para todos los procesos de gesti\u00f3n de los costos del proyecto.</p> <p>Los procesos de gesti\u00f3n de costos, as\u00ed como sus herramientas y t\u00e9cnicas asociadas, se documentan en el Plan de gesti\u00f3n de los costos. El plan de gesti\u00f3n de los costos es un componente del Plan para la Direcci\u00f3n del Proyecto.</p>"},{"location":"PMBOK/Gesti%C3%B3n%20de%20Costos%20del%20Proyecto/#procesos-clave","title":"Procesos CLAVE","text":"<ul> <li>Planificar la Gesti\u00f3n de Costos. Establecer c\u00f3mo se planificar\u00e1n, estructurar\u00e1n y controlar\u00e1n los costos del proyecto. </li> <li>Establecer las pol\u00edticas, procedimientos y documentaci\u00f3n necesarios para planificar, gestionar, ejecutar el gasto y controlar los costos del proyecto.</li> <li>Se determina, por ejemplo, que el proyecto se gestionar\u00e1 utilizando un enfoque de costo basado en actividades, donde cada actividad identificada en el cronograma tendr\u00e1 costos asociados.</li> <li>El Plan para la Direcci\u00f3n del Proyecto, Acta de Constituci\u00f3n del Proyecto y Factores Ambientales de la Empresa son, desde luego, entradas para este proceso.</li> <li>Se utilizan t\u00e9cnicas como el Juicio de Expertos, o simplemente reuniones entre los miembros del proyecto y/o patrocinadores, interesados.</li> <li> <p>Como salida se encuentra el nombrado Plan de Gesti\u00f3n de Costos.</p> </li> <li> <p>Estimaci\u00f3n de Costos. El equipo realiza una estimaci\u00f3n de costos detallada para cada una de las actividades del proyecto. </p> </li> <li>Los principales componentes que influir\u00edan en un proyecto de software podr\u00edan ser: Salarios del equipo de desarrollo, Infraestructura tecnol\u00f3gica (servidores, licencias de software), Gastos operativos (energ\u00eda, espacio de oficina) o Costos de prueba y lanzamiento.</li> <li>El Plan de Gesti\u00f3n de Costos es la entrada m\u00e1s importante a este proceso, adem\u00e1s de la L\u00ednea Base del Alcance, que como sabemos consta del Enunciado del alcance del proyecto y la EDT o WBS.</li> <li> <p>La salida es la Estimaci\u00f3n de Costos de las Actividades. Se trata de evaluaciones cuantitativas de los costos probables que se requieren.</p> </li> <li> <p>Determinar el Presupuesto. El presupuesto total del proyecto se determina sumando todas las estimaciones de costos, a\u00f1adiendo riesgos y reservas para riesgos conocidos o imprevistos.</p> </li> <li>El presupuesto final incluye no solo los costos directos, sino tambi\u00e9n reservas para riesgos, como retrasos o fallas t\u00e9cnicas.</li> <li>Ejemplo de presupuesto<ul> <li>Costos directos: $60000</li> <li>Reserva para riesgos: $5000</li> <li>Presupuesto total del proyecto: $65000</li> </ul> </li> <li>Entradas:<ul> <li>Plan de Gesti\u00f3n de Costos.</li> <li>L\u00ednea Base del Alcance.</li> <li>Estimaci\u00f3n de Costos de las Actividades.</li> <li>*Cronograma del Proyecto.</li> <li>Registro de Riesgos.</li> </ul> </li> <li> <p>En salidas, tenemos la L\u00ednea Base de Costos (versi\u00f3n aprobada del presupuesto por fases del proyecto, sin tener en cuenta reservas para gesti\u00f3n del mismo, y teniendo en cuenta reservas para riesgos y actividades del cronograma), y los Requisitos de Financiamiento del Proyecto (se derivan de la l\u00ednea base de costos)</p> <ul> <li></li> </ul> </li> <li> <p>Controlar los Costos. Durante la ejecuci\u00f3n del proyecto, se monitorean los costos reales en comparaci\u00f3n con el presupuesto planificado.</p> </li> <li>Las Entradas t\u00edpicas son el Plan para la Direcci\u00f3n del Proyecto (junto con la l\u00ednea base de costos y Plan para la Gesti\u00f3n de Costos), Requisitos de Financiamiento del Proyecto.</li> <li>Los Software de Gesti\u00f3n de Proyectos, tambi\u00e9n son una herramienta \u00fatil para monitorear las dimensiones del valor ganado (valor del trabajo que ha sido realmente completado hasta una fecha, en t\u00e9rminos de presupuesto).</li> <li>Si durante el desarrollo del backend se descubre que la integraci\u00f3n con sistemas de pago requiere m\u00e1s tiempo y recursos de lo previsto, lo que aumenta el costo en $5,000 adicionales, esto se registra y se eval\u00faa si es necesario ajustar el presupuesto global o si se puede cubrir con la reserva de contingencia. Esto \u00faltimo se conoce como un An\u00e1lisis de Variaciones y la posible toma de Acciones Correctivas</li> <li>Las salidas no suelen ser m\u00e1s relevantes que Actualizaciones al Plan para la Direcci\u00f3n del Proyecto, Solicitudes de Cambio, Pron\u00f3sticos de Costos.</li> </ul>"},{"location":"PMBOK/Gesti%C3%B3n%20del%20Alcance%20del%20Proyecto/","title":"Gesti\u00f3n del Alcance del Proyecto","text":"<ul> <li>La Gesti\u00f3n del Alcance del Proyecto incluye los procesos necesarios para garantizar que el proyecto incluya todo el trabajo requerido y \u00fanicamente el trabajo para completar el proyecto con \u00e9xito. Estos procesos obviamente var\u00edan seg\u00fan el proyecto, pero en la imagen podemos ver una descripci\u00f3n general de los mismos.      </li> </ul>"},{"location":"PMBOK/Gesti%C3%B3n%20del%20Alcance%20del%20Proyecto/#procesos-clave","title":"Procesos CLAVE","text":"<p>Cada proyecto tiene una L\u00cdNEA BASE para su alcance, esto incluye y es, la versi\u00f3n aprobada del enunciado/declaraci\u00f3n del alcance del proyecto, la estructura de desglose del trabajo (EDT o WBS) y su diccionario de asociado. Podr\u00eda considerarse la salida de esta etapa en su totalidad como este Enunciado del Alcance del Proyecto, poni\u00e9ndolo en palabras.</p> <p>Vamos a describir cada proceso: - Planificar la Gesti\u00f3n del Alcance. Crear un plan de gesti\u00f3n del alcance que documente c\u00f3mo se va a definir, validar y controlar el alcance del proyecto. Algunas de las entradas son:     - Acta de Constituci\u00f3n del Proyecto. Documento emitido por el iniciador del proyecto o patrocinador, que autoriza formalmente la existencia de un proyecto y confiere al director del proyecto la autoridad para asignar los recursos de la organizaci\u00f3n a las actividades del proyecto.     - Plan para la Direcci\u00f3n del Proyecto. Documento integral que describe c\u00f3mo se planificar\u00e1, ejecutar\u00e1, monitorear\u00e1, controlar\u00e1 y cerrar\u00e1 un proyecto.     - Factores Ambientales de la Empresa. Pueden influir en la gesti\u00f3n de personal, condiciones del mercado.     - Activos de los Procesos de la Organizaci\u00f3n. Una plantilla para el plan de gesti\u00f3n de riesgos, una base de datos con estimaciones de costos de proyectos similares, son ejemplos de activos.</p> <ul> <li>Recopilar Requisitos. Ingenier\u00eda de Requerimientos. Determinar, documentar y gestionar las necesidades y los Requerimientos de los interesados para cumplir con los objetivos del proyecto. Estos requisitos son incluidos en la l\u00ednea base del alcance. </li> <li> <p>En esta etapa podemos se\u00f1alar algunos documentos importantes como salida de la misma: el Documento de Requerimientos del Sistema (ERS), la Matriz de Trazabilidad de Requisitos</p> </li> <li> <p>Definici\u00f3n del Alcance. El equipo crea una declaraci\u00f3n del alcance que describe claramente las funcionalidades incluidas y los resultados que tendr\u00e1 el proyecto. Esta declaraci\u00f3n no es exactamente una EDT o WBS, pero durante este proceso se suele crear esta \u00faltima. Al fin y al cabo se trata justamente de definir/describir las funcionalidades del proyecto. </p> </li> <li> <p>Dado que es posible que no todos los requisitos identificados en el proceso Recopilar Requisitos se puedan incluir en el proyecto, el proceso Definir el Alcance selecciona los requisitos definitivos del proyecto a partir de la documentaci\u00f3n de requisitos entregada durante el proceso Recopilar Requisitos.</p> <ul> <li>Una de las t\u00e9cnicas que se realizan durante este proceso para este cometido es el Juicio de Expertos. </li> </ul> </li> <li> <p>Validaci\u00f3n del Alcance. El equipo de desarrollo presenta un prototipo al cliente para su validaci\u00f3n, asegurando que se cumplan los requisitos establecidos. Si el cliente da su aprobaci\u00f3n, se considera que el entregable es aceptado.</p> <ul> <li>De este proceso la salida m\u00e1s importante vendr\u00edan a ser los entregables aceptados por el cliente o patrocinador. Hay otras salidas como las solicitudes de Cambio (los entregables completados que no fueron aceptados formalmente requieren una solicitud para la reparaci\u00f3n de defectos)</li> </ul> </li> <li> <p>Control del Alcance. Se monitorea el estado del alcance del proyecto y del producto. Se controla estrictamente el alcance para evitar que se agreguen nuevas caracter\u00edsticas sin la aprobaci\u00f3n correspondiente.</p> </li> <li>Se gestionan los cambios a la l\u00ednea base del alcance (mencionada arriba). El beneficio clave del proceso es que esta misma se mantiene a lo largo del proyecto. Para detectar el impacto de cualquier cambio suele resultar muy \u00fatil la Matriz de Trazabilidad de Requisitos.</li> <li> <p>Si durante la fase de desarrollo el cliente solicita que se agregue una funci\u00f3n de \"chat en vivo\" para atenci\u00f3n al cliente, esta solicitud debe pasar por un proceso formal de evaluaci\u00f3n (denominado An\u00e1lisis de Variaci\u00f3n) para determinar el impacto en el cronograma y costo. Si se aprueba, se ajusta el plan del proyecto; si no, se excluye la solicitud.</p> <ul> <li>Una de las entradas claramente son las solicitudes de cambio del proceso anterior.</li> <li>salidas podr\u00edan ser actualizaciones al Plan de Direcci\u00f3n del Proyecto, u otros documentos como la Matriz de Trazabilidad de Requisitos.</li> </ul> </li> <li> <p>Es importante esta \u00faltima etapa del proceso, ya que en proyectos de software es com\u00fan que el alcance crezca de manera no planificada. La adici\u00f3n incontrolada o no autorizada de nuevos requisitos se le denomina Creep de Alcance.</p> </li> </ul>"},{"location":"PMBOK/Gesti%C3%B3n%20del%20Tiempo%20del%20Proyecto/","title":"Gesti\u00f3n del Tiempo del Proyecto","text":"<p>La Gesti\u00f3n del Tiempo del Proyecto incluye los procesos requeridos para gestionar la terminaci\u00f3n en plazo del proyecto. Estos procesos aseguran que el proyecto se complete dentro del tiempo estimado, por lo que esta gesti\u00f3n se trata de definir actividades, su secuenciaci\u00f3n, estimar su duraci\u00f3n, desarrollar el cronograma y hace un control continuo. Los procesos de Gesti\u00f3n del Tiempo del Proyecto, as\u00ed como sus herramientas y t\u00e9cnicas asociadas, se documentan en el plan de gesti\u00f3n del cronograma.</p> <p>El plan de gesti\u00f3n del cronograma es un plan secundario integrado con, el plan para la direcci\u00f3n del proyecto a trav\u00e9s del proceso Desarrollar el Plan para la Direcci\u00f3n del Proyecto. Este plan resultado de la gesti\u00f3n tratada, puede ser formal o informal, m\u00e1s o menos detallado, pero lo importante es que al fin y al cabo este sirva como gu\u00eda para garantizar que el proyecto se complete dentro del tiempo establecido.      Con el fin de esclarecer la imagen adjunta, los m\u00e9todos de programaci\u00f3n son enfoques o t\u00e9cnicas generales que se aplican para gestionar el tiempo del proyecto (gesti\u00f3n iterativa utilizada en Modelos \u00c1giles, predictiva, entre otros).  Las herramientas son instrumentos espec\u00edficos que apoyan la aplicaci\u00f3n de los m\u00e9todos (diagramas de red, tableros Kanban).</p> <p>Los modelos son representaciones estructuradas que ayudan a planificar, analizar y controlar el tiempo del proyecto. Los m\u00e1s destacados entre ellos son, por ejemplo, el M\u00e9todo de la Ruta Cr\u00edtica (CPM), donde se identifica la secuencia de actividades que determina la duraci\u00f3n total del proyecto, o los Modelos \u00c1giles en s\u00ed mismos, para los cuales se divide el proyecto en sprints con duraciones fijas, entre otros. </p>"},{"location":"PMBOK/Gesti%C3%B3n%20del%20Tiempo%20del%20Proyecto/#procesos-clave","title":"Procesos CLAVE","text":"<ul> <li>Planificar la Gesti\u00f3n del Cronograma. Establecer las pol\u00edticas, procedimientos y documentaci\u00f3n que guiar\u00e1n la planificaci\u00f3n, desarrollo y control del cronograma del proyecto.</li> <li>Establecer C\u00d3MO se desarrollar\u00e1 el cronograma del proyecto, b\u00e1sicamente.</li> <li>El C\u00d3MO es definido por las herramientas, modelos y m\u00e9todos nombrados arriba. Adem\u00e1s, en el plan se incluyen Unidades de medida, Reglas de Control y c\u00f3mo se vinculan las actividades del cronograma con los paquetes de trabajo de la EDT o WBS.</li> <li>Las entradas a este proceso son:<ul> <li>Plan para la Direcci\u00f3n del Proyecto. Claramente, c\u00f3mo se ejecutar\u00e1 el proyecto en general es informaci\u00f3n importante para este proceso.</li> <li>Acta de Constituci\u00f3n del Proyecto. Este incluye un resumen del cronograma general, que influir\u00e1 o ser\u00e1 modificado en la gesti\u00f3n del mismo.</li> <li>Activos de los Procesos de la Organizaci\u00f3n. Herramientas de monitoreo, informaci\u00f3n hist\u00f3rica, plantillas, procedimientos, pol\u00edticas, gu\u00edas existentes. </li> </ul> </li> <li> <p>La salida de este proceso claramente es el plan de gesti\u00f3n del Cronograma. Podemos ver ejemplos de cronogramas en la imagen de arriba, m\u00e1s esto es diferente a la salida de este proceso.  </p> </li> <li> <p>Definici\u00f3n de las Actividades. Identificar y documentar las acciones espec\u00edficas que se deben realizar para generar los entregables del proyecto.</p> </li> <li>Identificar las actividades necesarias para completar el proyecto, b\u00e1sicamente.</li> <li>Ejemplos pueden ser, un dise\u00f1o de la interfaz de usuario UI, desarrollo del backend para gesti\u00f3n de productos, integraci\u00f3n con sistemas de pago, el testing correspondiente, ... </li> <li>El Juicio de Expertos, una descomposici\u00f3n de los entregables en partes m\u00e1s peque\u00f1as, son t\u00e9cnicas que pueden ser utilizadas en este proceso.</li> <li>Entradas:<ul> <li>Plan de Gesti\u00f3n del Cronograma.</li> <li>L\u00ednea Base del Alcance.</li> </ul> </li> <li> <p>Para las salidas, una Lista de Actividades es m\u00e1s que explicativo, y por otro lado, una Lista de Hitos (un hito es un evento significativo dentro del proyecto, podr\u00edan ser exigidos por contratos u opcionales).</p> </li> <li> <p>Secuenciaci\u00f3n de Actividades. Ordenar las actividades de manera l\u00f3gica.</p> </li> <li>Identificar y documentar las relaciones entre las actividades del proyecto.</li> <li>El beneficio es que se obtiene la m\u00e1xima eficiencia teniendo en cuenta las restricciones del proyecto.</li> <li>Se dise\u00f1an las relaciones l\u00f3gicas de manera que se genere un cronograma del proyecto realista. Se tiene en cuenta dependencias de tipo \"fin-comienzo\" (una actividad debe terminar antes que otra pueda comenzar), por ejemplo.</li> <li>Entradas:<ul> <li>Plan de Gesti\u00f3n del Cronograma.</li> <li>Lista de Actividades, Lista de Hitos.</li> <li>Enunciado del Alcance del Proyecto, de la etapa anterior. Incluye las caracter\u00edsticas del producto que claramente pueden afectar a la secuenciaci\u00f3n de las actividades.</li> </ul> </li> <li> <p>La salida m\u00e1s importante ser\u00eda un Diagrama de Red del Cronograma del Proyecto.</p> </li> <li> <p>Estimaci\u00f3n de la Duraci\u00f3n de las Actividades. El equipo estima cu\u00e1nto tiempo tomar\u00e1 completar cada actividad.</p> </li> <li>De los ejemplos mencionados en la Definici\u00f3n de las Actividades, supongamos que la primera actividad tomar\u00e1 4 semanas, la segunda 2 semanas, la tercera 3 semanas, se sobreentiende la idea.</li> <li>Una t\u00e9cnica que puede ser utilizada durante este proceso es el M\u00e9todo de la Ruta Cr\u00edtica. </li> <li>Las entradas claras son:<ul> <li>Plan de Gesti\u00f3n del Cronograma.</li> <li>Lista de Actividades.</li> <li>Enunciado del Alcance del Proyecto.</li> </ul> </li> <li> <p>La salida son las mismas Estimaciones de la Duraci\u00f3n de las Actividades.</p> </li> <li> <p>Desarrollar el CRONOGRAMA. Analizar las secuencias de actividades, las duraciones, los requisitos de recursos y las restricciones del cronograma para crear el modelo de programaci\u00f3n del proyecto.</p> </li> <li>Se integran todas las actividades junto con sus duraciones.</li> <li>Entradas:<ul> <li>Plan de Gesti\u00f3n del Cronograma.</li> <li>Lista de Actividades.</li> <li>Diagramas de Red del Cronograma del Proyecto.</li> <li>Estimaciones de la Duraci\u00f3n de las Actividades.</li> <li>Enunciado del Alcance del Proyecto.</li> </ul> </li> <li>Se utilizan las herramientas y m\u00e9todos de anteriores procesos para desarrollar el cronograma.</li> <li> <p>Las salidas son una L\u00ednea Base del Cronograma (versi\u00f3n aprobada del modelo de programaci\u00f3n), y el Cronograma del Proyecto, y las Actualizaciones al Plan para la Direcci\u00f3n del Proyecto correspondientes y dadas las dos otras salidas.</p> </li> <li> <p>Controlar el Cronograma. Una vez que el proyecto est\u00e1 en marcha, es vital monitorear continuamente el progreso para asegurarse de que el equipo est\u00e9 cumpliendo con los plazos.</p> </li> <li>Se detectan desviaciones con respecto al plan, y se establecen acciones correctivas y preventivas para minimizar el riesgo, como la reasignaci\u00f3n de recursos adicionales o la reprogramaci\u00f3n de ciertas actividades del cronograma.</li> <li>Entradas:<ul> <li>Plan para la Direcci\u00f3n del Proyecto.</li> <li>Cronograma del Proyecto.</li> <li>Datos de Desempe\u00f1o del Trabajo (informaci\u00f3n sobre el avance del proyecto).</li> </ul> </li> <li>Una herramienta que puede resultar clave en este proceso es un Software de Gesti\u00f3n de Proyectos, como puede ser Jira.</li> <li>Las salidas son Informaci\u00f3n de Desempe\u00f1o del Trabajo, Pron\u00f3stico del Cronograma, Solicitudes de Cambio (a la l\u00ednea base del cronograma), y Actualizaciones al Plan para la Direcci\u00f3n del Proyecto, as\u00ed como para el Registro de Riesgos.</li> </ul>"},{"location":"PMBOK/Juicio%20de%20Expertos/","title":"Juicio de Expertos","text":"<p>T\u00e9cnica usual durante la Gesti\u00f3n del Alcance del Proyecto, as\u00ed como para la Gesti\u00f3n del Tiempo del Proyecto, y dem\u00e1s.</p> <p>Un grupo o individuo con conocimientos especializados proporciona su experiencia para analizar la informaci\u00f3n necesaria para la elaboraci\u00f3n del Enunciado del Alcance del Proyecto, por ejemplo. Se trata de obtener opiniones, consejos o evaluaciones de personas o grupos con experiencia, conocimientos especializados o capacitaci\u00f3n relevante en un \u00e1rea espec\u00edfica. Estas personas pueden ser internas o externas al proyecto y su expertise se emplea para tomar decisiones informadas, resolver problemas, estimar recursos, identificar riesgos o definir estrategias, especialmente cuando la informaci\u00f3n disponible es limitada o incierta.</p> <p>Ejemplos de los expertos/fuentes de opini\u00f3n: - Unidades dentro de la organizaci\u00f3n; - Consultores; - Interesados en el proyecto, incluyendo clientes o patrocinadores; - Asociaciones profesionales y t\u00e9cnicas; - Grupos de industria;  - Expertos en la materia</p>"},{"location":"PMBOK/La%20Evoluci%C3%B3n%20de%20la%20Triple%20Restricci%C3%B3n/","title":"La Evoluci\u00f3n de la Triple Restricci\u00f3n","text":"<p>El objetivo final de un proyecto no es solo mantener tres restricciones en equilibrio, sino entregar valor a las partes interesadas. </p> <p>La evoluci\u00f3n de la Triple Restricci\u00f3n, supone el agregado de otras tres restricciones cr\u00edticas, entre ellas:</p>"},{"location":"PMBOK/La%20Evoluci%C3%B3n%20de%20la%20Triple%20Restricci%C3%B3n/#calidad","title":"Calidad","text":"<p>La calidad no solo es un resultado del equilibrio entre alcance, tiempo y costo, sino que tambi\u00e9n es una restricci\u00f3n en s\u00ed misma.  La Gesti\u00f3n de la Calidad implica asegurar que el producto final cumpla con los est\u00e1ndares y expectativas establecidos. Esto requiere planificaci\u00f3n y control a lo largo de todo el proyecto. - Utiliza pol\u00edticas y procedimientos para implementar el sistema de gesti\u00f3n de la calidad de la organizaci\u00f3n en el contexto del proyecto. Ejemplos de estos sistemas podr\u00edan ser los tratados en los apartados de QA (Quality Assurance o Aseguramiento de la Calidad) y QC (Control de Calidad). - Aborda la calidad tanto de la gesti\u00f3n del proyecto como la de sus entregables. - El equipo de direcci\u00f3n del proyecto deber\u00eda establecer los niveles adecuados de Exactitud y Precisi\u00f3n para su utilizaci\u00f3n en el plan de gesti\u00f3n de la calidad.</p>"},{"location":"PMBOK/La%20Evoluci%C3%B3n%20de%20la%20Triple%20Restricci%C3%B3n/#riesgos","title":"Riesgos","text":"<p>Los riesgos hacen referencia a cualquier incidente inesperado que puede interferir en el proyecto. Pueden ser negativos o positivos. La Gesti\u00f3n de Riesgos implica identificar, analizar y mitigar los riesgos potenciales que podr\u00edan desviar el proyecto de sus objetivos.  - Esto puede lograrse utilizando un Registro de Riesgos para evaluar la probabilidad e impacto de cada riesgo, lo que permite mitigar primero aquellos m\u00e1s probables y graves. - Una de las etapas m\u00e1s importantes de este proceso es la de Identificar los Riesgos, en la que suelen usarse t\u00e9cnicas como un An\u00e1lisis FODA, Juicio de Expertos, Tormentas de Ideas, Listas de Verificaci\u00f3n. - Tambi\u00e9n, se analizan tanto cualitativa como cuantitativamente los riesgos:     - El An\u00e1lisis Cualitativo es realizado con el fin de evaluar y priorizar riesgos seg\u00fan su probabilidad e impacto. Un riesgo de \u201cretraso en pruebas por falta de dispositivos\u201d se clasifica como \u201cprioridad media\u201d si el impacto es un retraso de 4 d\u00edas.     - El An\u00e1lisis Cuantitativo permite asignar un valor num\u00e9rico al impacto de los riesgos en los objetivos del proyecto, especialmente para riesgos de alta prioridad. La salida son Estimaciones cuantitativas, como el impacto en costos (por ejemplo, $10,000) o tiempo (por ejemplo, 5 d\u00edas de retraso). - La Planificaci\u00f3n de la Respuesta a los Riesgos tiene el prop\u00f3sito del desarrollo de estrategias para abordar cada riesgo identificado, y consecuente a esta se encuentra la Implementaci\u00f3n de esta planificaci\u00f3n basada en actuar para reducir la probabilidad de ocurrencia o el impacto de un riesgo, si llegara a materializarse (esto \u00faltimo se le llama mitigaci\u00f3n). - La \u00faltima etapa refiere a la Monitorizaci\u00f3n del Riesgo, en la que se comprueba que no han cambiado las suposiciones sobre los mismos, revalorar regularmente los identificados para decidir si el riesgo se vuelve m\u00e1s o menos probable, y los planes para atenuarlo.</p>"},{"location":"PMBOK/La%20Evoluci%C3%B3n%20de%20la%20Triple%20Restricci%C3%B3n/#recursos","title":"Recursos","text":"<p>Los recursos se refieren a las personas, equipos, materiales y otros elementos necesarios para completar el proyecto. Est\u00e1n estrechamente relacionados con las restricciones de costos, ya que estos requisitos cuestan dinero.  La Gesti\u00f3n de Recursos implica asegurar que se tengan los recursos adecuados en el momento adecuado para mantener el proyecto en marcha. - Recursos a considerar podr\u00edan ser personas, equipamiento o materiales, instalaciones, software. - En la gesti\u00f3n se suele realizar un Plan de Gesti\u00f3n de Recursos que asegura que los recursos necesarios est\u00e9n disponibles para cada aspecto del proyecto, evitando que esta restricci\u00f3n afecte negativamente otras \u00e1reas como la calidad, el presupuesto o el cronograma. - Ejemplo: En un proyecto de software, los recursos clave podr\u00edan incluir desarrolladores con habilidades espec\u00edficas, servidores para pruebas y herramientas de desarrollo. Si no se gestionan adecuadamente, la falta de recursos podr\u00eda retrasar el proyecto o aumentar los costos debido a la necesidad de recursos adicionales de \u00faltima hora.</p> <p>Se incluye un ejemplo que incluye la gesti\u00f3n de estas tres restricciones, junto a las originales, en el apartado de Ejemplo Integral. Interacci\u00f3n de las Seis Restricciones.</p>"},{"location":"PMBOK/Matriz%20de%20Trazabilidad%20de%20Requisitos/","title":"Matriz de Trazabilidad de Requisitos","text":"<p>Documento importante del proceso de Gesti\u00f3n del Alcance del Proyecto.</p> <p> La matriz de trazabilidad de requisitos es un cuadro que vincula los requisitos del producto desde su origen hasta los entregables que los satisfacen.  Ayuda a asegurar que los Requerimientos agreguen valor al negocio, individualmente, al vincularlo con los objetivos del negocio y del Proyecto.</p> <p>En la matriz de trazabilidad de requisitos se pueden registrar los atributos asociados con cada requisito.  Los atributos t\u00edpicos utilizados en la matriz de trazabilidad de requisitos pueden incluir:  - Identificador \u00fanico,  - Descripci\u00f3n textual del requisito,  - Fundamento de su incorporaci\u00f3n,  - Responsable,  - Origen,  - Prioridad,  - Versi\u00f3n,  - Estado actual (tal como vigente, cancelado, aplazado, agregado, aprobado, asignado, completado)  - Fecha del estado registrado.</p>"},{"location":"PMBOK/Matriz%20de%20Trazabilidad%20de%20Requisitos/#ejemplo","title":"Ejemplo","text":"ID Req. Descripci\u00f3n Origen Prioridad Entregable Asociado Criterio de Aceptaci\u00f3n Estado REQ-01 Sistema de login seguro Cliente Alta M\u00f3dulo de autenticaci\u00f3n Autenticaci\u00f3n en &lt; 3 seg Completado REQ-02 Informe de ventas mensual Departamento de ventas Media Reporte automatizado Precisi\u00f3n del 100% en datos En progreso"},{"location":"PMBOK/M%C3%A9todo%20de%20la%20Ruta%20Cr%C3%ADtica/","title":"M\u00e9todo de la Ruta Cr\u00edtica","text":"<p>Se utiliza para estimar la duraci\u00f3n m\u00ednima del proyecto y determinar el nivel de flexibilidad en la programaci\u00f3n de los caminos de red l\u00f3gicos dentro del cronograma. Relevante para la Gesti\u00f3n del Tiempo del Proyecto.</p> <p>Esta t\u00e9cnica de an\u00e1lisis de la red del cronograma calcula las fechas de inicio y finalizaci\u00f3n, tempranas y tard\u00edas, para todas las actividades, sin tener en cuenta las limitaciones de recursos, y realiza un an\u00e1lisis que recorre hacia adelante y hacia atr\u00e1s toda la red del cronograma como muestra la imagen. Cada letra corresponde a una actividad, se comienza en A, y B y C dependen de A.  Lo que se hace principalmente es definir la Ruta Cr\u00edtica, es decir, la secuencia m\u00e1s larga de actividades en el proyecto que no puede retrasarse sin afectar la fecha de finalizaci\u00f3n del proyecto. Las actividades en esta ruta tienen holgura (float) igual a cero, lo que significa que no hay margen para retrasos. En este ejemplo el camino m\u00e1s largo incluye las actividades A, C y D, y por lo tanto la secuencia A-C-D constituye la ruta cr\u00edtica.</p> <p>Resultados: - Duraci\u00f3n total del proyecto. - Actividades cr\u00edticas que requieren especial atenci\u00f3n. - Identificaci\u00f3n de actividades con holgura, lo que permite optimizar recursos o ajustar el cronograma.</p>"},{"location":"PMBOK/M%C3%A9todo%20de%20la%20Ruta%20Cr%C3%ADtica/#esclarecimiento","title":"Esclarecimiento","text":"<p>En el ejemplo, la ruta cr\u00edtica es A-C-D, pero esto no significa que B no deba realizarse, o que no forme parte del proyecto, simplemente significa que B tiene holgura, lo que permite cierta flexibilidad en su ejecuci\u00f3n sin afectar la duraci\u00f3n total del proyecto. Puede ejecutarse, primero A por supuesto, y luego B y C en simult\u00e1neo, pero priorizar A y C es crucial porque al ser la ruta cr\u00edtica, cualquier retraso en ellas extender\u00e1 la duraci\u00f3n del proyecto, y la realizaci\u00f3n de D.</p>"},{"location":"PMBOK/Plan%20para%20la%20Direcci%C3%B3n%20del%20Proyecto/","title":"Plan para la Direcci\u00f3n del Proyecto","text":"<p>Documento integral que describe c\u00f3mo se ejecutar\u00e1, monitorear\u00e1, controlar\u00e1 y cerrar\u00e1 el proyecto.  - Es el resultado principal del proceso Desarrollar el Plan para la Direcci\u00f3n del Proyecto dentro del grupo de procesos de Planificaci\u00f3n (mencionados en el apartado Proyecto) y sirve como una gu\u00eda central para la gesti\u00f3n de todas las \u00e1reas del proyecto.  Este plan consolida la informaci\u00f3n de los planes subsidiarios y las l\u00edneas base, proporcionando una hoja de ruta clara para el equipo del proyecto y las partes interesadas.</p>"},{"location":"PMBOK/Plan%20para%20la%20Direcci%C3%B3n%20del%20Proyecto/#componentes-clave-del-plan-para-la-direccion-del-proyecto","title":"Componentes clave del Plan para la Direcci\u00f3n del Proyecto","text":"<p>El PMBOK organiza el plan en l\u00edneas base y planes de gesti\u00f3n subsidiarios, que incluyen: - L\u00edneas Base.     1. Del alcance.     2. Del cronograma.     3. De costos. - Planes de Gesti\u00f3n Subsidiarios.     1. Plan de Gesti\u00f3n del Alcance del Proyecto y Requisitos.     2. Plan de Gesti\u00f3n del Tiempo del Proyecto     3. Plan de Gesti\u00f3n de Costos del Proyecto     4. Plan de Gesti\u00f3n de la Calidad     5. Plan de Gesti\u00f3n de Riesgos     6. Plan de Gesti\u00f3n de Recursos</p> <p>Entendiendo a las l\u00edneas bases como la versi\u00f3n aprobada del enunciado o restricci\u00f3n, es decir, lo que se espera de cada una respecto al proyecto. Y los planes de gesti\u00f3n como el resultado de, justamente, la gesti\u00f3n adecuada de dicha caracter\u00edstica o enunciado respecto al proyecto. Sabiendo esto, podemos notar que el Plan para la Direcci\u00f3n del Proyecto es continuamente modificado durante la etapa de planificaci\u00f3n de un proyecto.</p>"},{"location":"PMBOK/Proyecto/","title":"Proyecto","text":"<p>%%En los incisos de Gesti\u00f3n de {Caracter\u00edstica importante para un proyecto} se van nombrando documentos de entrada y salida referido a los procesos de dicha gesti\u00f3n, debido a que el PMBOK as\u00ed lo representa. Para el entendimiento de estas gestiones es importante la lectura de este apartado, espec\u00edficamente sobre la Direcci\u00f3n de Proyectos, donde menciona a estos documentos o por lo menos a los m\u00e1s importantes.%%</p> <p>Existen diversas definiciones de lo que es un proyecto. En su forma m\u00e1s cl\u00e1sica, un proyecto se define como:  - Un conjunto \u00fanico de actividades interrelacionadas de forma l\u00f3gica y a su vez, necesarias para alcanzar un resultado espec\u00edfico dentro de un marco de tiempo determinado y con una asignaci\u00f3n concreta de recursos limitados.  - Es un trabajo singular con fechas de inicio y finalizaci\u00f3n, una especificaci\u00f3n clara del objetivo o alcance de la tarea, un presupuesto preestablecido y, habitualmente, una organizaci\u00f3n temporal.  Cada proyecto genera un producto, servicio o resultado \u00fanico.</p>"},{"location":"PMBOK/Proyecto/#direccion-de-proyectos","title":"Direcci\u00f3n de Proyectos","text":"<p>La direcci\u00f3n de proyectos es la aplicaci\u00f3n de conocimientos, habilidades, herramientas y t\u00e9cnicas a las actividades del proyecto para cumplir con los requisitos del mismo. Esto se logra mediante la aplicaci\u00f3n e integraci\u00f3n de, lo que el PMBOK llama, 47 procesos de la direcci\u00f3n de proyectos agrupados en los grupos: - Inicio. Esta etapa establece la base del proyecto, definiendo su prop\u00f3sito, objetivos y viabilidad.  - Se identifica por qu\u00e9 el proyecto es necesario y se obtiene la autorizaci\u00f3n para comenzarlo. - Se identifican las partes interesadas, sus necesidades.  - Se desarrolla el acta de constituci\u00f3n del proyecto.      - RESULTADOS PRINCIPALES.         1. Acta de Constituci\u00f3n del Proyecto (Proyect Charter).         2. Registro de Partes Interesadas. </p> <ul> <li>Planificaci\u00f3n. Etapa m\u00e1s extensa y cr\u00edtica.</li> <li>Se desarrolla el Plan para la Direcci\u00f3n del Proyecto.</li> <li>Por lo tanto se define el alcance de forma detallada, se desarrolla el cronograma, se estiman costos y establecen las correspondientes l\u00edneas base para cada restricci\u00f3n.</li> <li>Se crean los planes subsidiarios para gestionar calidad, recursos, riesgos, comunicaciones, adquisiciones y partes interesadas.</li> <li> <p>Se identifican y analizan Riesgos.</p> <ul> <li>RESULTADOS PRINCIPALES.<ol> <li>Plan para la Direcci\u00f3n del Proyecto</li> <li>EDT o WBS.</li> <li>Matriz de Trazabilidad de Requisitos.</li> <li>Cronogramas, presupuestos.</li> <li>Registro de Riesgos.</li> </ol> </li> </ul> </li> <li> <p>Ejecuci\u00f3n. Se lleva a cabo el trabajo planificado para producir los entregables del proyecto.</p> </li> <li>El enfoque est\u00e1 en coordinar recursos, gestionar al equipo y cumplir con el plan.</li> <li> <p>Se asignan tareas y resuelven conflictos.</p> <ul> <li>RESULTADOS PRINCIPALES.<ol> <li>Entregables completados.</li> <li>Solicitudes de Cambio. (por parte del cliente, en caso de que no acepte cierta funcionalidad del producto)</li> <li>Actualizaciones al Plan para la Direcci\u00f3n del Proyecto</li> </ol> </li> </ul> </li> <li> <p>Monitoreo y Control. Implica medir el desempe\u00f1o del proyecto contra las l\u00edneas base (alcance, cronograma, costo) y tomar acciones correctivas o preventivas para mantener el proyecto en curso.</p> </li> <li>Se controla el alcance para evitar el Creep de Alcance (explicado en inciso de Gesti\u00f3n del Alcance)</li> <li>Seguimiento de participaci\u00f3n de partes interesadas.</li> <li>Se verifica y controla la calidad de los entregables.</li> <li> <p>Monitorear riesgos y actualizar el Registro de Riesgos.</p> <ul> <li>RESULTADOS PRINCIPALES.<ol> <li>Informes de desempe\u00f1o.</li> <li>Solicitudes de cambio aprobadas o rechazadas.</li> <li>Actualizaciones al Plan para la Direcci\u00f3n del Proyecto y otros documentos.</li> </ol> </li> </ul> </li> <li> <p>Cierre. Esta etapa finaliza todas las actividades del proyecto, asegurando que los entregables se entreguen. </p> </li> <li>Se obtiene la aceptaci\u00f3n de las partes interesadas y se documentan las lecciones aprendidas.</li> <li>Se actualizan los activos de los procesos organizacionales (ejemplos en el apartado de Gesti\u00f3n del Alcance).</li> <li>Se cierran contratos con proveedores.</li> <li>Se liberan recursos del proyecto.</li> <li>Se archiva la documentaci\u00f3n del proyecto.<ul> <li>RESULTADOS PRINCIPALES.<ol> <li>Entregables aceptados.</li> <li>Informe final del proyecto y lecciones aprendidas.</li> </ol> </li> </ul> </li> </ul> <p>Todas estas etapas pueden pensarse como una mirada m\u00e1s general (en lo que refiere a software) de los Modelos de PROCESO. Recordemos que el PMBOK trata la gesti\u00f3n de proyectos y no necesariamente la gesti\u00f3n de proyectos de software en espec\u00edfico. Dirigir un proyecto en general incluye, entre otros aspectos, equilibrar las restricciones contrapuestas del proyecto, las cu\u00e1les detallaremos en el apartado de Triple Restricci\u00f3n.</p>"},{"location":"PMBOK/Registro%20de%20Riesgos/","title":"Registro de Riesgos","text":"<p>Documento clave en la Gesti\u00f3n de los Riesgos del Proyecto que sirve como repositorio central para identificar, documentar, analizar, planificar respuestas y monitorear todos los riesgos asociados con un proyecto.</p> <p>Se utiliza a lo largo de todo el ciclo de vida del proyecto y se crea durante el proceso Identificar los riesgos, siendo actualizado y refinado en los procesos posteriores de la gesti\u00f3n de riesgos.</p> <p>El registro de riesgos es un documento din\u00e1mico que recopila toda la informaci\u00f3n relevante sobre los riesgos del proyecto, desde su identificaci\u00f3n hasta su cierre o materializaci\u00f3n. El registro de riesgos suele presentarse como una tabla o matriz, aunque puede adaptarse seg\u00fan las necesidades del proyecto.</p>"},{"location":"PMBOK/Registro%20de%20Riesgos/#registro-de-riesgos-proyecto-de-desarrollo-de-aplicacion-bancaria-movil","title":"Registro de Riesgos - Proyecto de Desarrollo de Aplicaci\u00f3n Bancaria M\u00f3vil","text":"ID Descripci\u00f3n del Riesgo Categor\u00eda Probabilidad Impacto Prioridad Estrategia de Respuesta Responsable Estado Acciones R1 Defectos no detectados en el m\u00f3dulo de pagos debido a baja cobertura de pruebas T\u00e9cnico Alta (70%) Muy Alto (fallo en producci\u00f3n) Muy Alta Mitigar: Aumentar pruebas automatizadas y de estr\u00e9s Equipo de Testing Activo Dise\u00f1o de casos de prueba completado; automatizaci\u00f3n en curso R2 Retraso en pruebas por falta de dispositivos para pruebas de compatibilidad T\u00e9cnico Media (50%) Medio (retraso de 4 d\u00edas) Media Mitigar: Usar emuladores en la nube Equipo de QA Activo Contrato con proveedor de emuladores firmado R3 Cambios frecuentes en requisitos de UI invalidan casos de prueba Requisitos Alta (80%) Bajo (retraso de 2 d\u00edas) Media Aceptar: Tolerar retraso menor; monitorear cambios Analista de Negocio Activo Reuniones semanales con el cliente para revisar requisitos R4 Oportunidad: Automatizaci\u00f3n de pruebas reduce tiempo de ejecuci\u00f3n T\u00e9cnico Baja (30%) Medio (reducci\u00f3n de 5 d\u00edas) Baja Mejorar: Capacitar equipo en herramientas de automatizaci\u00f3n L\u00edder de Proyecto Activo Curso de automatizaci\u00f3n programado para la pr\u00f3xima semana"},{"location":"PMBOK/Registro%20de%20Riesgos/#notas","title":"Notas:","text":"<ul> <li>Probabilidad: Escala cualitativa (Baja: &lt;30%, Media: 30-60%, Alta: &gt;60%).</li> <li>Impacto: Evaluado en funci\u00f3n de cronograma, costo y calidad.</li> <li>Prioridad: Calculada como Probabilidad \u00d7 Impacto (Matriz de Riesgos).</li> <li>Estado: Activo (en monitoreo), Cerrado (resuelto), Materializado (ocurri\u00f3).</li> <li>Categor\u00eda: Esta caracter\u00edstica es utilizada como agrupaci\u00f3n general de las causas potenciales del riesgo. Abajo se las detalla.</li> </ul>"},{"location":"PMBOK/Registro%20de%20Riesgos/#categorias-de-riesgo-segun-el-pmbok","title":"Categor\u00edas de Riesgo seg\u00fan el PMBOK","text":"<p>Proporcionan un medio para agrupar las causas potenciales de riesgo. Se pueden utilizar diversos enfoques, por ejemplo, una estructura jer\u00e1rquica de riesgos potenciales ordenados por categor\u00edas (se lo suele conocer como Risk Breakdown Structure RBS y es muy similar en formato a una EDT o WBS) . Diferentes estructuras RBS resultar\u00e1n adecuadas para diferentes tipos de proyectos. La imagen adjunta es un ejemplo, y no la categorizaci\u00f3n est\u00e1ndar. </p>"},{"location":"PMBOK/Riesgos/","title":"Riesgos","text":"<p>El riesgo de un proyecto es un evento o condici\u00f3n incierta que, de producirse, tiene un efecto positivo o negativo en uno o m\u00e1s de los objetivos del Proyecto, tales como el alcance, el cronograma, el costo y la Calidad. (Triple Restricci\u00f3n)</p> <p>Los riesgos del proyecto tienen su origen en la incertidumbre que est\u00e1 presente en todos los proyectos.</p>"},{"location":"PMBOK/Riesgos/#tipos-de-riesgos-segun-el-pmbok","title":"Tipos de riesgos seg\u00fan el PMBOK","text":"<ul> <li>Riesgos conocidos: Aquellos que se identifican y analizan durante la planificaci\u00f3n, permitiendo desarrollar respuestas espec\u00edficas.</li> <li> <p>A los riesgos conocidos que no se pueden gestionar de manera proactiva se les debe asignar una reserva para contingencias.</p> </li> <li> <p>Riesgos desconocidos: Eventos imprevistos que no se identificaron previamente, manejados mediante reservas de contingencia o respuestas reactivas.</p> </li> <li> <p>Los riesgos desconocidos no se pueden gestionar de manera proactiva y por lo tanto se les puede asignar una reserva de gesti\u00f3n. </p> </li> <li> <p>Riesgos individuales: Afectan actividades espec\u00edficas del proyecto.</p> </li> <li> <p>Riesgos generales: Afectan al proyecto en su conjunto (por ejemplo, cambios en regulaciones o desastres naturales).</p> </li> </ul> <p>Un riesgo negativo del proyecto que se ha materializado se considera un problema, en cambio un riesgo positivo suele ser visto como una oportunidad.</p>"},{"location":"PMBOK/Riesgos/#como-una-organizacion-o-interesados-abordan-la-incertidumbre-en-un-proyecto","title":"\u00bfC\u00f3mo una organizaci\u00f3n o interesados abordan la incertidumbre en un proyecto?","text":"<ol> <li>Apetito al riesgo: Es el nivel general de riesgo que una organizaci\u00f3n est\u00e1 dispuesta a aceptar en busca de sus objetivos estrat\u00e9gicos o del proyecto. Refleja la disposici\u00f3n de la organizaci\u00f3n a asumir riesgos para lograr beneficios, equilibrando oportunidades y amenazas.</li> <li> <p>Ejemplo: Una empresa de desarrollo de software puede aceptar riesgos relacionados con la adopci\u00f3n de tecnolog\u00edas nuevas para ganar ventaja competitiva (alto apetito), pero no tolerar riesgos que comprometan la seguridad de datos.</p> </li> <li> <p>Umbral de riesgo: Es el nivel espec\u00edfico de riesgo (probabilidad o impacto) que la organizaci\u00f3n o los interesados han determinado para cu\u00e1ndo un riesgo requiere acci\u00f3n.</p> </li> <li> <p>Ejemplo: En un proyecto de construcci\u00f3n, el umbral de riesgo podr\u00eda establecerse como \"no se aceptar\u00e1 un retraso superior al 10% del cronograma planificado\". Si un riesgo amenaza con exceder este umbral, se implementa una respuesta.</p> </li> <li> <p>Tolerancia al riesgo: Es el grado de variaci\u00f3n o desviaci\u00f3n que la organizaci\u00f3n o los interesados est\u00e1n dispuestos a soportar si un riesgo en relaci\u00f3n con un objetivo espec\u00edfico del proyecto (costo, cronograma o calidad) ocurre.</p> </li> <li>Ejemplo: En un proyecto de desarrollo de software, la tolerancia al riesgo podr\u00eda ser \"aceptar un aumento de costos del 5% del presupuesto original\" o \"tolerar defectos menores en la interfaz de usuario, pero no en la funcionalidad cr\u00edtica\".</li> </ol>"},{"location":"PMBOK/Riesgos/#otra-definicion-desde-una-perspectiva-del-testing","title":"Otra definici\u00f3n desde una perspectiva del Testing","text":"<p>El riesgo mide la probabilidad de que algo salga mal y el impacto que tendr\u00eda ese fallo en el sistema. En base al riesgo, podemos priorizar qu\u00e9 partes del software necesitan m\u00e1s pruebas y cu\u00e1les pueden ser probadas con menos intensidad. El riesgo se basa en dos factores: la probabilidad de que el problema ocurra y su impacto cuando ocurre: - Un m\u00f3dulo de c\u00f3digo complejo tiene una mayor probabilidad de contener errores debido a su dificultad intr\u00ednseca. - Un m\u00f3dulo de c\u00f3digo cr\u00edtico para el funcionamiento del producto tiene un alto impacto, ya que su fallo podr\u00eda impedir que el producto cumpla con su prop\u00f3sito. Ambas \u00e1reas (alta probabilidad o alto impacto) deben recibir m\u00e1s atenci\u00f3n y pruebas que las \u00e1reas de menor riesgo. Esto se alinea con el enfoque de pruebas basadas en riesgos del PMBOK, donde los recursos de testing se priorizan seg\u00fan la probabilidad e impacto de los riesgos.</p>"},{"location":"PMBOK/Tipos%20de%20Factibilidad/","title":"Tipos de Factibilidad","text":""},{"location":"PMBOK/Tipos%20de%20Factibilidad/#factibilidad-tecnica","title":"Factibilidad T\u00e9cnica","text":"<p>Eval\u00faa:  1. Si los recursos tecnol\u00f3gicos (hardware, software, infraestructura y personal) son suficientes para desarrollar el sistema propuesto. 2. Si el equipo tiene la capacidad de implementar las tecnolog\u00edas necesarias. Permite evitar sorpresas, optimizar recursos y reducir la probabilidad de fracasos t\u00e9cnicos.</p> <p>Elementos Clave. - Hardware.      - Evaluaci\u00f3n de equipos. Verificar si los servidores, computadoras, dispositivos m\u00f3viles, y otros equipos necesarios para el proyecto est\u00e1n disponibles en cantidad suficiente, y cumplen con los requerimientos t\u00e9cnicos del proyecto.     - Estabilidad y Compatibilidad. El hardware debe ser confiable y compatible con la nueva tecnolog\u00eda a implementar.     - Capacidad. Asegurarse que la capacidad de almacenamiento y procesamiento del hardware sea suficiente para las demandas del proyecto.     - Procesamiento. Garantizar que el hardware tenga la potencia de procesamiento suficiente para ejecutar las tareas del sistema, como la velocidad de las CPU y la cantidad de memoria RAM disponible. - Software.      - Desarrollo propio. Crear el software internamente, utilizando las herramientas y recursos que ya posee la organizaci\u00f3n.     - Tercerizaci\u00f3n. Contratar a un proveedor externo especializado para que desarrolle el software.     - Compra de software existente. La organizaci\u00f3n compra un software existente en el mercado y lo ajusta (parametriza) para que cumpla con los requerimientos del proyecto.     - Compatibilidad. Caracter\u00edstica m\u00e1s importante. Se trata de verificar que el nuevo software sea compatible con los sistemas actuales de la organizaci\u00f3n. - Rendimiento.      - Estabilidad. Que el sistema pueda manejar la carga de trabajo prevista sin perder rendimiento.      - Capacidad ante mayores cargas. Verificar que la velocidad de los procesadores y la capacidad del software para manejar m\u00faltiples usuarios simult\u00e1neamente.     - Simulaciones. Consiste en realizar pruebas para simular c\u00f3mo funcionar\u00e1 el sistema bajo diferentes condiciones de uso y carga. - Seguridad y Escalabilidad.      - Seguridad. Evaluar si el sistema ser\u00e1 seguro frente a posibles amenazas cibern\u00e9ticas.     - Escalabilidad. El sistema debe ser capaz de crecer y adaptarse a futuras necesidades de demanda, sin que esto afecte su rendimiento. Algunas herramientas para cumplir con lo listado son la Matriz de Homogeneizaci\u00f3n (permite estandarizar las tecnolog\u00edas), Benchmarking de Tecnolog\u00eda (comparar diferentes herramientas o productos de la organizaci\u00f3n que cumplen funciones similares), o Pruebas de Concepto (pruebas a peque\u00f1a escala de una nueva tecnolog\u00eda para ver si realmente funcionar\u00e1 antes de hacer una inversi\u00f3n mayor).</p>"},{"location":"PMBOK/Tipos%20de%20Factibilidad/#factibilidad-economica","title":"Factibilidad Econ\u00f3mica","text":"<p>Eval\u00faa: 1. Si un proyecto es financieramente viable. Esto implica comparar los costos involucrados con los beneficios financieros esperados para determinar si el proyecto generar\u00e1 un retorno positivo sobre la inversi\u00f3n (ROI) y ser\u00e1 sostenible a largo plazo. Permite evitar p\u00e9rdidas, optimizar la inversi\u00f3n y asegurar la rentabilidad del proyecto. Las herramientas y t\u00e9cnicas que hacen posible estos cometidos son:</p> <ul> <li>An\u00e1lisis de Retorno sobre la Inversi\u00f3n (ROI - Return on Investment). M\u00e9trica financiera que mide el porcentaje de retorno generado por un proyecto en comparaci\u00f3n con la inversi\u00f3n inicial. Cuanto m\u00e1s alto sea el ROI, m\u00e1s rentable ser\u00e1 el proyecto. Compara los beneficios (ya sea ahorros en costos o ingresos adicionales) con el costo total del proyecto.</li> <li>$$ROI = \\left(\\frac{Beneficio\\ Neto}{Costo\\ Total}\\right) \\times 100$$</li> <li>An\u00e1lisis Costo-Beneficio (CBA - Cost-Benefit Analysis). Compara los costos totales del proyecto (tanto iniciales como operativos) con los beneficios econ\u00f3micos y no econ\u00f3micos que se esperan obtener.</li> <li>Incluye costos tangibles (dinero gastado en hardware, por ejemplo) y beneficios intangibles (mejora en la satisfacci\u00f3n del cliente).</li> <li>$$B/C = \\frac{Beneficios}{Costos}$$</li> <li>$B/C &gt;1$: El proyecto es rentable. Los beneficios superan los costos.</li> <li>$B/C =1$: El proyecto es indiferente. Los beneficios son iguales a los costos.</li> <li> <p>$B/C &lt;1$: El proyecto no es rentable.</p> </li> <li> <p>An\u00e1lisis de Punto de Equilibrio (Break-Even Analysis). Determina el momento en que los ingresos generados igualar\u00e1n a los costos.</p> </li> <li>Ejemplo. Un negocio minorista invierte $50,000 en un nuevo sistema de ventas online. Cada producto vendido genera $50 de ganancia.</li> <li>$Punto\\ de\\ Equilibrio = Costo\\ Total / Ganancia\\ por\\ Venta$</li> <li>$Punto\\ de\\ Equilibrio = 50,000 / 50 = 1,000\\ ventas$</li> <li> <p>El negocio deber\u00e1 vender 1,000 productos antes de empezar a generar beneficios.</p> </li> <li> <p>An\u00e1lisis de Recuperaci\u00f3n (Payback Period Analysis). Calcula el tiempo que tomar\u00e1 recuperar la inversi\u00f3n inicial mediante los beneficios generados. </p> </li> <li>Ejemplo. Una empresa invierte $20,000 en un nuevo software que le ahorrar\u00e1 $5,000 al a\u00f1o.</li> <li>$Periodo\\ de\\ Recuperacion = Inversion\\ Inicial / Ahorros\\ Anuales$</li> <li>$Periodo\\ de\\ Recuperacion = 20,000 / 5,000 = 4\\ a\u00f1os$</li> </ul> <p>Si bien la factibilidad econ\u00f3mica eval\u00faa los costos y beneficios financieros del proyecto, la viabilidad econ\u00f3mica tambi\u00e9n considera aspectos estrat\u00e9gicos, como el posicionamiento en el mercado, la ventaja competitiva y el potencial de crecimiento a largo plazo. Para asegurar la viabilidad econ\u00f3mica se suelen realizar Estudios de Mercado (determinar si existe una demanda real para el sistema) o Evaluaciones de Riesgos (An\u00e1lisis FODA, entre otros)</p>"},{"location":"PMBOK/Tipos%20de%20Factibilidad/#factibilidad-operativa","title":"Factibilidad Operativa","text":"<p>Eval\u00faa: 1. Si la organizaci\u00f3n tiene la capacidad para implementar y utilizar un nuevo sistema o proceso de manera efectiva. 2. Si los usuarios finales aceptan y utilizan eficientemente el nuevo sistema o proceso. Permite garantizar la adopci\u00f3n del sistema, evitar impactos negativos en la productividad diaria con el nuevo sistema, identificar problemas relacionados con la capacitaci\u00f3n de los usuarios y la adecuaci\u00f3n de los recursos, optimizar el uso de recursos humanos y materiales (distribuci\u00f3n eficiente de las tareas y que el personal est\u00e9 alineado con los requerimientos del sistema).</p> <p>Preguntas clave para la evaluaci\u00f3n de la factibilidad operativa: 1. \u00bfEl personal actual tiene las habilidades necesarias? 2. \u00bfCu\u00e1l es el nivel de aceptaci\u00f3n del nuevo sistema entre los usuarios finales? 3. \u00bfHay suficientes recursos humanos y tecnol\u00f3gicos para soportar la operaci\u00f3n continua del sistema? 4. \u00bfEl sistema puede integrarse con los procesos actuales? 5. \u00bfC\u00f3mo afectar\u00e1 la implementaci\u00f3n del sistema a las operaciones diarias?</p> <p>Elementos Clave. - Evaluaci\u00f3n de recursos humanos. Responde a la pregunta 1. - Evaluaci\u00f3n tecnol\u00f3gica. Se analiza si la tecnolog\u00eda actual de la organizaci\u00f3n es compatible con el nuevo sistema. Esto incluye la infraestructura tecnol\u00f3gica (servidores, redes) y las herramientas digitales utilizadas. - Aceptaci\u00f3n por parte de los usuarios. Evaluar la adopci\u00f3n del sistema. Responde a la pregunta 2. - Momento de implementaci\u00f3n. La implementaci\u00f3n debe ser planificada cuidadosamente para evitar interrupciones operativas. Por ejemplo, en una organizaci\u00f3n de venta por menor, se podr\u00eda elegir implementar un nuevo sistema de inventario fuera de la temporada alta de ventas para minimizar el impacto. - Simulaciones y Pruebas. La creaci\u00f3n de escenarios hipot\u00e9ticos y simulaciones es \u00fatil para prever problemas potenciales y evaluar el impacto organizacional. Las herramientas y t\u00e9cnicas que hacen posible estos cometidos refieren fundamentalmente a la Capacitaci\u00f3n de Usuarios. Para esto es necesaria la planificaci\u00f3n de la  - Identificaci\u00f3n de necesidades de capacitaci\u00f3n (determinar conocimientos previos y qu\u00e9 \u00e1reas necesitan m\u00e1s atenci\u00f3n),  - Definici\u00f3n de objetivos claros,  - M\u00e9todos de capacitaci\u00f3n (presencial, virtual, ambos), - Desarrollo de Contenido (creaci\u00f3n de un plan de estudios) - Recursos necesarios (manuales de usuario, videos tutoriales, gu\u00edas r\u00e1pidas, foros, este repositorio en cuesti\u00f3n) - Evaluaci\u00f3n de la misma capacitaci\u00f3n (c\u00f3mo se medir\u00e1 el \u00e9xito)</p>"},{"location":"PMBOK/Triple%20Restricci%C3%B3n/","title":"Triple Restricci\u00f3n","text":"<p>La Triple Restricci\u00f3n es un concepto fundamental en la gesti\u00f3n de proyectos que se representa t\u00edpicamente como un tri\u00e1ngulo, donde los tres lados corresponden a las restricciones de Alcance, Costo, y Tiempo.  Estos tres factores est\u00e1n interconectados, y cualquier cambio en uno de ellos afecta a los otros dos, adem\u00e1s de potencialmente influir en la Calidad del proyecto. Por ello es que est\u00e1 al centro del tri\u00e1ngulo.  La triple restricci\u00f3n es una herramienta esencial para equilibrar las prioridades y tomar decisiones informadas durante la ejecuci\u00f3n del proyecto.</p>"},{"location":"PMBOK/Triple%20Restricci%C3%B3n/#alcance","title":"Alcance","text":"<p>En el contexto del proyecto el t\u00e9rmino alcance puede referirse a:  \u2022 Alcance del producto. Las caracter\u00edsticas y funciones que describen un producto, servicio o resultado; y/o  \u2022 Alcance del proyecto. Es el trabajo realizado para entregar un producto, servicio o resultado con las funciones y caracter\u00edsticas especificadas. En ocasiones se considera que el t\u00e9rmino alcance del proyecto incluye el alcance del producto.</p> <p>El alcance o scope de un proyecto define todo el trabajo necesario para completar un proyecto con \u00e9xito, asegurando que se incluya \u00fanicamente lo que es necesario y se evite realizar trabajo adicional que no haya sido planeado o aprobado.  El mismo responde a las siguientes preguntas: - \u00bfQu\u00e9 se entregar\u00e1? (resultados finales del proyecto) - \u00bfCu\u00e1les son los l\u00edmites del proyecto? (qu\u00e9 est\u00e1 dentro y fuera del alcance) - \u00bfCu\u00e1les son los requisitos del cliente o del usuario final? Estas preguntas son respondidas a trav\u00e9s de la Gesti\u00f3n del Alcance del Proyecto.</p>"},{"location":"PMBOK/Triple%20Restricci%C3%B3n/#tiempo-o-cronograma","title":"Tiempo o Cronograma","text":"<p>Esto incluye la planificaci\u00f3n de todas las actividades, la duraci\u00f3n de las tareas, y la secuencia en que se deben realizar para cumplir con los plazos. La restricci\u00f3n del tiempo es cr\u00edtica porque los proyectos tienen fechas l\u00edmite que deben cumplirse. La Gesti\u00f3n del Tiempo del Proyecto incluye todos los procesos que hacen posible que el proyecto se complete dentro del tiempo estimado.</p> <p>Si un proyecto de software tiene una fecha de entrega definida, cualquier cambio en el alcance que aumente complejidad podr\u00eda requerir m\u00e1s tiempo para completar las tareas adicionales. Si el tiempo no puede extenderse, entonces el alcance o recursos tendr\u00e1n que ajustarse.</p>"},{"location":"PMBOK/Triple%20Restricci%C3%B3n/#costo","title":"Costo","text":"<p>Implica el presupuesto total necesario para completar el proyecto. Esto incluye los salarios del equipo, la compra de materiales, el alquiler de equipos, y cualquier otro gasto asociado. La Gesti\u00f3n de Costos del Proyecto requiere estimar con precisi\u00f3n, presupuestar y controlar los gastos para evitar sobrecostos.</p> <p>Si el proyecto de software requiere contratar desarrolladores adicionales para cumplir con un plazo reducido, esto incrementar\u00e1 los costos. Alternativamente, si se reduce el presupuesto, puede que sea necesario recortar el alcance o extender el tiempo.</p>"},{"location":"PMBOK/Triple%20Restricci%C3%B3n/#ejemplo-integral-interaccion-de-las-restricciones","title":"Ejemplo Integral: Interacci\u00f3n de las Restricciones","text":"<p>En el proyecto de desarrollo de una aplicaci\u00f3n de e-commerce, consideremos la siguiente situaci\u00f3n:  \u2022 Alcance inicial: Funcionalidades b\u00e1sicas como b\u00fasqueda de productos y carrito de compras.  \u2022 Tiempo estimado: 12 semanas.  \u2022 Costo estimado: $65,000.  A mitad del proyecto, el cliente solicita la inclusi\u00f3n de una funci\u00f3n de \"recomendaciones personalizadas\", ampliando as\u00ed el alcance. El equipo estima que esta nueva funcionalidad requerir\u00e1 3 semanas adicionales y un costo extra de $10,000. La ampliaci\u00f3n del alcance conlleva extender el cronograma y ajustar el presupuesto del proyecto, por lo que el gestor de proyectos debe decidir si someter el proyecto a estas dos implicaciones o reducir otras funcionalidades (alcance) para mantener el equilibrio entre las tres restricciones. Para darle una continuaci\u00f3n a esta historia, supongamos que en este caso se opta por renegociar el presupuesto y extender el plazo para mantener la calidad del producto final.</p> <p>Aunque la Triple Restricci\u00f3n ha sido durante mucho tiempo una herramienta cl\u00e1sica para analizar y gestionar proyectos, en la pr\u00e1ctica moderna de gesti\u00f3n de proyectos se ha reconocido que este enfoque es insuficiente para capturar la complejidad real de los proyectos actuales, es por esto que el enfoque tradicional descrito en este inciso ha evolucionado, y se trata en el apartado de La Evoluci\u00f3n de la Triple Restricci\u00f3n.</p>"},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Desarrollo%20Dirigido%20por%20Modelos/","title":"Desarrollo Dirigido por Modelos","text":"<p>El Desarrollo de Software Dirigido por Modelos (Model-Driven Development, MDD) es un enfoque metodol\u00f3gico propone el uso de Metodolog\u00edas de Modelado de alto nivel como artefactos principales en el proceso de desarrollo de software, en lugar de centrarse directamente en el c\u00f3digo fuente.</p>"},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Desarrollo%20Dirigido%20por%20Modelos/#principales-propuestas-del-mdd","title":"Principales propuestas del MDD","text":"<ol> <li>Abstracci\u00f3n y automatizaci\u00f3n<ul> <li>En lugar de escribir c\u00f3digo directamente, se crean modelos de alto nivel que representan la estructura y el comportamiento del sistema.</li> <li>Se utilizan herramientas para transformar estos modelos en c\u00f3digo fuente, reduciendo el esfuerzo de programaci\u00f3n manual.</li> </ul> </li> <li>Uso de lenguajes espec\u00edficos de dominio (DSLs)<ul> <li>Se pueden definir lenguajes espec\u00edficos para modelar el dominio del problema, lo que facilita la comprensi\u00f3n y reutilizaci\u00f3n.</li> </ul> </li> <li>Separaci\u00f3n de preocupaciones<ol> <li>Se pueden crear modelos independientes para distintas capas del software (negocio, datos, interfaz de usuario, etc.), facilitando su evoluci\u00f3n y mantenimiento.</li> </ol> </li> <li>Estandarizaci\u00f3n con OMG y UML     El Object Management Group (OMG) propone est\u00e1ndares como Model-Driven Architecture (MDA), que utiliza UML, BPMN y otros lenguajes para definir modelos que pueden transformarse en implementaciones concretas.</li> </ol>"},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Modelado/","title":"Modelado","text":""},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Modelado/#modelar","title":"Modelar","text":"<p>Al modelar, se busca atacar a un problema dif\u00edcil dividi\u00e9ndolo en una serie de problemas m\u00e1s peque\u00f1os que se puedan resolver. El modelado del software es una t\u00e9cnica de ingenier\u00eda probada y bien aceptada para construir modelos arquitect\u00f3nicos de un producto de SW.</p> <p>Desde la \u00f3ptica disciplinar de los Sistemas de Informaci\u00f3n y los Sistemas de Software asociados a ellos, un Esquema Conceptual ser\u00e1 definido como un Modelo de representaci\u00f3n de la realidad sobre un dominio de problema determinado, pero a diferencia del Modelo (donde se busca solamente comunicar el dominio del problema), el esquema incluye detalles de implementaci\u00f3n, estructura, cardinalidad, atributos espec\u00edficos.</p> <p>Las debilidades de la mayor\u00eda de los m\u00e9todos para la obtenci\u00f3n de esquemas conceptuales se reflejan en las primeras etapas del desarrollo de software, lo que trae aparejado un costo excesivamente alto en tareas de reproceso. El principal problema derivado de estas debilidades radica en la imposibilidad de determinar si el modelo conceptual construido, refleja completamente la esencia del dominio que se intenta representar.</p> <p>En el desarrollo de software se aplican distintos tipos de Patrones (soluciones generalizadas) y entre los m\u00e1s renombrados encontramos los Patrones de Dise\u00f1o y los Patrones Arquitect\u00f3nicos.  Pero tambi\u00e9n existe un grupo de Patrones menos conocidos los cuales pueden ser utilizados en etapas tempranas, previas a la fase de Desarrollo, y se conocen como Patrones de Negocio*.</p> <p>La tendencia actual es lo que se denomina Desarrollo de Software Dirigido por Modelos (DSDM), o tambi\u00e9n MDD (Model Driven software Development). Desarrollo Dirigido por Modelos</p>"},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Modelado/#necesidad-y-costo-del-nivel-de-detalle","title":"Necesidad y costo del nivel de detalle","text":"<p>Un modelo es una abstracci\u00f3n. Cuanto m\u00e1s detallado el modelo, mejor se asemejar\u00e1 a la realidad. Se conoce m\u00e1s sobre el comportamiento del sistema de esta forma. Por otra parte, mucho detalle dificulta la comprensi\u00f3n de las soluciones propuestas a los requerimientos a satisfacer.</p> <p>Cuanta mayor envergadura tenga el sistema a construir, hay m\u00e1s probabilidades que se fracase si no se construye el modelo adecuado. Todos los sistemas \u00fatiles e interesantes tienen la tendencia natural de hacerse m\u00e1s complejos con el paso del tiempo.</p>"},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Modelado/#principios-del-modelado","title":"Principios del Modelado","text":"<p>En las disciplinas ingenieriles el uso del modelado tiene una larga y rica experiencia, la que sugiere cuatro principios b\u00e1sicos:     \u2022 La elecci\u00f3n del Modelo que se utilizar\u00e1 tendr\u00e1 una incidencia directa en la forma que tomar\u00e1 la soluci\u00f3n.     \u2022 Todo Modelo puede ser obtenido con diferentes grados de precisi\u00f3n (nivel de granularidad).      \u2022 Todo Modelo debe reflejar las caracter\u00edsticas esenciales de la realidad (Requisitos Funcionales).     \u2022 Un \u00fanico Modelo no es suficiente. Resulta m\u00e1s ventajoso disponer de un conjunto de diferentes perspectivas.</p>"},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Modelado/#uso-de-metodologias-en-el-modelado","title":"Uso de Metodolog\u00edas en el modelado","text":"<p>En el modelado, especialmente en el contexto de los sistemas de informaci\u00f3n, se emplean diversas metodolog\u00edas que buscan estructurar, representar y analizar la informaci\u00f3n de manera sistem\u00e1tica. Metodolog\u00edas de Modelado.</p>"},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Requerimientos/","title":"Requerimientos","text":"<p>Los requerimientos para un sistema son descripciones de lo que el sistema debe hacer: el servicio que ofrece y las restricciones en su operaci\u00f3n.</p> <p>De las muchas definiciones que existen para requerimiento, se presenta a continuaci\u00f3n la definici\u00f3n que aparece en el glosario de la IEEE STD-610:</p> <ul> <li>Una condici\u00f3n o necesidad de un usuario para resolver un problema o alcanzar un objetivo. </li> <li> <p>Una condici\u00f3n o capacidad que debe estar presente en un sistema para satisfacer un contrato, est\u00e1ndar, especificaci\u00f3n u otro documento formal. Los requerimientos de un sistema son definidos en las primeras etapas de desarrollo del mismo. En ocasiones pueden tomar la forma de restricciones sobre los procesos de desarrollo del sistema. (Subclasificaci\u00f3n de Requerimientos)</p> </li> <li> <p>Un requerimiento de software puede ser definido como una funcionalidad o capacidad del Software necesaria por el usuario para poder resolver un problema o alcanzar un objetivo.</p> </li> <li>Una caracter\u00edstica que debe incluirse en un nuevo Sistema.</li> </ul>"},{"location":"Patrones%20en%20la%20Construcci%C3%B3n%20de%20Modelos%20Conceptuales%20para%20Sistemas%20de%20Informaci%C3%B3n/Requerimientos/#caracteristicas-deseables","title":"Caracter\u00edsticas Deseables","text":"<p>A continuaci\u00f3n, se presentan las caracter\u00edsticas relevadas de diferentes autores que resultan m\u00e1s importantes, tomando como referencia lo publicado por Leue y Wiegers.</p> <ul> <li>NECESARIO: Su omisi\u00f3n provoca una deficiencia en el sistema a construir</li> <li>CORRECTO: Correcto si, y solo si, cada uno de los requerimientos cumple su funci\u00f3n dentro de las funcionalidades del Sistema.</li> <li>CONCISO: F\u00e1cil de leer y entender.</li> <li>COMPLETO: Con informaci\u00f3n suficiente para su comprensi\u00f3n.</li> <li>CONSISTENTE: No es contradictorio con otro requerimiento.</li> <li>NO AMBIGUO: Tiene una sola interpretaci\u00f3n, sin confusiones.</li> <li>VERIFICABLE: Puede ser cuantificado de manera que permita hacer uso de los siguientes m\u00e9todos de verificaci\u00f3n: inspecci\u00f3n, an\u00e1lisis, demostraci\u00f3n o pruebas.</li> <li>TRAZABLE: El origen es claro, conciso y f\u00e1cilmente referenciable.</li> <li>MODIFICABLE: Su estructura y estilo son tales que cualquier cambio necesario de efectuar puede ser realizado en forma f\u00e1cil.</li> </ul>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Clasificaci%C3%B3n%20de%20la%20Informaci%C3%B3n/","title":"Clasificaci\u00f3n de la Informaci\u00f3n","text":"<p>En contextos organizativos, militares, de inteligencia, o de gesti\u00f3n, la Informaci\u00f3n se categoriza seg\u00fan su prop\u00f3sito, nivel de detalle y horizonte temporal. </p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Clasificaci%C3%B3n%20de%20la%20Informaci%C3%B3n/#informacion-tecnica","title":"Informaci\u00f3n T\u00e9cnica","text":"<p>Es la informaci\u00f3n detallada, espec\u00edfica y operativa que se utiliza para realizar tareas concretas o resolver problemas espec\u00edficos. Se centra en el \"c\u00f3mo\" hacer algo.  Destinada a la toma de decisiones relacionadas con las actividades rutinarias de la empresa. - Horizonte temporal: Corto plazo, orientada a la ejecuci\u00f3n inmediata. - Usuarios: T\u00e9cnicos, operarios o personal de nivel operativo. - Finalidad: Facilitar la implementaci\u00f3n de procesos, procedimientos o actividades espec\u00edficas.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Clasificaci%C3%B3n%20de%20la%20Informaci%C3%B3n/#informacion-tactica","title":"Informaci\u00f3n T\u00e1ctica","text":"<p>Es la informaci\u00f3n que apoya la planificaci\u00f3n y ejecuci\u00f3n de acciones a mediano plazo, alineadas con objetivos espec\u00edficos dentro de un departamento o \u00e1rea. Se centra en el \"qu\u00e9\" y \"cu\u00e1ndo\" hacer. Destinada a la toma de decisiones relacionadas con la asignaci\u00f3n correcta de recursos disponibles para alcanzar los objetivos fijados a nivel estrat\u00e9gico. - Horizonte temporal: Mediano plazo (semanas, meses). - Usuarios: Mandos intermedios, gerentes de \u00e1rea o equipos de planificaci\u00f3n. - Finalidad: Coordinar recursos, optimizar procesos y alcanzar metas operativas dentro de un marco estrat\u00e9gico m\u00e1s amplio.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Clasificaci%C3%B3n%20de%20la%20Informaci%C3%B3n/#informacion-estrategica","title":"Informaci\u00f3n Estrat\u00e9gica","text":"<p>Es la informaci\u00f3n de alto nivel que se utiliza para definir los objetivos generales, la direcci\u00f3n y las pol\u00edticas de una organizaci\u00f3n a largo plazo. Se centra en el \"por qu\u00e9\" y \"hacia d\u00f3nde\" va la organizaci\u00f3n. Destinada a la toma de decisiones adoptadas por decisores en lo m\u00e1s alto jer\u00e1rquicamente o altos directivos de la organizaci\u00f3n. - Horizonte temporal: Largo plazo (a\u00f1os o d\u00e9cadas). - Usuarios: Alta direcci\u00f3n, ejecutivos o tomadores de decisiones estrat\u00e9gicas. - Finalidad: Definir metas, identificar oportunidades, mitigar riesgos y establecer el rumbo de la organizaci\u00f3n.</p> <p>La Informaci\u00f3n siempre tiene un prop\u00f3sito y es, en la mayor\u00eda de los casos, para la toma de decisiones, como vimos en cada tipo de informaci\u00f3n.  Adem\u00e1s, sabemos que los diferentes Tipos de Sistemas de Informaci\u00f3n generan esta informaci\u00f3n para distintos niveles de la organizaci\u00f3n, y es por esto que no ser\u00eda raro corresponder algunos de estos sistemas con la jerarqu\u00eda en la siguiente imagen. </p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Conocimiento/","title":"Conocimiento","text":"<p>La comprensi\u00f3n de un conjunto de Informaci\u00f3n y de las formas en que \u00e9sta puede convertirse en algo \u00fatil para realizar una tarea espec\u00edfica o tomar una decisi\u00f3n.</p> <p>Poseer conocimiento significa comprender las relaciones entre la informaci\u00f3n.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Dato/","title":"Dato","text":"<p>Hecho aislado.</p> <p>Representaci\u00f3n b\u00e1sica y sin procesar de hechos, eventos o valores, generalmente en forma de n\u00fameros, letras, s\u00edmbolos o se\u00f1ales.  - Es un elemento crudo que por s\u00ed solo no tiene significado ni contexto espec\u00edfico. N\u00famero de empleados, horas totales trabajadas a la semana o el n\u00famero de unidades fabricadas en una l\u00ednea de producci\u00f3n, son ejemplos de datos.</p> <p>Los datos representan cosas del mundo real. Por ejemplo, los hospitales y las organizaciones dedicadas al cuidado de la salud conservan los datos m\u00e9dicos de los pacientes, pues representan sus condiciones espec\u00edficas de salud.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Dato/#tipos-de-datos","title":"Tipos de Datos","text":"Datos Representados mediante Datos alfanum\u00e9ricos N\u00fameros, letras y otros caracteres Datos de audio Sonidos, ruidos y tonos Datos de im\u00e1genes Im\u00e1genes gr\u00e1ficas y fotos Datos de v\u00eddeo Im\u00e1genes en movimiento o fotograf\u00edas Los datos por lo general son utilizados para comprimir Informaci\u00f3n con la finalidad de facilitar el almacenamiento y su transmisi\u00f3n a otros dispositivos."},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Gesti%C3%B3n%20por%20Procesos/","title":"Gesti\u00f3n por Procesos","text":"<p>Dentro de las organizaciones, existen numerosos PROCESOS que funcionan de acuerdo a el o los objetivos del negocio en particular. Sin embargo, existen procesos que resultan comunes a la gesti\u00f3n integral de una organizaci\u00f3n: compras, ventas, administraci\u00f3n, entre otros.</p> <p>Gestionar integralmente cada uno de los procesos que tienen lugar en una organizaci\u00f3n constituye lo que se denomina gesti\u00f3n por procesos.</p> <p>%%ver \"Desempe\u00f1o de un Sistema\" (Sistema)%%</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Gesti%C3%B3n%20por%20Procesos/#como-hacer-la-gestion-eficiente","title":"\u00bfC\u00f3mo hacer la gesti\u00f3n Eficiente?","text":"<p>Para lograr una gesti\u00f3n de procesos eficiente es fundamental que todos los procesos de la organizaci\u00f3n sean identificados sabiendo que los procesos deben cumplir con determinadas caracter\u00edsticas: - Ser Horizontal. Que atraviese varias \u00e1reas, departamentos o funciones dentro de una organizaci\u00f3n, en lugar de estar limitado a una sola unidad funcional. - Que pueda ser definido. - Que tenga l\u00edmites que acoten adecuadamente su comienzo y su t\u00e9rmino. - Que puedan ser representados gr\u00e1ficamente. - Que sean medibles y controlables. - Que tengan un responsable a cargo.</p> <p>De esta forma, cuando ya sabemos c\u00f3mo identificar un proceso, podemos ordenarlos en diferentes grupos, de acuerdo a caracter\u00edsticas m\u00e1s espec\u00edficas (ver Tipos de Procesos). </p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Informaci%C3%B3n/","title":"Informaci\u00f3n","text":"<p>Conjunto de Datos organizados de tal manera que poseen un valor adicional m\u00e1s all\u00e1 del valor que se les puede atribuir como hechos individuales.</p> <ul> <li>Es el resultado de procesar, organizar o interpretar datos para darles un significado o utilidad dentro de un contexto espec\u00edfico.</li> <li>Una imagen etiquetada como \"foto de un atardecer\" es informaci\u00f3n.</li> <li>El conjunto de datos adecuadamente procesados, contribuyen a la toma de decisiones a la hora de resolver un problema, adem\u00e1s de incrementar el Conocimiento, en los usuarios que tienen acceso a dicha informaci\u00f3n.</li> <li>Tambi\u00e9n, reducen la incertidumbre de lo que no se conoce.</li> </ul>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Informaci%C3%B3n/#constituye-uno-de-los-recursos-mas-valiosos-de-una-organizacion","title":"Constituye uno de los recursos m\u00e1s valiosos de una organizaci\u00f3n","text":"<p>Un gerente de ventas podr\u00eda querer el resumen de las ventas individuales para conocer las ventas totales del mes. \u00bfPor qu\u00e9 lo del subt\u00edtulo?. La Calidad de una decisi\u00f3n depende de la calidad de la informaci\u00f3n utilizada para llegar a ella, y en una organizaci\u00f3n las decisiones a tomar abundan. El siguiente cuadro enlista las caracter\u00edsticas que hacen a una informaci\u00f3n de calidad. </p> Caracter\u00edsticas Definiciones Accesible Los usuarios autorizados deben poder acceder a la informaci\u00f3n de una manera f\u00e1cil. Exacta Cuando es exacta, la informaci\u00f3n est\u00e1 libre de errores. Completa La informaci\u00f3n completa contiene todos los hechos relevantes. Econ\u00f3mica El costo de la producci\u00f3n de la informaci\u00f3n debe ser relativamente barato. Flexible La informaci\u00f3n es flexible cuando puede utilizarse para una gran variedad de prop\u00f3sitos. Relevante Es relevante cuando es importante para las personas que toman las decisiones. Confiable Los usuarios pueden depender de la informaci\u00f3n confiable. Segura Se debe proteger el acceso a la informaci\u00f3n de los usuarios no autorizados. Simple La informaci\u00f3n debe establecerse en t\u00e9rminos simples, esto es, sin complicidades que enturbien su significado. Oportuna La informaci\u00f3n debe proporcionarse en el momento en que se necesita. Verificable Esto significa que usted podr\u00eda comprobarla con el fin de asegurarse de que es correcta, quiz\u00e1s mediante la consulta de la misma informaci\u00f3n en un gran n\u00famero de fuentes. **** ##### Clasificaci\u00f3n Es importante destacar que, tanto la informaci\u00f3n que se genera, como tambi\u00e9n la que se necesita en los distintos niveles de la organizaci\u00f3n, posee ciertas caracter\u00edsticas, como se sabe, la informaci\u00f3n se clasifica como t\u00e9cnica, t\u00e1ctica o estrat\u00e9gica seg\u00fan los mismos niveles definidos para las organizaciones, como podemos notar en el apartado de Clasificaci\u00f3n de la Informaci\u00f3n."},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Infraestructura%20Tecnol%C3%B3gica%20%28IT%29/","title":"Infraestructura Tecnol\u00f3gica (IT)","text":"<p>\"TI\" o \"IT\" significa Tecnolog\u00edas de la Informaci\u00f3n (en ingl\u00e9s, Information Technology).</p> <p>Se refiere al uso de computadoras, software, redes y otros dispositivos para almacenar, procesar, transmitir y proteger Informaci\u00f3n, es decir, para gestionar, operar y mantener los Sistema de Informaci\u00f3n.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Informaci%C3%B3n/","title":"Sistema de Informaci\u00f3n","text":"<p>Conjunto de componentes interrelacionados que re\u00fanen, procesan, almacenan y distribuyen Datos e Informaci\u00f3n y proporcionan un mecanismo de retroalimentaci\u00f3n para cumplir un objetivo.</p> <ul> <li>Este objetivo del SI, es una descripci\u00f3n breve y resumida de las gestiones o suma de todas las funciones o requisitos que se convertir\u00e1n en las caracter\u00edsticas del producto final.</li> </ul> <p>Los Sistemas de Informaci\u00f3n generalmente distribuyen informaci\u00f3n que apoya la toma de decisiones y operaciones en una organizaci\u00f3n. Ejemplos son los sistemas ERP, CRM, entre otros. </p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Informaci%C3%B3n/#entrada","title":"Entrada","text":"<p>En los Sistemas de Informaci\u00f3n, la entrada se define como la actividad que consiste en recopilar y capturar datos del entorno, o de un usuario.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Informaci%C3%B3n/#procesamiento","title":"Procesamiento","text":"<p>La conversi\u00f3n de datos en informaci\u00f3n es un PROCESO. En este contexto, este procesamiento significa transformar los datos en salidas \u00fatiles. - El procesamiento puede involucrar la realizaci\u00f3n de c\u00e1lculos, la comparaci\u00f3n de datos, la toma de acciones alternas y el almacenamiento de datos para su futuro uso. - Puede hacerse en forma manual o con la ayuda de una computadora.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Informaci%C3%B3n/#salida","title":"Salida","text":"<p>Es el resultado del procesamiento, presentado en un formato comprensible, como reportes, gr\u00e1ficos o alertas. Por ejemplo, un informe de ganancias generado para el gerente.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Informaci%C3%B3n/#retroalimentacion","title":"Retroalimentaci\u00f3n","text":"<p>Es la devoluci\u00f3n de informaci\u00f3n al sistema o a los usuarios para ajustar o mejorar el proceso. Por ejemplo, si un reporte muestra errores, se retroalimenta al sistema para corregir los datos de entrada. </p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Informaci%C3%B3n/#sistemas-de-informacion-manuales-y-computarizados","title":"Sistemas de Informaci\u00f3n Manuales y Computarizados","text":"<p>Un sistema de informaci\u00f3n puede ser manual o computarizado. - Manual. Ciertos analistas de inversiones dibujan manualmente gr\u00e1ficas y l\u00edneas de tendencias con el fin de ayudarse en la toma de decisiones de inversiones. Este ejemplo, cumple con lo descrito anteriormente respecto a sistemas de informaci\u00f3n, y sin embargo no hay ning\u00fan tipo de intervenci\u00f3n de Infraestructura Tecnol\u00f3gica (IT), como es el caso de los sistemas de informaci\u00f3n computarizados.</p> <ul> <li>Computarizados. El Sistema de Informaci\u00f3n basado en Computadora (CBIS), es un conjunto \u00fanico de hardware, Software, bases de datos, telecomunicaciones, personas y PROCESOS que se configura con el fin de recabar, manipular, almacenar y procesar datos para convertirlos en informaci\u00f3n.  Se adjunta imagen de los componentes de un CBIS. Los CBIS son muy importantes hist\u00f3ricamente, ya que representan los Tipos de Sistemas de Informaci\u00f3n m\u00e1s comunes y utilizados con el paso del tiempo. </li> </ul>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Planificaci%C3%B3n%20de%20Recursos%20%28ERP%29/","title":"Sistema de Planificaci\u00f3n de Recursos (ERP)","text":"<p>Los Sistemas de Informaci\u00f3n Empresariales en general, ayudan a las organizaciones a realizar e integrar tareas importantes como, el pago a proveedores y empleados, el control del inventario, el env\u00edo de facturas y la solicitud de suministros. En la actualidad, estas tareas son realizadas a trav\u00e9s del uso de sistemas de planeaci\u00f3n de recursos empresariales.</p> <ul> <li> <p>Conjunto de programas integrados que administran las operaciones de negocios vitales de toda una organizaci\u00f3n (procesos clave en Tipos de Procesos). Administran finanzas, recursos humanos, producci\u00f3n, ventas, compras, log\u00edstica e inventarios, en una \u00fanica plataforma centralizada.</p> </li> <li> <p>La mayor\u00eda, en un principio, proporcionaba software integrado para dar soporte a la manufactura y a las finanzas:</p> <ul> <li>En dicho ambiente se prepara un pron\u00f3stico que calcula la demanda del cliente durante varias semanas. Luego el sistema comprueba la disponibilidad de productos en el inventario de mercanc\u00edas terminadas para poder cumplir con la demanda proyectada.</li> <li>Suelen incluir un subsistema de adquisiciones que genera una orden de compra de los art\u00edculos que se necesitan, a la hora de la producci\u00f3n.</li> </ul> </li> <li> <p>Interfaz de usuario. Dashboards y reportes personalizables para usuarios de distintos niveles.</p> </li> <li>Infraestructura: Puede ser local, en la nube o h\u00edbrida.  En la actualidad, la nube domina el mercado, con soluciones como SAP S/4HANA, Microsoft Dynamics 365 y Oracle Fusion Cloud.</li> </ul>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Soporte%20a%20la%20Toma%20de%20Decisiones%20%28DSS%29/","title":"Sistema de Soporte a la Toma de Decisiones (DSS)","text":"<p>Entre los a\u00f1os 70 y 80, los adelantos en tecnolog\u00eda permitieron el dise\u00f1o de sistemas de informaci\u00f3n menos costosos y m\u00e1s poderosos que los anteriores: los empleados comenzaron a usar computadoras personales para distintas tareas, y ya no depend\u00edan \u00fanicamente del departamento de sistemas de informaci\u00f3n para lo que tuvieran que hacer. Pronto el personal descubri\u00f3 que los sistemas de c\u00f3mputo pod\u00edan ser de ayuda en la toma de decisiones.</p> <p> Este tipo de sistema: - Es una herramienta para realizar el an\u00e1lisis de las diferentes variables de negocio/an\u00e1lisis de Datos con la finalidad de apoyar el proceso de toma de decisiones. - Permite modelar datos, realizar simulaciones y analizar escenarios (por ejemplo, \"qu\u00e9 pasar\u00eda si\"), por lo menos en la actualidad. - Se enfoca en tomar decisiones eficientes, mientras que un MIS sirve de ayuda para que la organizaci\u00f3n \"haga las cosas correctamente\". El DSS es m\u00e1s \u00fatil que un MIS convencional, debido a que ofrece ayuda inmediata para la resoluci\u00f3n de problemas, los cuales son \u00fanicos y complejos, y cuya informaci\u00f3n a menudo es dif\u00edcil de obtener a trav\u00e9s de un reporte predefinido. Esta ayuda inmediata que ofrecen aporta interactividad en tiempo real al usuario. - Ayuda a los administradores a \"hacer lo  correcto\". El objetivo general es brindar soporte, m\u00e1s que reemplazar la toma de decisiones administrativa. - Tambi\u00e9n puede brindar ayuda a los clientes.  - Ejemplo. Simulaci\u00f3n de estrategias de mercado.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema%20de%20Soporte%20a%20la%20Toma%20de%20Decisiones%20%28DSS%29/#posibles-elementos-de-un-dss","title":"Posibles Elementos de un DSS","text":"<p>Hay ciertos componentes esenciales en un DSS:  - Un DSS puede estar formado por un grupo de modelos (financieros, estad\u00edsticos, de simulaci\u00f3n) que se utilizan para brindar soporte a la persona que toma las decisiones y a los usuarios (base de modelos);  - Un conjunto de hechos e informaci\u00f3n para ayudar a la toma de decisiones (base de datos),  - Y un sistema y procedimientos (interfaz de usuario) que permite a quienes toman las decisiones y a otros usuarios interaccionar con el DSS. A menudo el DSS se emplea para administrar la base de datos (se conoce como DBMS, Sistema de administraci\u00f3n de bases de datos) y la base de modelo, es decir, el Sistema de administraci\u00f3n de modelos (MMS).</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema/","title":"Sistema","text":"<p>Conjunto de elementos o componentes que interact\u00faan para alcanzar un objetivo. </p> <ul> <li>Se trata de un todo organizado en el cual cada parte tiene una funci\u00f3n espec\u00edfica y depende de las otras partes para cumplir con las metas del sistema.</li> <li>Los componentes son las partes o elementos que forman el sistema, pueden incluir componentes f\u00edsicos, procesos, personas, datos o software.</li> <li>Interrelaci\u00f3n. Estos componentes est\u00e1n conectados y su funcionamiento afecta al conjunto.</li> <li>Objetivo. El sistema tiene un prop\u00f3sito definido.</li> <li>Entorno. El contexto externo en el que opera, que puede influir en su comportamiento.</li> <li> <p>L\u00edmites. Fronteras que separan el sistema de su entorno. Definen qu\u00e9 elementos pertenecen al sistema y cu\u00e1les son externos. Es una frontera conceptual o f\u00edsica que separa el sistema de su entorno.</p> </li> <li> <ul> <li>Sistema cerrado: Tiene l\u00edmites bien definidos y no intercambia informaci\u00f3n o recursos con el entorno.</li> </ul> </li> <li> <p>Sistema abierto: Interact\u00faa con su entorno y puede recibir entradas y generar salidas que afectan el entorno o que se ven influenciadas por \u00e9l.</p> </li> </ul>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema/#estructura","title":"Estructura","text":"<p>Los sistemas tienen entradas, mecanismos de procesamiento, salidas y retroalimentaci\u00f3n. Entradas (Input): Son los recursos o datos que el sistema recibe del entorno o de otros sistemas para procesarlos y transformarlos. PROCESOS: Son las actividades, transformaciones o acciones que el sistema lleva a cabo con las entradas para generar un resultado. Salidas (Output): Son los resultados generados por el sistema despu\u00e9s de procesar las entradas. Retroalimentaci\u00f3n (Feedback): Es el proceso en el cual el sistema eval\u00faa sus salidas para realizar ajustes o modificaciones en el proceso para mejorar la eficiencia o cumplir con los objetivos del sistema.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema/#alcance-de-un-sistema","title":"Alcance de un sistema","text":"<p>El alcance de un sistema son las actividades (o funciones) que cumplen los elementos del sistema para alcanzar un objetivo. Define la magnitud y los l\u00edmites de las actividades que el sistema abarca.  - Para referirse al alcance de un sistema se suelen listar estas actividades, donde cada actividad se identifica con un verbo en infinitivo. Esta lista debe abarcar el cumplimiento total del objetivo del sistema.  - Se centran en qu\u00e9 forma parte del sistema y sus interacciones.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema/#objetivo-de-un-sistema","title":"Objetivo de un sistema","text":"<p>El objetivo es el prop\u00f3sito o meta que el sistema busca alcanzar. Es la raz\u00f3n de ser del sistema y gu\u00eda su dise\u00f1o y funcionamiento. Por ejemplo: - En un sistema educativo, el objetivo puede ser \"formar estudiantes competentes\". Este objetivo a menudo, puede definirse simplemente como un Est\u00e1ndar de desempe\u00f1o del sistema.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistema/#desempeno-de-un-sistema","title":"Desempe\u00f1o de un Sistema","text":"<p>Este puede medirse seg\u00fan eficacia y eficiencia. Eficiencia. Mide qu\u00e9 se produce dividido entre qu\u00e9 se consume. Es decir, c\u00f3mo se logran los resultados. Es la relaci\u00f3n entre los recursos (como tiempo, dinero, esfuerzo, energ\u00eda, etc.) utilizados y los resultados obtenidos.</p> <p>Eficacia. Mide qu\u00e9 tan bien un sistema cumple con sus objetivos o metas. Un sistema es eficaz cuando logra lo que se propone, sin importar los recursos que haya utilizado para hacerlo.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistemas%20de%20Informaci%C3%B3n%20Empresariales/","title":"Sistemas de Informaci\u00f3n Empresariales","text":"<p>El tipo m\u00e1s com\u00fan de Sistema de Informaci\u00f3n.</p> <p>Aquellos que se utilizan en las organizaciones de negocios, dise\u00f1ados para realizar Comercio Electr\u00f3nico (e-commerce) y Comercio M\u00f3vil (m-commerce), procesar transacciones, administrar la Informaci\u00f3n y dar soporte a las decisiones de la empresa.</p> <ul> <li>Ayudan al personal a llevar a cabo tareas rutinarias y especiales, desde registrar las ventas, procesar la n\u00f3mina y dar soporte a las decisiones de diferentes departamentos, hasta establecer alternativas para Proyectos a gran escala y oportunidades.</li> <li>Conjunto integrado de herramientas, tecnolog\u00edas, procesos y datos dise\u00f1ados para recopilar, procesar, almacenar y distribuir informaci\u00f3n relevante dentro de una organizaci\u00f3n.</li> </ul> <p>A menudo, los sistemas de informaci\u00f3n de las empresas est\u00e1n integrados en un solo producto y pueden formar parte del mismo paquete de Software, por ello es que en la siguiente imagen se los considera la base de la pir\u00e1mide, permitiendo el desarrollo de las secciones m\u00e1s altas:  La punta de la pir\u00e1mide se refiere a Sistemas de prop\u00f3sito espec\u00edfico utilizado por empresas, por ejemplo, realidad virtual.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistemas%20de%20Informaci%C3%B3n%20Empresariales/#comercio-electronico-e-commerce","title":"Comercio Electr\u00f3nico (e-commerce)","text":"<p>Involucra cualquier transacci\u00f3n de negocios que se lleva a cabo de manera electr\u00f3nica entre empresas (negocio a negocio, B2B), entre compa\u00f1\u00edas y consumidores (negocio a consumidor, B2C), entre consumidor a consumidor (C2C), entre negocios y el sector p\u00fablico, y entre consumidores y el sector p\u00fablico. - Se refiere a la compra y venta de bienes y servicios a trav\u00e9s de internet, utilizando cualquier dispositivo conectado, como computadoras, laptops, tablets o smartphones, generalmente a trav\u00e9s de sitios web o plataformas en l\u00ednea.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Sistemas%20de%20Informaci%C3%B3n%20Empresariales/#comercio-movil-m-commerce","title":"Comercio M\u00f3vil (m-commerce)","text":"<p>Refiere a la realizaci\u00f3n de transacciones en cualquier parte del mundo y en cualquier momento, se basa en las comunicaciones inal\u00e1mbricas que los administradores y las corporaciones utilizan para colocar \u00f3rdenes de compra y operar sus negocios mediante el uso de computadoras port\u00e1tiles, tel\u00e9fonos m\u00f3viles, computadoras laptop conectadas a una red y otros dispositivos m\u00f3viles. - Es un subconjunto del e-commerce que se centra espec\u00edficamente en las transacciones realizadas a trav\u00e9s de dispositivos m\u00f3viles, como smartphones y tablets, utilizando aplicaciones m\u00f3viles o sitios web optimizados para m\u00f3viles.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Procesos/","title":"Tipos de Procesos","text":"<p>Vamos a clasificarlos en tres tipos.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Procesos/#procesos-claves","title":"PROCESOS Claves","text":"<p>Responsables de desarrollar el producto o servicio que entrega la organizaci\u00f3n bajo estudio. Son fundamentales ya que tienen un impacto directo en la creaci\u00f3n de valor para los clientes/usuarios de la organizaci\u00f3n. - Se trata de los procesos operativos, propios de la compa\u00f1\u00eda. - Identificamos el proceso de producci\u00f3n, comercializaci\u00f3n y venta, o de prestaci\u00f3n de servicio.     - Para el proceso de producci\u00f3n se incluyen las actividades/fases de realizar los presupuestos a clientes, tomar pedidos a clientes, la gesti\u00f3n de la salida de productos, emisi\u00f3n de facturas. Estos son ejemplos para reflejar que cada punto es fundamental para que todo siga su curso normal, y de eso se tratan los procesos clave.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Procesos/#procesos-estrategicos","title":"PROCESOS Estrat\u00e9gicos","text":"<p>Aquellos dedicados al dise\u00f1o y la planificaci\u00f3n de las estrategias y los objetivos de la compa\u00f1\u00eda.  Se incluyen los procesos de planificaci\u00f3n presupuestaria o el proceso de dise\u00f1o de producto.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Procesos/#procesos-de-apoyo","title":"PROCESOS de Apoyo","text":"<p>Aquellos que entregan el soporte necesario para que los procesos claves se lleven a cabo.  Buscan proporcionar recursos (monetarios, humanos, entre otros). Podr\u00edan ser: - Proceso de formaci\u00f3n, inform\u00e1tico, o de log\u00edstica.     - El ciclo de pedido incluye las fases de recepci\u00f3n, preparaci\u00f3n, almacenamiento, picking (recolectar productos del almac\u00e9n), embalaje, env\u00edos.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Sistemas%20de%20Informaci%C3%B3n/","title":"Tipos de Sistemas de Informaci\u00f3n","text":"<p>Vamos a hacer un recorrido por la historia de los primeros sistemas de informaci\u00f3n que surgieron. Para ello, debemos reconocer primeramente los Sistemas de Informaci\u00f3n Empresariales, con los que clasificaremos a todos los sistemas de informaci\u00f3n de este apartado.</p> <p></p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Sistemas%20de%20Informaci%C3%B3n/#sistema-de-procesamiento-de-transacciones-tps","title":"Sistema de Procesamiento de Transacciones (TPS)","text":"<ul> <li>Una transacci\u00f3n es cualquier intercambio relacionado con la empresa, como pagos a los empleados, ventas a los clientes o pagos a los proveedores.</li> </ul> <p>Desde la d\u00e9cada de 1950, las computadoras se han utilizado para realizar operaciones de negocios comunes. Un gran n\u00famero de estos sistemas tradicionales se dise\u00f1\u00f3 para reducir costos mediante la automatizaci\u00f3n de las transacciones comerciales rutinarias y que implicaban mucha mano de obra.</p> <p>As\u00ed, surgen los sistemas de informaci\u00f3n del subt\u00edtulo. - Lograban la automatizaci\u00f3n de procesos operativos diarios dentro de una organizaci\u00f3n.  - Su funci\u00f3n primordial consist\u00eda en procesar transacciones, y registrarlas, ofreciendo los datos datos transaccionales brutos. - Procesar pagos, cobros, p\u00f3lizas, entradas, salidas, entre otras. - Ejemplo. Registro de una venta en caja.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Sistemas%20de%20Informaci%C3%B3n/#sistema-de-informacion-administrativa-mis","title":"Sistema de Informaci\u00f3n Administrativa (MIS)","text":"<p>Los MIS se desarrollaron en la d\u00e9cada de 1960 y por lo general se alimentan de datos provenientes de un TPS para generar reportes gerenciales. Estos reportes generados sirven de soporte para los departamentos de marketing, producci\u00f3n, finanzas, otras \u00e1reas funcionales y est\u00e1n enlazados a trav\u00e9s de una base de datos com\u00fan:  En resumen, el sistema: - Es un conjunto organizado de personas, procedimientos, software, bases de datos y dispositivos que proporcionan informaci\u00f3n rutinaria a los administradores y a las personas que toman decisiones. - Se enfoca en la eficiencia operativa (Sistema). - Orientados a solucionar problemas empresariales en general (apunte te\u00f3rico). - Ejemplo. Reporte mensual de ventas.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Sistemas%20de%20Informaci%C3%B3n/#sistema-de-soporte-a-la-toma-de-decisiones-dss","title":"Sistema de Soporte a la Toma de Decisiones (DSS)","text":""},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Sistemas%20de%20Informaci%C3%B3n/#sistema-de-informacion-ejecutiva-eis","title":"Sistema de Informaci\u00f3n Ejecutiva (EIS)","text":"<p>Adem\u00e1s de los DSS para uso de los gerentes, existen otros sistemas que utilizan el mismo enfoque para brindar soporte a grupos y a ejecutivos. Entre ellos est\u00e1 el del subt\u00edtulo, el cual - Es una herramienta orientada a usuarios de nivel gerencial, que permite monitorizar el estado de las variables de un \u00e1rea o unidad de la empresa a partir de informaci\u00f3n interna y externa a la misma. - Ayuda a la c\u00fapula administrativa a tomar mejores decisiones, la cual incluye al presidente de la firma, vicepresidentes y miembros del consejo directivo. - Se centra en informaci\u00f3n de alto nivel para decisiones a largo plazo, como expansi\u00f3n de mercados, inversiones o reestructuraciones. - Suele permitir a los ejecutivos configurar los indicadores clave de desempe\u00f1o (KPIs) relevantes para sus objetivos. Este sistema es de gran ayuda en los procesos de planeaci\u00f3n estrat\u00e9gica, organizaci\u00f3n y contrataci\u00f3n de personal de alto nivel, control estrat\u00e9gico y administraci\u00f3n de crisis.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Sistemas%20de%20Informaci%C3%B3n/#sistema-de-automatizacion-de-oficinas-oas","title":"Sistema de Automatizaci\u00f3n de Oficinas (OAS)","text":"<p>Tipo de sistema de informaci\u00f3n empresarial dise\u00f1ado para automatizar y optimizar las tareas administrativas y de oficina. - Estos sistemas integran tecnolog\u00edas, software y hardware para facilitar actividades rutinarias, como el env\u00edo de correos electr\u00f3nicos, procesamiento de documentos, la comunicaci\u00f3n interna, la gesti\u00f3n de datos, la programaci\u00f3n de reuniones. - Dirigido principalmente a personal de oficina, como secretarios, asistentes y administradores, aunque tambi\u00e9n lo usan gerentes. - Ejemplo. Quiz\u00e1 el paquete de software m\u00e1s popular que puede ajustarse a la definici\u00f3n de\u00a0OAS sea\u00a0Microsoft Office en cualquiera de sus versiones.  - Otros ejemplos para herramientas de colaboraci\u00f3n y de correo podr\u00edan ser Microsoft Teams y Microsoft Outlook, Gmail.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Sistemas%20de%20Informaci%C3%B3n/#sistemas-expertos-se","title":"Sistemas Expertos (SE)","text":"<p>Mejor conocidos como sistemas de inteligencia artificial, se basan en utilizar la experiencia y el conocimiento para analizar variables y hallar una soluci\u00f3n a un problema dado. - Emulan el Conocimiento y la capacidad de razonamiento de un experto humano en un dominio espec\u00edfico. - Est\u00e1 dise\u00f1ado para resolver problemas complejos o tomar decisiones en \u00e1reas especializadas, utilizando reglas, l\u00f3gica y bases de conocimiento para proporcionar soluciones o recomendaciones precisas. - La base de conocimiento de un SE es el conjunto de datos, reglas, procedimientos y relaciones que deban seguirse para obtener el valor o la respuesta esperada. El valor exclusivo de estos sistemas radica en que permiten que las organizaciones puedan capturar y utilizar la sabidur\u00eda de peritos y especialistas. - Ejemplos. Se utilizan para supervisar reactores nucleares, elaborar diagn\u00f3sticos m\u00e9dicos, ubicar posibles problemas de reparaci\u00f3n, desarrollar planes de marketing para un nuevo producto o estrategia de inversi\u00f3n, entre otros usos.</p>"},{"location":"Principios%20de%20Sistemas%20de%20Informaci%C3%B3n%20-%20Ralph%20Stair%20y%20George%20Reynolds/Tipos%20de%20Sistemas%20de%20Informaci%C3%B3n/#sistema-de-planificacion-de-recursos-erp","title":"Sistema de Planificaci\u00f3n de Recursos (ERP)","text":""},{"location":"R.%20Pressman/Agilidad/","title":"Agilidad","text":"<p>La agilidad se refiere a la capacidad de producir partes completas de un producto en cortos periodos de tiempo.  Lo que permite respuestas r\u00e1pidas a cambios en los Requerimientos del cliente o del mercado.</p>"},{"location":"R.%20Pressman/Agilidad/#manifiesto-agil-valores","title":"Manifiesto \u00c1gil. Valores","text":"<p>En 2001, Kent Beck y otros 16 notables desarrolladores de software, escritores y consultores (grupo conocido como la \u201cAlianza \u00c1gil\u201d) se reunieron y firmaron el \u201cManifiesto por el desarrollo \u00e1gil de software\u201d. En \u00e9l se establec\u00eda lo siguiente:</p> <p>\"Estamos descubriendo formas mejores de desarrollar software, por medio de hacerlo y de dar ayuda a otros para que lo hagan. Ese trabajo nos ha hecho valorar:  1. Los individuos y sus interacciones, sobre los procesos y las herramientas  2. El software que funciona, m\u00e1s que la documentaci\u00f3n exhaustiva  3. La colaboraci\u00f3n con el cliente, y no tanto la negociaci\u00f3n del contrato  4. Responder al cambio, mejor que apegarse a un plan\"</p> <p>Los Modelos \u00c1giles se desarrollaron como un esfuerzo por superar las debilidades reales y percibidas de la Ingenier\u00eda del Software convencional, es decir, de la gesti\u00f3n predictiva (fruto de la Revoluci\u00f3n Industrial) y como alternativa a las metodolog\u00edas formales, a las que consideraban excesivamente \"pesadas\" y r\u00edgidas por su fuerte dependencia de planificaciones. Estos nuevos m\u00e9todos no son aplicables a todos los Proyectos, personas y situaciones. No es la contraparte de la pr\u00e1ctica de la ingenier\u00eda de software s\u00f3lida y puede aplicarse como filosof\u00eda general para todo el trabajo de software.</p>"},{"location":"R.%20Pressman/Agilidad/#el-cambio","title":"El Cambio","text":"<p>Es frecuente que en la econom\u00eda moderna sea dif\u00edcil o imposible predecir la forma en la que evolucionar\u00e1 un sistema basado en computadora.  Se debe ser suficientemente \u00e1gil para responder a lo fluido que se presenta el ambiente de negocios. La fluidez implica cambio, y el cambio es caro, en particular si es descontrolado o si se administra mal, o si se da en etapas tard\u00edas del proyecto.  Una de las caracter\u00edsticas m\u00e1s atractivas del enfoque \u00e1gil es su capacidad de reducir los costos del cambio durante el proceso del software.</p> <ul> <li>ADAPTACI\u00d3N CONTINUA antes que ANTICIPACI\u00d3N</li> </ul>"},{"location":"R.%20Pressman/Agilidad/#desarrollo-agil","title":"Desarrollo \u00c1gil","text":"<p>Este desarrollo de software es fundamentado por la filosof\u00eda de la agilidad, la cual: - Pone el \u00e9nfasis en la entrega r\u00e1pida de software funcional e incremental y resta importancia a los productos intermedios del trabajo (lo que no siempre es bueno) - Recomienda las estructuras de equipo y las actitudes que hacen m\u00e1s f\u00e1cil la comunicaci\u00f3n; adopta al cliente como parte del equipo de desarrollo y reconoce que la planeaci\u00f3n en un mundo incierto tiene sus l\u00edmites y que un plan de proyecto debe ser flexible. - Promueve la maximizaci\u00f3n del valor (un producto es valioso no solo por su impacto inicial, sino tambi\u00e9n por su capacidad de adaptaci\u00f3n y evoluci\u00f3n mediante actualizaciones y mejoras continuas). - Hace que el proceso se adapte a las necesidades de las personas y del equipo, no al rev\u00e9s.</p>"},{"location":"R.%20Pressman/Agilidad/#el-proceso-agil","title":"El PROCESO \u00c1gil","text":"<ul> <li>Suposiciones del desarrollo:     Cualquier proceso del software \u00e1gil se caracteriza por la forma en la que aborda cierto n\u00famero de suposiciones clave:<ol> <li>Es dif\u00edcil predecir qu\u00e9 requerimientos de software persistir\u00e1n y cu\u00e1les cambiar\u00e1n. </li> <li>Para muchos tipos de software, los dise\u00f1os se prueban a medida que se crean.</li> <li>El an\u00e1lisis, el dise\u00f1o, la construcci\u00f3n y las pruebas no son tan predecibles como nos gustar\u00eda.</li> </ol> </li> </ul> <p>Dadas estas tres suposiciones, surge una pregunta importante: \u00bfC\u00f3mo crear un PROCESO que pueda manejar lo impredecible?, la respuesta esta en la adaptabilidad del proceso: un proceso \u00e1gil debe ser adaptarse incrementalmente. Para esto, un equipo \u00e1gil requiere retroalimentaci\u00f3n con el cliente.</p>"},{"location":"R.%20Pressman/Agilidad/#principios-de-la-agilidad","title":"PRINCIPIOS de la Agilidad","text":"<p>La Alianza \u00c1gil define, adem\u00e1s de los cuatro postulados que vimos, 12 principios de agilidad para aquellos que la quieran alcanzar:</p> <p></p>"},{"location":"R.%20Pressman/Calidad/","title":"Calidad","text":"<p>En la d\u00e9cada de 1990, las principales corporaciones reconocieron que cada a\u00f1o se desperdiciaban miles de millones de d\u00f3lares en software que no ten\u00eda las caracter\u00edsticas ni la funcionalidad que se hab\u00edan prometido.</p>"},{"location":"R.%20Pressman/Calidad/#como-se-define-la-calidad-del-software","title":"\u00bfC\u00f3mo se define la calidad del software?","text":"<p>En el sentido m\u00e1s general se define como:  Proceso eficaz de software que se aplica de manera que crea un producto \u00fatil que proporciona valor medible a quienes lo producen y a quienes lo utilizan.</p> <p>El proceso eficaz hace referencia a las pr\u00e1cticas de ingenier\u00eda de software permiten al desarrollador analizar el problema y dise\u00f1ar una soluci\u00f3n s\u00f3lida. Un producto \u00fatil entrega contenido y funciones que el usuario final desea, de forma confiable y libre de errores. El software de calidad requiere un menor esfuerzo de mantenimiento, esto agrega valor para la organizaci\u00f3n que lo elabora.</p>"},{"location":"R.%20Pressman/Calidad/#grado-vs-calidad-pmbok","title":"GRADO vs. CALIDAD (PMBOK)","text":"<p>EL PMBOK, nos brinda otro concepto para la calidad desde una vista m\u00e1s orientada a la gesti\u00f3n de la calidad en proyectos: La calidad entregada como resultado es \u201cel grado en que un conjunto de caracter\u00edsticas inherentes cumple con los requisitos\u201d.  El grado es una categor\u00eda que se asigna a entregables que tienen el mismo uso funcional pero caracter\u00edsticas t\u00e9cnicas diferentes.     \u2022 Si un producto de software de bajo grado (con un n\u00famero limitado de funcionalidades) es de alta calidad (sin defectos apreciables, con manual legible) puede no constituir un problema. En este ejemplo, el producto ser\u00eda adecuado para un uso general.     \u2022 Si un producto software de alto grado (con numerosas funcionalidades) es de baja calidad (numerosos defectos, documentaci\u00f3n de usuario desorganizada) puede constituir un problema. En esencia, su conjunto de funcionalidades de alto grado probar\u00eda ser ineficaz y/o ineficiente debido a su bajo nivel de calidad.</p> <p>Vemos que el factor com\u00fan que deriva de estas definiciones es la satisfacci\u00f3n del usuario en cuanto a sus necesidades y expectativas. En esencia, un software de alta calidad es aquel que opera sin errores significativos, es f\u00e1cil de usar, se adapta a cambios futuros y entrega valor.</p>"},{"location":"R.%20Pressman/Calidad/#factores-de-la-calidad","title":"Factores de la calidad","text":"<p>Una clasificaci\u00f3n \u00fatil de los factores que afectan la calidad del software se ilustran en la figura:      Se centran en tres aspectos importantes del producto de software: sus caracter\u00edsticas operativas, su capacidad de ser modificado (Revisi\u00f3n del producto) y su adaptabilidad a nuevos ambientes (Transici\u00f3n del producto).</p> <p>Las dimensiones de la calidad presentadas se centran en el software como un todo y pueden utilizarse como indicaci\u00f3n general de la calidad de una aplicaci\u00f3n. Pero si hilamos m\u00e1s fino a la hora de evaluar dichos factores, necesitaremos atributos m\u00e1s espec\u00edficos y medibles, los cuales no cubrir\u00e9 en el apartado, y que no son m\u00e9tricas reales de la calidad del software, sino m\u00e1s bien una manifestaci\u00f3n de ella (sin relaci\u00f3n de causalidad).</p>"},{"location":"R.%20Pressman/Calidad/#costo-de-la-calidad","title":"Costo de la calidad","text":"<p>El costo de la calidad incluye todos los costos en los que se ha incurrido durante la vida del producto a trav\u00e9s de inversiones para prevenir el incumplimiento de los requisitos, para la evaluaci\u00f3n del producto con los requisitos, y para el retrabajo por incumplimiento de requisitos.       Los costos por calidad deficiente se clasifican a menudo en internos (constatados por el equipo del proyecto) y externos (constatados por el cliente). La imagen detalla los costos, para evitar fallas por un lado, y costos provocados por las fallas por el otro.</p> <p>Vemos que podemos enmarcar los costos enunciados como implicaciones, tanto de una buena calidad del producto, como de una mala calidad del mismo. Otra implicaci\u00f3n segura de la mala calidad del software es el aumento de Riesgos durante el desarrollo, tanto para el desarrollador como para el usuario final.</p>"},{"location":"R.%20Pressman/Calidad/#herramientas-de-la-calidad","title":"Herramientas de la Calidad","text":"<p>Utilizadas para resolver problemas relacionados con la calidad. (p 266 de PMBOK, queria mencionar por lo menos el de espinas pescado)</p>"},{"location":"R.%20Pressman/Enfoque%20Orientado%20a%20Objetos/","title":"Enfoque Orientado a Objetos","text":"<p>Un enfoque orientado a objetos en el desarrollo de Software es un paradigma de programaci\u00f3n que organiza el c\u00f3digo en torno a \"objetos\" en lugar de funciones o procedimientos.</p> <p>Para entender el punto de vista orientado a objeto, considere un ejemplo de un objeto del mundo real: el objeto sobre el cual se sienta en este momento, una silla. <code>Silla</code> es una subclase de una clase mucho m\u00e1s grande que puede llamar <code>PiezaDeMobiliario</code>. Las sillas individuales son miembros (por lo general llamadas instancias) de la clase <code>Silla</code>. Un conjunto de atributos gen\u00e9ricos pueden asociarse con cada objeto en la clase <code>PiezaDeMobiliario</code>. Puesto que <code>Silla</code> es miembro de <code>PiezaDeMobiliario</code>, <code>Silla</code> hereda todos los atributos definidos para la clase. Se busca una definici\u00f3n anecd\u00f3tica de una clase al describir sus atributos, pero algo falta. Todo objeto de la clase <code>PiezaDeMobiliario</code> puede manipularse de varias formas, a trav\u00e9s de operaciones. Cada una de estas operaciones (otros t\u00e9rminos son servicios o m\u00e9todos) modificar\u00e1n uno o m\u00e1s atributos del objeto.</p> <p>La clase <code>Silla</code> (y todos los objetos en general) encapsulan datos (los valores de atributo que definen la silla), operaciones (las acciones que se aplican para cambiar los atributos de silla), otros objetos, constantes (valores de conjunto) y otra informaci\u00f3n relacionada. Encapsulaci\u00f3n significa que toda esta informaci\u00f3n se empaca/clasifica (Clasificador) bajo un nombre y puede reutilizarse como un Componente de especificaci\u00f3n o programa. Adem\u00e1s, puede existir otro objeto, instancia de una clase <code>Cliente</code> con distintos atributos y una operaci\u00f3n <code>comprar(Silla silla)</code> que como podemos darnos cuenta, se encarga de comprar una silla. Es necesario que el cliente elija un objeto silla en particular para poder realizar la compra, y de esta forma, ambos objetos <code>Silla</code> y <code>Cliente</code> se comuniquen entre s\u00ed a trav\u00e9s de lo que se conoce como Mensaje. Entonces, podr\u00edamos decir lo siguiente:$$\\text{Orientado a objeto}=\\text{objetos + clasificaci\u00f3n + herencia + comunicaci\u00f3n}$$</p>"},{"location":"R.%20Pressman/Estrategias%20para%20Manejar%20el%20Cambio/","title":"Estrategias para Manejar el Cambio","text":"<p>Los Flujos de Proceso deben ser capaces de adaptarse a cambios, ya que los requisitos del software a menudo evolucionan. Sommerville sugiere dos estrategias: - Evitar el cambio: Usar t\u00e9cnicas como el prototipado para anticipar y validar requisitos antes de que se produzcan cambios costosos. - Tolerar el cambio: Dise\u00f1ar procesos para cambios de bajo costo, como el desarrollo incremental, que permite ajustes en cada iteraci\u00f3n.</p> <p></p>"},{"location":"R.%20Pressman/Estrategias%20para%20Manejar%20el%20Cambio/#controversias","title":"Controversias","text":"<p>Son muchas las controversias que surgen de la utilizaci\u00f3n de un enfoque u otro, esto se refleja en discusiones en foros acad\u00e9micos y profesionales. De esto ha surgido el concepto de \"code hacked\", que no es un t\u00e9rmino t\u00e9cnico oficial, pero se puede interpretar como una referencia a una pr\u00e1ctica o situaci\u00f3n en la que el c\u00f3digo se desarrolla de manera r\u00e1pida, desordenada o sin seguir las mejores pr\u00e1cticas, a menudo como resultado de una mala aplicaci\u00f3n de los principios \u00e1giles. </p> <p>Karl Wiegers, un ingeniero de software con un enfoque tradicional pero pragm\u00e1tico, en su art\u00edculo License to Hack (AgileConnection, 2001), describe c\u00f3mo algunos desarrolladores, al adoptar metodolog\u00edas \u00e1giles como XP (que ganaron popularidad tras la publicaci\u00f3n del Manifesto for Agile Software Development) fueron interpretadas err\u00f3neamente: se confunde la falta de documentaci\u00f3n extensa como una invitaci\u00f3n a abandonar buenas pr\u00e1cticas de ingenier\u00eda de software, sin planificaci\u00f3n ni dise\u00f1o.</p>"},{"location":"R.%20Pressman/Estrategias%20para%20Manejar%20el%20Cambio/#enfoques-adicionales","title":"Enfoques adicionales","text":"<p>Si bien estos no son modelos de proceso, son paradigmas de desarrollo que pueden integrarse en diferentes modelos de proceso: - Ingenier\u00eda de componentes: Pressman describe este enfoque como un flujo de proceso centrado en integrar componentes loosely-coupled (d\u00e9bilmente acoplados, que tienen m\u00ednimas dependencias entre si) y reutilizables, reduciendo tiempo y mejorando calidad. - M\u00e9todos formales: Sommerville menciona que los m\u00e9todos formales usan notaci\u00f3n matem\u00e1tica para especificar y verificar software, comunes en sistemas cr\u00edticos. Son t\u00e9cnicas matem\u00e1ticamente rigurosas utilizadas para especificar, desarrollar y verificar sistemas de software y hardware. Su objetivo es garantizar la correcci\u00f3n y confiabilidad. Incluyen lenguajes como Z, VDM o TLA+, y herramientas como SPIN o Coq, que facilitan la verificaci\u00f3n formal. Requieren un alto nivel de expertise en matem\u00e1ticas y l\u00f3gica, lo que puede ser una barrera de entrada. - Programaci\u00f3n orientada a aspectos: Ambos autores coinciden en que es un paradigma que ayuda a manejar preocupaciones transversales, como seguridad o logging, y separarlas del c\u00f3digo principal para que no se entrelazen con la l\u00f3gica de negocio. </p>"},{"location":"R.%20Pressman/Flujos%20de%20Proceso/","title":"Flujos de Proceso","text":""},{"location":"R.%20Pressman/Flujos%20de%20Proceso/#procesos-en-ingenieria-de-software-perspectiva-general","title":"Procesos en ingenier\u00eda de software. Perspectiva general","text":"<p>En la ingenier\u00eda de software, los flujos de proceso se definen como la serie coordinada de actividades, acciones y tareas para desarrollar un sistema de software.</p> <p>Los flujos de proceso se representan a trav\u00e9s de Modelos de PROCESO, cada uno con caracter\u00edsticas espec\u00edficas.  Es una serie de pasos que se atraviesan junto a un equipo para lograr un objetivo. La visualizaci\u00f3n de los flujos de procesos puede ayudar a develar redundancias, tareas repetitivas o cuellos de botella. Se adjunta imagen de un ejemplo de un flujo de proceso o diagrama de flujo/actividad, la cual ser\u00e1 descrita m\u00e1s abajo.</p>"},{"location":"R.%20Pressman/Flujos%20de%20Proceso/#importancia-y-flexibilidad","title":"Importancia y Flexibilidad","text":"<p>En t\u00e9rminos de lo que ser\u00eda ideal para el desarrollo, se suele enfatizar por distintas fuentes que los flujos de proceso deben ser flexibles y adaptables, especialmente en entornos donde los requisitos cambian. Y usando estrategias como el prototipado para anticipar necesidades o desarrollo incremental para reducir costos de modificaci\u00f3n. La mejora continua, como el modelo CMMI, ayuda a optimizar procesos. </p>"},{"location":"R.%20Pressman/Ingenier%C3%ADa%20del%20Software/","title":"Ingenier\u00eda del Software","text":"<p>La ingenier\u00eda de Software es el establecimiento y uso de principios fundamentales de la ingenier\u00eda con objeto de desarrollar en forma econ\u00f3mica software que sea confiable y que trabaje con eficiencia en m\u00e1quinas reales.</p> <p>Es:  1. La aplicaci\u00f3n de un enfoque sistem\u00e1tico, disciplinado y cuantificable al desarrollo, operaci\u00f3n y mantenimiento de software; es decir, la aplicaci\u00f3n de la ingenier\u00eda al software. Y a su vez...  2. El estudio de enfoques seg\u00fan el punto 1.</p>"},{"location":"R.%20Pressman/Ingenier%C3%ADa%20del%20Software/#capas","title":"Capas","text":"<p>La ingenier\u00eda de software es una tecnolog\u00eda con varias capas.  La ingenier\u00eda de software incluye un PROCESO, m\u00e9todos y herramientas para administrar y hacer ingenier\u00eda con el software.</p>"},{"location":"R.%20Pressman/Ingenier%C3%ADa%20del%20Software/#compromiso-con-la-calidad","title":"Compromiso con la Calidad","text":"<p>El fundamento en el que se apoya la ingenier\u00eda de software es el compromiso con la Calidad. Aunque las herramientas parecen lo m\u00e1s visible, Pressman enfatiza que la calidad es la ra\u00edz de todo, guiando las otras capas. Incluye atributos de calidad como confiabilidad, eficiencia, mantenibilidad, usabilidad y seguridad. Podemos definir la calidad como el cumplimiento de los requisitos especificados y las expectativas de los usuarios.</p>"},{"location":"R.%20Pressman/Ingenier%C3%ADa%20del%20Software/#metodos","title":"M\u00e9todos","text":"<p>Son las t\u00e9cnicas espec\u00edficas dentro del modelo de proceso seleccionado, como usar diagramas UML para dise\u00f1ar, pruebas unitarias para verificar el c\u00f3digo, TDD (Desarrollo Guiado por Pruebas), entre otros.  Proporcionan la experiencia t\u00e9cnica para elaborar software, e incluyen tareas como:     Comunicaci\u00f3n, An\u00e1lisis de requerimientos, Modelaci\u00f3n del Dise\u00f1o, Construcci\u00f3n del programa, Pruebas y Apoyo. Est\u00e1n basados en un conjunto de principios fundamentales que gobiernan cada \u00e1rea de la tecnolog\u00eda. Son las \"herramientas conceptuales\" que los ingenieros de software utilizan para realizar su trabajo.</p>"},{"location":"R.%20Pressman/Ingenier%C3%ADa%20del%20Software/#herramientas","title":"Herramientas","text":"<p>Proporcionan un apoyo automatizado o SEMI automatizado para el proceso y los m\u00e9todos. Herramientas para los m\u00e9todos. Incluyen programas que ayudan, como Git para controlar versiones, Jira para gestionar tareas o JUnit para pruebas autom\u00e1ticas, o incluso IDEs.</p> Capa Descripci\u00f3n Ejemplo Enfoque en la Calidad Base que asegura calidad (confiabilidad, usabilidad) Definir tiempos de respuesta r\u00e1pidos Proceso Marco para el desarrollo (Agile, Waterfall) Elegir Scrum para iteraciones cortas M\u00e9todos T\u00e9cnicas espec\u00edficas (TDD, dise\u00f1o UML) Usar pruebas unitarias para verificar Herramientas Soporte t\u00e9cnico (Git, Jira, Selenium) Usar Git para control de versiones **** #### Otros Enfoques Aunque Pressman describe estas cuatro capas espec\u00edficas, otros autores y modelos de arquitectura de software tambi\u00e9n utilizan conceptos de \"capas\" o \"niveles\", pero con diferentes enfoques: - En la arquitectura de software, se habla de \"arquitectura en capas\" (n-tier architecture), que divide el sistema en capas como presentaci\u00f3n, l\u00f3gica de negocio y datos. Esto es diferente de las capas de Pressman, que se centran en el proceso de ingenier\u00eda de software en lugar de la arquitectura del producto final."},{"location":"R.%20Pressman/Modelo%20Concurrente/","title":"Modelo Concurrente","text":"<p>Permite que varias actividades (dise\u00f1o, codificaci\u00f3n, pruebas) ocurran simult\u00e1neamente, ajust\u00e1ndose seg\u00fan el estado del Proyecto. </p> <p>Supongamos que tenemos la actividad de Modelado, la cual se logra por medio de las siguientes acciones: hacer prototipos, an\u00e1lisis y dise\u00f1o.  Esta actividad puede estar en cualquiera de los estados de la imagen.</p> <p></p> <p>De esta forma, este modelo define una Red del proceso: - Cada actividad existe en simultaneo con las dem\u00e1s. Los eventos generados en cierto punto de la red del proceso desencadenan transiciones entre los estados. Por ejemplo, la actividad de comunicaci\u00f3n (no se muestra en la figura) termina su primera iteraci\u00f3n al principio de un proyecto y existe en el estado de cambios en espera. La actividad de modelado (que exist\u00eda en estado inactivo mientras conclu\u00eda la comunicaci\u00f3n inicial, ahora hace una transici\u00f3n al estado en desarrollo. Sin embargo, si el cliente indica que deben hacerse cambios en los Requerimientos, la actividad de modelado pasa del estado en desarrollo al de cambios en espera.</p>"},{"location":"R.%20Pressman/Modelos%20de%20PROCESO/","title":"Modelos de PROCESO","text":""},{"location":"R.%20Pressman/Modelos%20de%20PROCESO/#modelos-de-proceso-prescriptivos","title":"Modelos de Proceso Prescriptivos","text":"<p>Propuestos originalmente para poner orden en el caos del desarrollo de software. Definen un conjunto prescrito de elementos del proceso y un flujo predecible para el trabajo del proceso. - Modelo en Cascada:     - Fases secuenciales (Requisitos \u2192 Dise\u00f1o \u2192 Implementaci\u00f3n \u2192 Pruebas \u2192 Mantenimiento). Toma las Actividades Fundamentales para la Ingenier\u00eda de Software y, luego, las representa como fases separadas del proceso.     - No permite volver atr\u00e1s f\u00e1cilmente. No permite flexibilidad en los cambios. Presupone que el producto est\u00e1 perfectamente definido antes de iniciar el desarrollo.     - \u00datil cuando los requisitos son bien conocidos desde el inicio.     - Paradigma m\u00e1s antiguo de la ingenier\u00eda del software.     - Con frecuencia, la naturaleza lineal del ciclo de vida cl\u00e1sico llega a \"estados de bloqueo\". Por lo que miembros del equipo deben esperar a otros para terminar tareas dependientes.     - \u00datil en situaciones en las que los requerimientos son fijos y el trabajo avanza en forma lineal hacia el final.  - Modelo V:     - Variante del modelo en cascada donde cada fase de desarrollo tiene su fase de prueba correspondiente.     - Refuerza la validaci\u00f3n y verificaci\u00f3n en cada etapa.      -      - (Imagen del libro de testing y mencionado en A note on the 'V-model')</p>"},{"location":"R.%20Pressman/Modelos%20de%20PROCESO/#modelos-de-proceso-evolutivo","title":"Modelos de Proceso Evolutivo","text":"<p>Es frecuente que los requerimientos del negocio y del producto cambien conforme avanza el desarrollo, lo que hace que no sea realista trazar una trayectoria rectil\u00ednea hacia el producto final. Los modelos evolutivos son iterativos. Se caracterizan por la manera en la que permiten desarrollar versiones cada vez m\u00e1s completas del software:</p> <ul> <li>Modelo Incremental:<ul> <li>Desarrollo en m\u00f3dulos o versiones sucesivas.</li> <li>Cada incremento agrega funcionalidad.</li> <li>Combina elementos de los flujos de proceso lineal y paralelo</li> <li>Permite recibir retroalimentaci\u00f3n temprana.</li> <li>Es com\u00fan que el primer incremento sea el producto fundamental. El cliente usa el producto y como resultado de su evaluaci\u00f3n, se desarrolla un plan para el incremento que sigue, el cual puede incluir modificaciones al producto.</li> <li>El proceso se repite hasta terminar el producto final.</li> <li></li> </ul> </li> <li>Paradigma de Prototipos / Modelo Prototipado Evolutivo:<ul> <li>Es frecuente que un cliente defina un conjunto de objetivos generales para el software, pero que no identifique los requerimientos detallados para las funciones y caracter\u00edsticas. </li> <li>El dise\u00f1o r\u00e1pido lleva a la construcci\u00f3n de un prototipo. Este se entrega y es evaluado por los participantes, que dan retroalimentaci\u00f3n para mejorar los requerimientos. </li> <li>Es posible hacer prototipos como un modelo de proceso aislado, pero es m\u00e1s com\u00fan usarlo como una t\u00e9cnica que puede implementarse en el contexto de cualquiera de los modelos de proceso     -  -***Aunque algunos prototipos se construyen para ser \u201cdesechables\u201d, otros son evolutivos; es decir, poco a poco se transforman en el sistema real.   -Aunque puede haber problemas, hacer prototipos es un paradigma eficaz para la ingenier\u00eda de software. La clave es definir desde el principio las reglas del juego; es decir, todos los participantes deben estar de acuerdo en que el prototipo sirva como el mecanismo para definir los requerimientos. </li> </ul> </li> <li>Modelo en Espiral:<ul> <li>Basado en iteraciones haciendo \u00e9nfasis en la reducci\u00f3n del riesgo con cada una.</li> <li>Se acopla el hacer prototipos con aspectos controlados del modelo de cascada. Se repiten las actividades predefinidas.</li> <li>Se realizan ciclos de planificaci\u00f3n, an\u00e1lisis de Riesgos, desarrollo y evaluaci\u00f3n.</li> <li>En cada paso evolutivo se marcan puntos de referencia: una combinaci\u00f3n de productos del trabajo con las condiciones en las que se encuentra dicho incremento. Cada vuelta representa una fase del proyecto con an\u00e1lisis de riesgos integrado.</li> <li></li> <li>El costo y programaci\u00f3n de actividades se ajustan en base a la retroalimentaci\u00f3n del cliente despu\u00e9s de la entrega.</li> <li>El gerente del proyecto puede ajustar el n\u00famero planeado de iteraciones que se requieren para terminar el software. Incluso el modelo puede adaptarse para ser aplicado a lo largo de toda la vida del software.</li> <li>Es dif\u00edcil convencer a los clientes de que este enfoque es controlable. Demanda mucha experiencia en la evaluaci\u00f3n del riesgo y se basa en ella para llegar al \u00e9xito.</li> <li>A diferencia del modelo incremental (que tiene como objetivo la entrega r\u00e1pida de incrementos), el modelo en espiral se enfoca en la identificaci\u00f3n y minimizaci\u00f3n previa de Riesgos en cada ciclo. En el modelo incremental, por otro lado, la gesti\u00f3n del riesgo se hace de forma reactiva, y no suele ser tan costoso como el espiral, el cual requiere un prototipado constante.</li> </ul> </li> </ul> Caracter\u00edstica Modelo Incremental \ud83d\ude80 Modelo de Prototipos \ud83c\udfad Objetivo Construcci\u00f3n por partes funcionales del producto final. Crear un modelo funcional para validar requisitos. Foco principal Agregar funcionalidades gradualmente. Probar ideas y conceptos antes del desarrollo final. Producto final Se obtiene tras varias versiones incrementales. Puede ser descartado o refinado en una nueva versi\u00f3n. Utilidad Ideal cuando se conocen bien los requisitos. \u00datil cuando los requisitos no est\u00e1n bien definidos. ##### Modelos \u00c1giles Priorizan la flexibilidad, la colaboraci\u00f3n y entregas frecuentes, adapt\u00e1ndose a cambios constantes mediante iteraciones cortas. Modelos \u00c1giles **** ##### M\u00e9todos Tradicionales Vs. \u00c1giles Los modelos prescriptivos y evolutivos podr\u00edan ser agrupados en lo que se llamar\u00edan Metodolog\u00edas Tradicionales, mientras que los Modelos \u00c1giles se autoreferencian por s\u00ed solos. Se enuncian algunas diferencias: ******** ##### Al Borde del Caos La historia indica que estos modelos tradicionales han dado cierta estructura \u00fatil al trabajo de ingenier\u00eda de software. Sin embargo, el trabajo de ingenier\u00eda de software y el producto que genera siguen \u201cal borde del caos\u201d. <p>[!Nogueira y sus colegas!] Borde del Caos \u201cel estado natural, inestable y parcialmente estructurado entre el orden y el caos.\u201d Es inestable debido a que se ve atra\u00eddo constantemente hacia el caos o hacia el orden absoluto.</p> <p>Si los modelos de proceso prescriptivo buscan generar estructura y orden, \u00bfSon inapropiados para el mundo del software, que se basa en el cambio?. Pero si rechazamos los modelos de proceso tradicional (y el orden que implican) y los reemplazamos con algo menos estructurado, \u00bfHacemos imposible la coordinaci\u00f3n y coherencia en el trabajo de software?. Es dif\u00edcil responder, pero existen alternativas disponibles...  Modelo Concurrente, podr\u00eda ser un ejemplo simple.</p>"},{"location":"R.%20Pressman/Modelos%20%C3%81giles/","title":"Modelos \u00c1giles","text":""},{"location":"R.%20Pressman/Modelos%20%C3%81giles/#programacion-extrema-xp","title":"Programacion Extrema (XP)","text":""},{"location":"R.%20Pressman/Modelos%20%C3%81giles/#lean-startup","title":"Lean Startup","text":"<p>La premisa b\u00e1sica de Lean Startup es la de que una startup no es una empresa sino una organizaci\u00f3n temporal cuyo objetivo es encontrar un modelo de negocio viable y escalable mediante una serie de experimentos que sirven para aprender, y todo esto rodeado de una gran incertidumbre.</p> <ul> <li>El n\u00facleo de Lean es eliminar todo lo que no agrega valor al cliente final, optimizando procesos y enfoc\u00e1ndose en la eficiencia y la Calidad. </li> <li>De esta forma, el modelo describe el M\u00ednimo Producto Viable (MVP) como una versi\u00f3n del producto que permite al equipo recolectar la m\u00e1xima cantidad de aprendizaje validado sobre los clientes con el menor esfuerzo.  Ciclo de Aprendizaje Lean Startup cambia el cl\u00e1sico ciclo de desarrollo por el novedoso ciclo de aprendizaje, que se basa en 3 fases: </li> <li>Construir. Desarrollamos nuestro MVP centrado en las hip\u00f3tesis que queremos comprobar. </li> <li>Medir. Establecemos una serie de m\u00e9tricas con las que valorar nuestro experimento. Recopilar datos sobre c\u00f3mo los usuarios interact\u00faan con el MVP seg\u00fan estas m\u00e9tricas.</li> <li>Aprender. Gracias a las m\u00e9tricas obtenemos informaci\u00f3n con la que aprenderemos nuevos detalles de nuestro negocio para seguir mejorando.</li> </ul> <p>Perseverar o Pivotar Este ciclo es iterativo, es decir, para cada hip\u00f3tesis que queremos comprobar debemos crear un nuevo MVP, o una modificaci\u00f3n al anterior, y lanzarlo para seguir aprendiendo. Despu\u00e9s de obtener la retroalimentaci\u00f3n del MVP, una startup debe decidir si sigue en la misma direcci\u00f3n (perseverar) o si cambia su enfoque (pivotar), bas\u00e1ndose en los aprendizajes obtenidos.</p>"},{"location":"R.%20Pressman/Modelos%20%C3%81giles/#kanban","title":"Kanban","text":"<p>El t\u00e9rmino \"Kanban\" es japon\u00e9s y literalmente significa \"cartel\" o \"tarjeta visual\". Originalmente, en la industria manufacturera japonesa (principalmente en Toyota), Kanban era un sistema para gestionar el flujo de materiales en la producci\u00f3n. A trav\u00e9s de tarjetas f\u00edsicas que se usaban para indicar cu\u00e1ndo un material deb\u00eda ser reabastecido o cu\u00e1ndo deb\u00edan fabricarse m\u00e1s productos.</p> <p>Kanban es una metodolog\u00eda \u00e1gil que se basa en el control visual del trabajo a trav\u00e9s de Tableros Kanban y en la gesti\u00f3n del flujo de tareas.  - En lugar de utilizar sprints fijos (como en Scrum), Kanban se enfoca en el flujo continuo de trabajo, es decir, las tareas se van completando a medida que van avanzando en el proceso de trabajo, sin necesidad de iteraciones definidas. El ciclo comienza con la visualizaci\u00f3n del trabajo en un tablero Kanban. A medida que las tareas se mueven de una columna a otra, el equipo observa y ajusta c\u00f3mo fluye el trabajo. Este proceso permite identificar cuellos de botella en el sistema.     Si una columna est\u00e1 demasiado llena mientras que otras est\u00e1n vac\u00edas, esto indica que hay un cuello de botella en la fase del proceso correspondiente a la columna. El equipo puede intervenir para resolver el problema, ya sea reasignando recursos, optimizando procesos o eliminando bloqueos.</p>"},{"location":"R.%20Pressman/Modelos%20%C3%81giles/#scrum","title":"Scrum","text":""},{"location":"R.%20Pressman/PROCESO/","title":"PROCESO","text":"<p>Conjunto de tareas relacionadas de manera l\u00f3gica que se llevan a cabo con el fin de obtener un resultado determinado.</p> <p>Es la estructura que debe establecerse o seguirse para la obtenci\u00f3n eficaz de la tecnolog\u00eda. Establece el contexto y pasos en el que se aplican m\u00e9todos t\u00e9cnicos y se generan productos del Trabajo. Es un conjunto de actividades, acciones y tareas que se ejecutan cuando va a crearse alg\u00fan producto del trabajo.     Actividad: busca lograr un objetivo amplio (por ejemplo, comunicaci\u00f3n con los participantes)     Acci\u00f3n: conjunto de tareas que producen un producto importante del trabajo (por ejemplo, un modelo del dise\u00f1o de la arquitectura).     Tarea: se centra en un objetivo m\u00e1s peque\u00f1o pero bien definido (por ejemplo, realizar una prueba unitaria) que produce un resultado tangible. La jerarqu\u00eda del trabajo t\u00e9cnico dentro del proceso del software es: actividades, acciones que contiene y tareas constituyentes.</p>"},{"location":"R.%20Pressman/PROCESO/#tener-en-cuenta","title":"Tener en cuenta","text":"<p>Un proceso NO es una prescripci\u00f3n r\u00edgida de c\u00f3mo elaborar software de c\u00f3mputo.  M\u00e1s bien es un enfoque ADAPTABLE* para el equipo de software.</p>"},{"location":"R.%20Pressman/Programacion%20Extrema%20%28XP%29/","title":"Programacion Extrema (XP)","text":"<p>El enfoque m\u00e1s utilizado del desarrollo de software \u00e1gil. </p> <p>Aunque las primeras actividades con las ideas y los m\u00e9todos asociados a XP ocurrieron al final de la d\u00e9cada de 1980, el trabajo fundamental sobre la materia hab\u00eda sido escrito por Kent Beck. </p> <p> Beck define un conjunto de cinco valores que establecen los fundamentos para todo trabajo realizado como parte de XP: - Comunicaci\u00f3n. Colaboraci\u00f3n estrecha pero informal entre clientes y desarrolladores. - Simplicidad. Dise\u00f1o de necesidades inmediatas, y no las del futuro. Si es necesario refactorizar, se har\u00e1 m\u00e1s adelante. - Retroalimentaci\u00f3n.  - Valent\u00eda para dise\u00f1ar para hoy y reconocer que los Requerimientos futuros tal vez cambien mucho. - Respeto. Conforme a los participantes y al proceso.</p> <p>Este modelo usa un Enfoque Orientado a Objetos como paradigma de desarrollo, y engloba cuatro actividades estructurales.</p>"},{"location":"R.%20Pressman/Programacion%20Extrema%20%28XP%29/#planeacion-juego-de-planeacion","title":"Planeaci\u00f3n (Juego de Planeaci\u00f3n)","text":"<ul> <li>Los clientes escriben Historias de Usuario y les asignan un valor de prioridad. Luego, los miembros del equipo eval\u00faan cada historia y le asignan un costo, medido en semanas de desarrollo. Se puede pedir al cliente que descomponga la historia en m\u00e1s chicas. En cualquier momento es posible escribir o modificar nuevas historias.</li> <li>Los clientes y desarrolladores trabajan juntos para decidir c\u00f3mo agrupar las historias en el siguiente incremento a desarrollar.</li> <li>Se llega a un compromiso sobre la entrega, y cuando esta ocurre se calcula la velocidad del Proyecto y se planifican pr\u00f3ximas entregas en base a la velocidad.</li> </ul>"},{"location":"R.%20Pressman/Programacion%20Extrema%20%28XP%29/#diseno","title":"Dise\u00f1o","text":"<ul> <li>XP estimula el uso de tarjetas CRC (tarjetas que representan Clases cada una, sus responsabilidades y colaboradores {Colaboraci\u00f3n}, donde los colaboradores son otras clases con las que interact\u00faa la clase de la tarjeta) para pensar en el software orientado a objetos.</li> <li>Si en el dise\u00f1o de una historia se encuentra un problema de dise\u00f1o dif\u00edcil, XP recomienda la creaci\u00f3n inmediata de un prototipo para esa porci\u00f3n del dise\u00f1o. Esto se conoce como soluci\u00f3n en punta.</li> <li>Debido a que esta etapa de dise\u00f1o genera pocos productos del trabajo que no sean tarjetas CRC o soluciones en punta, el dise\u00f1o es visto como un Artefacto en construcci\u00f3n que puede y debe modificarse continuamente a medida que avanza la construcci\u00f3n.</li> </ul>"},{"location":"R.%20Pressman/Programacion%20Extrema%20%28XP%29/#codificacion","title":"Codificaci\u00f3n","text":"<ul> <li>No se comienza a construir el producto sin antes realizar Pruebas Unitarias a cada una de las historias que se van a incluir en el incremento.</li> <li>Una vez creada la prueba unitaria, el desarrollador est\u00e1 mejor capacitado para centrarse en lo que debe implementarse para pasar la prueba. No se agrega nada extra\u00f1o, siguiendo el valor de la simplicidad.</li> <li>XP recomienda que dos personas trabajen juntas en una estaci\u00f3n de trabajo con el objeto de crear c\u00f3digo para una historia, esto es la programaci\u00f3n por parejas. \"Dos cabezas piensan mejor que una\".</li> <li>A medida que las parejas terminan su trabajo, este se integra con el de los dem\u00e1s, ayudando a evitar los problemas de compatibilidad e interfaces.</li> </ul>"},{"location":"R.%20Pressman/Programacion%20Extrema%20%28XP%29/#pruebas","title":"Pruebas","text":"<ul> <li>Las pruebas unitarias que se crean deben implementarse con el uso de una estructura que permita automatizarlas (Pruebas Automatizadas). Esto estimula una estrategia de pruebas de regresi\u00f3n (Enfoques de Testing) siempre que se modifique el c\u00f3digo. \"Corregir peque\u00f1os problemas cada cierto n\u00famero de horas toma menos tiempo que resolver problemas enormes justo antes del plazo final.\".</li> <li>Las Pruebas de Aceptaci\u00f3n XP, son especificadas por el cliente y derivan de las historias de usuario ya implementadas.</li> </ul>"},{"location":"R.%20Pressman/Revisi%C3%B3n%20T%C3%A9cnica/","title":"Revisi\u00f3n T\u00e9cnica","text":"<p>%%cap 15 r pressman%% Las revisiones del software son un \u201cfiltro\u201d para el proceso del software. Es decir, se aplican en varios puntos durante la ingenier\u00eda de software y sirven para descubrir errores y defectos a fin de poder eliminarlos. Lo ideal ser\u00eda el descubrimiento temprano de los errores, de modo que no se propaguen a la siguiente etapa.</p> <p>En el contexto del proceso de software, los t\u00e9rminos Error, Defecto y Fallo: implican un problema de Calidad descubierto despu\u00e9s de haberse liberado el software a los usuarios finales .</p> <p>Como parte de la ingenier\u00eda de software, pueden realizarse muchos diferentes tipos de revisiones. Una reuni\u00f3n informal alrededor de la m\u00e1quina del caf\u00e9 es una forma de revisi\u00f3n si se analizan problemas t\u00e9cnicos, por ejemplo.</p>"},{"location":"R.%20Pressman/Revisi%C3%B3n%20T%C3%A9cnica/#revision-tecnica-en-requerimientos","title":"Revisi\u00f3n T\u00e9cnica en Requerimientos","text":"<p>Se pueden definir muchas m\u00e9tricas para las revisiones t\u00e9cnicas, este conjunto relativamente peque\u00f1o da una perspectiva \u00fatil. Aunque pueden ser aplicables no solamente a la revisi\u00f3n de requerimientos, el ejemplo ser\u00e1 para la revisi\u00f3n de un modelo de requerimientos. Las m\u00e9tricas son: - Esfuerzo de Preparaci\u00f3n. $E_p$: esfuerzo (en horas-hombre) requerido para revisar un producto del trabajo. - Esfuerzo de Evaluaci\u00f3n. $E_a$: esfuerzo requerido (en horas-hombre) que se dedica a la revisi\u00f3n real. - Esfuerzo de la Repetici\u00f3n. $E_r$: esfuerzo (en horas-hombre) que se dedica a la correcci\u00f3n de los errores descubiertos durante la revisi\u00f3n. - Tama\u00f1o del producto del trabajo, $\\text{TPT}$. medici\u00f3n del tama\u00f1o del producto del trabajo que se ha revisado (por ejemplo, n\u00famero de modelos UML o n\u00famero de p\u00e1ginas de documento o de l\u00edneas de c\u00f3digo). - Errores menores detectados. $Err_{menores}$: n\u00famero de errores detectados que requieren menos de alg\u00fan esfuerzo especificado para corregirse. - Errores mayores detectados. $Err_{mayores}$: n\u00famero de errores detectados que requieren m\u00e1s que alg\u00fan esfuerzo especificado para corregirse. Luego, el esfuerzo total de revisi\u00f3n y el n\u00famero total de errores descubiertos es$$ E_{revisi\u00f3n} = E_p + E_a + E_r  \\space $$ $$Err_{tot} = Err_{menores} + Err_{mayores}$$ Lo que se hace con estas m\u00e9tricas es b\u00e1sicamente calcular la densidad del error, que est\u00e1 dada por: $$\\text{Densidad del error} = \\frac{Err_{tot}}{TPT}$$Una vez recabados los datos para muchas revisiones efectuadas en muchos proyectos, los valores promedio de la densidad del error permiten estimar el n\u00famero de errores por hallar en un nuevo documento (a\u00fan no revisado). Si la densidad promedio de error para un modelo de requerimientos es de $0.6$ errores por p\u00e1gina, y un nuevo modelo de requerimientos tiene una longitud de $32$ p\u00e1ginas, una estimaci\u00f3n gruesa sugiere que el equipo de software encontrar\u00e1 alrededor de $19$ o $20$ errores durante la revisi\u00f3n del documento.</p>"},{"location":"R.%20Pressman/Revisi%C3%B3n%20T%C3%A9cnica/#revisiones-informales","title":"Revisiones Informales","text":"<p>Las revisiones informales incluyen una simple verificaci\u00f3n de escritorio de un trabajo de ingenier\u00eda de software, hecha con alg\u00fan colega, o una reuni\u00f3n casual con objeto de revisar un producto o aspectos orientados a la revisi\u00f3n de programaci\u00f3n por pares. La eficacia de tales revisiones es mucho menor que la de los enfoques m\u00e1s formales. Pero una verificaci\u00f3n de escritorio sencilla descubre errores que de otro modo se propagar\u00edan en el proceso del software.</p>"},{"location":"R.%20Pressman/Revisi%C3%B3n%20T%C3%A9cnica/#revisiones-tecnicas-formales","title":"Revisiones T\u00e9cnicas Formales","text":"<p>Actividad del control de calidad del software realizada por ingenieros de software. Se busca descubrir errores en funcionamiento, l\u00f3gica o implementaci\u00f3n, verificar que el software cumpla los requerimientos, garantizar que el software est\u00e1 representado de acuerdo con est\u00e1ndares predefinidos y hacer proyectos m\u00e1s manejables.</p> <p>Sin importar cu\u00e1l formato de RTF se elija, cualquiera de ellos debe cumplir las restricciones siguientes:  \u2022 En la revisi\u00f3n deben involucrarse de tres a cinco personas (normalmente).  \u2022 Debe haber preparaci\u00f3n previa, pero no debe exigir m\u00e1s de dos horas de trabajo de cada persona.  \u2022 La duraci\u00f3n de la reuni\u00f3n de revisi\u00f3n debe ser de al menos dos horas.</p> <p>Se centra en una parte espec\u00edfica (y peque\u00f1a) del software general. El desarrollador del producto informa al l\u00edder del proyecto que ha terminado y que se requiere hacer una revisi\u00f3n. El l\u00edder del proyecto contacta al l\u00edder de la revisi\u00f3n, este genera copias del producto y las distribuye a dos o tres revisores para la preparaci\u00f3n previa. Se espera que cada revisor dedique de una a dos horas a la inspecci\u00f3n del producto, tome notas y se familiarice con el trabajo. Al mismo tiempo, el l\u00edder del proyecto tambi\u00e9n revisa el producto y establece una agenda para la reuni\u00f3n de revisi\u00f3n. A la reuni\u00f3n de revisi\u00f3n acuden el l\u00edder de \u00e9sta, todos los revisores y el desarrollador. En esta reuni\u00f3n se \"recorre\" el producto del trabajo, mientras los revisores hacen sus comentarios. Se toma nota de los errores descubiertos.  Al terminar, todos deciden si aceptan el producto, lo rechazan debido a errores graves (y una vez corregido se vuelve a hacer otra revisi\u00f3n) o aceptan el producto de forma provisional (se encontraron errores menores que deben corregirse, pero no es necesaria otra revisi\u00f3n).  Una vez tomada la decisi\u00f3n, los asistentes firman el acta que indica su participaci\u00f3n y su acuerdo con los descubrimientos del equipo de revisi\u00f3n.</p>"},{"location":"R.%20Pressman/Software%20Heredado/","title":"Software Heredado","text":"<p>Cientos de miles de programas de c\u00f3mputo caen en uno de los siete dominios de aplicaci\u00f3n. Algunos programas son m\u00e1s viejos. Estos programas antiguos han sido centro de atenci\u00f3n y preocupaci\u00f3n continuas desde la d\u00e9cada de 1960.</p> <p>\u201cLa proliferaci\u00f3n de tales sistemas es causa de dolores de cabeza para las organizaciones grandes, a las que resulta costoso mantenerlos y riesgoso hacerlos evolucionar\u201d</p> <p>Desafortunadamente, en ocasiones hay otra caracter\u00edstica presente en el software heredado: mala Calidad, debido con frecuencia a dise\u00f1os no susceptibles de extenderse, c\u00f3digo confuso, documentaci\u00f3n mala o inexistente, entre otros.</p>"},{"location":"R.%20Pressman/Software%20Heredado/#por-que-por-lo-general-viejo-malo","title":"\u00bfPor qu\u00e9 por lo general VIEJO $=$ MALO?","text":"<p>Conforme pase el tiempo ser\u00e1 frecuente que los sistemas de Software evolucionen por una o varias de las siguientes razones: - El software debe adaptarse para que cumpla las necesidades de los nuevos ambientes del c\u00f3mputo y de la tecnolog\u00eda. - El software debe ser mejorado para implementar nuevos requerimientos del negocio. - El software debe ampliarse para que sea operable con otros sistemas o bases de datos modernos.  - La arquitectura del software debe redise\u00f1arse para hacerla viable dentro de un ambiente de redes. Es decir, por cuestiones de actualizaci\u00f3n.     Cuando ocurren estos modos de evoluci\u00f3n, debe hacerse la ==reingenier\u00eda del sistema== heredado para que sea viable en el futuro. </p> <p>La meta de la Ingenier\u00eda del Software moderna es \u201cdesarrollar Metodolog\u00edas que se basen en el concepto de evoluci\u00f3n; es decir, el concepto de que los sistemas de software cambian continuamente.</p>"},{"location":"R.%20Pressman/Software/","title":"Software","text":"<p>El software es elemento de un sistema l\u00f3gico y no de uno f\u00edsico. </p> <p>El software es un conjunto de instrucciones o programas inform\u00e1ticos que le indican a una computadora c\u00f3mo realizar tareas espec\u00edficas.</p> <p>Ver Tipos de Software.</p>"},{"location":"R.%20Pressman/Software/#caracteristicas-unicas","title":"Caracter\u00edsticas \u00danicas","text":""},{"location":"R.%20Pressman/Software/#se-desarrolla-o-modifica-con-intelecto","title":"Se desarrolla o modifica con intelecto","text":"<p>Es decir, no se manufactura en el sentido cl\u00e1sico. El software no se \u201cdesgasta\u201d:     El hardware presenta una tasa de fallas relativamente elevada en una etapa temprana de su vida (fallas que con frecuencia son atribuibles a defectos de dise\u00f1o o manufactura). Los defectos se corrigen y la tasa de fallas se abate a un nivel estable durante cierto tiempo. No obstante, conforme pasa el tiempo, la tasa de fallas aumenta de nuevo a medida que los componentes del hardware resienten los efectos acumulativos de suciedad, vibraci\u00f3n, abuso, temperaturas extremas y muchos otros inconvenientes ambientales. En pocas palabras, el hardware comienza a desgastarse.  - El software no es susceptible a los problemas ambientales que hacen que el hardware se desgaste, el software no se desgasta, \u00a1pero s\u00ed se deteriora!. - Con el tiempo se vuelve antiguo y puede llegar a denominarse Software Heredado</p> <p> Aunque la industria se mueve hacia la construcci\u00f3n basada en Componentes, la mayor parte del software se construye para un uso individualizado: Un componente de software debe dise\u00f1arse e implementarse de modo que pueda volverse a usar en muchos programas diferentes. Los modernos componentes reutilizables incorporan tanto los datos como el procesamiento que se les aplica, lo que permite que el ingeniero de software cree nuevas aplicaciones a partir de partes susceptibles de volverse a usar.</p>"},{"location":"R.%20Pressman/Software/#naturaleza-del-software","title":"Naturaleza del Software","text":"<p>En la actualidad, el software tiene un papel dual. Es un producto y al mismo tiempo es el veh\u00edculo para entregar un producto. La enorme industria del software se ha convertido en un factor dominante en las econom\u00edas del mundo industrializado. Equipos de especialistas de software, cada uno centrado en una parte de la tecnolog\u00eda que se requiere para llegar a una aplicaci\u00f3n compleja, han reemplazado al programador solitario de los primeros tiempos.</p>"},{"location":"R.%20Pressman/Tipos%20de%20Software/","title":"Tipos de Software","text":"<p>Actualmente, hay siete grandes categor\u00edas de software de computadora.</p>"},{"location":"R.%20Pressman/Tipos%20de%20Software/#software-de-sistemas","title":"Software de Sistemas","text":"<ul> <li>Conjunto de programas escritos para dar servicio a otros programas. </li> <li>Se caracteriza por: gran interacci\u00f3n con el hardware de la computadora, uso intensivo por parte de usuarios m\u00faltiples, operaci\u00f3n concurrente</li> <li>Estructuras complejas de datos e interfaces externas m\u00faltiples.</li> <li>Compiladores, editores y herramientas para administrar archivos, componentes de sistemas operativos, software de redes, procesadores de telecomunicaciones.</li> </ul>"},{"location":"R.%20Pressman/Tipos%20de%20Software/#software-de-aplicacion","title":"Software de Aplicaci\u00f3n","text":"<ul> <li>Programas aislados que resuelven una necesidad espec\u00edfica de negocios.</li> <li>Procesan datos comerciales o t\u00e9cnicos en una forma que facilita la toma de decisiones administrativas o t\u00e9cnicas.</li> <li>Procesamiento de transacciones en punto de venta, control de procesos de manufactura en tiempo real</li> </ul>"},{"location":"R.%20Pressman/Tipos%20de%20Software/#software-de-ingenieria-y-ciencias","title":"Software de Ingenier\u00eda y Ciencias","text":"<ul> <li>Algoritmos \u201cdevoradores de n\u00fameros\u201d. Las aplicaciones van de la astronom\u00eda a la vulcanolog\u00eda, de la biolog\u00eda molecular a la manufactura automatizada. </li> </ul>"},{"location":"R.%20Pressman/Tipos%20de%20Software/#software-incrustado","title":"Software Incrustado","text":"<ul> <li>Reside dentro de un producto o sistema. Ejecuta funciones limitadas y particulares o provee una capacidad significativa de funcionamiento y control.</li> <li>Control del tablero de un horno de microondas, funciones digitales en un autom\u00f3vil, como el control del combustible, del tablero de control y de los sistemas de frenado</li> </ul>"},{"location":"R.%20Pressman/Tipos%20de%20Software/#software-de-linea-de-productos","title":"Software de L\u00ednea de Productos","text":"<ul> <li>Dise\u00f1ado para proporcionar una capacidad espec\u00edfica para uso de muchos consumidores diferentes.</li> <li>Se centra en alg\u00fan mercado limitado y particular o se dirige a mercados masivos de consumidores </li> <li>Control de inventario de productos, procesamiento de textos, hojas de c\u00e1lculo, gr\u00e1ficas por computadora, multimedios, entretenimiento, administraci\u00f3n de base de datos y aplicaciones para finanzas personales o de negocios.</li> </ul>"},{"location":"R.%20Pressman/Tipos%20de%20Software/#aplicaciones-web","title":"Aplicaciones web","text":"<ul> <li>Las webapps son un conjunto de archivos de hipertexto vinculados que presentan informaci\u00f3n con uso de texto y gr\u00e1ficas limitadas.</li> <li>Centradas en redes, agrupando una ampl\u00eda gama de aplicaciones</li> </ul>"},{"location":"R.%20Pressman/Tipos%20de%20Software/#software-de-inteligencia-artificial","title":"Software de Inteligencia Artificial","text":"<ul> <li>Hace uso de algoritmos no num\u00e9ricos para resolver problemas complejos que no son f\u00e1ciles de tratar computacionalmente o con el an\u00e1lisis directo. </li> <li>Rob\u00f3tica, sistemas expertos, reconocimiento de patrones (imagen y voz), redes neurales artificiales, demostraci\u00f3n de teoremas y juegos.</li> </ul>"},{"location":"R.%20Pressman/Tipos%20de%20Software/#software-heredado","title":"Software Heredado","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Artefactos/","title":"Artefactos","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Artefactos/#pila-del-producto-product-backlog","title":"Pila del Producto (Product Backlog)","text":"<p>Lista de Requerimientos de usuario, desde el punto de vista de que a partir de la visi\u00f3n inicial del producto crece y evoluciona durante el desarrollo.  Est\u00e1 formada por la lista de funcionalidades o \"Historias de Usuario\" que desea obtener el cliente, ordenadas por la prioridad que el mismo da a cada una. El orden de prioridad de las tareas la mantiene el product owner. - Es el inventario de funcionalidades, mejoras, tecnolog\u00eda y correcci\u00f3n de errores que deben incorporarse al producto a trav\u00e9s de los sucesivos sprints. - La pila del producto nunca se da por completada; est\u00e1 en continuo crecimiento y evoluci\u00f3n. - Los elementos de la pila del producto que pueden ser incorporados a un sprint se denominan \u201cpreparados\u201d o \u201caccionables\u201d. - La pila del producto no es un documento de requisitos, sino una herramienta de informaci\u00f3n para el equipo. - Habitualmente se empieza a elaborar la pila del producto con el resultado de una reuni\u00f3n de \u201ctormenta de ideas\u201d, o actividad donde colabore todo el equipo compartiendo la visi\u00f3n del product owner.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Artefactos/#pila-del-sprint-sprint-backlog","title":"Pila del Sprint (Sprint Backlog)","text":"<p>Lista de los trabajos, historias que debe realizar el equipo durante el sprint para generar el incremento previsto. Refleja los requisitos vistos desde el punto de vista del equipo de desarrollo, a realizar durante el time-boxing definido. - La confecciona el equipo en la reuni\u00f3n de planificaci\u00f3n del sprint, indicando para cada tarea el esfuerzo previsto para realizarla. - Cubre todas las tareas identificadas por el equipo para conseguir el objetivo del sprint. - Es tambi\u00e9n una herramienta para la comunicaci\u00f3n visual directa del equipo. - S\u00f3lo el equipo la puede modificar durante el sprint. - Deber\u00eda ser visible para todo el equipo.  - Las tareas idealmente deber\u00edan incluir la siguiente informaci\u00f3n: persona responsable de cada tarea, estado en el que se encuentra y tiempo de trabajo que queda para completarla. - Durante el sprint, el equipo actualiza a diario (scrum diario) en ella los tiempos pendientes de cada tarea.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Artefactos/#incremento","title":"Incremento","text":"<p>Resultado funcional de cada sprint, entregable, terminado y probado. No se deben considerar como Incremento a prototipos, m\u00f3dulos o subm\u00f3dulos, ni partes pendientes de pruebas o integraci\u00f3n. Son incrementos directos al producto.</p> <p></p> <p>Otro artefacto propio del modelo est\u00e1ndar de scrum es el Gr\u00e1fico de Quemado (Burn Down Chart) que el equipo actualiza a diario para comprobar el avance. Este elemento, junto con la pr\u00e1ctica de Estimaci\u00f3n de P\u00f3quer (P\u00f3ker Planning) y el Gr\u00e1fico de Producto (Burn Up Chart) se encuentra incluido en el cap\u00edtulo de Medici\u00f3n y Estimaci\u00f3n \u00c1gil.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Ciclo%20de%20Scrum/","title":"Ciclo de Scrum","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Ciclo%20de%20Scrum/#componentes","title":"Componentes","text":"<p>Los componentes del ciclo est\u00e1ndar de scrum son - Equipo Scrum. Compuesto de los siguientes Roles:     - Equipo de Desarrollo.     - Propietario del producto.     - Scrum master. - Interesados. - Artefactos:     - Pila del producto.     - Pila del sprint.      - Incremento.         -  - Eventos:     - Sprint.     - Reuni\u00f3n de planificaci\u00f3n del sprint.     - Scrum diario.      - Revisi\u00f3n del sprint.     - Retrospectiva del sprint.         - </p> <p>Se comienza con la visi\u00f3n general del resultado que se desea, y a partir de ella se especifica y da detalle a las funcionalidades que se desean obtener en primer lugar.  Cada ciclo de desarrollo o iteraci\u00f3n (sprint) finaliza con la entrega de una parte operativa del producto (incremento). La duraci\u00f3n de cada sprint puede ser de entre 1 y 3 semanas. Lo m\u00e1s habitual es que tengan siempre la misma medida, marcando una cadencia, pero \u00e9sta puede ir evolucionando o ajustarse.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Comprometidos%20e%20Implicados%20en%20Scrum/","title":"Comprometidos e Implicados en Scrum","text":"<p>Durante el desarrollo del Proyecto en Scrum son muchas las personas que intervienen y aportan valor, si bien con diferentes niveles de compromiso y responsabilidad, en funci\u00f3n de lo cual se suele diferenciar entre \u00abcomprometidos\u00bb e \u00abimplicados\u00bb. - Comprometidos. Intervienen directamente en la construcci\u00f3n del producto o el desarrollo del servicio. - Implicados. Otras partes interesadas, tales como direcci\u00f3n, gerencia, comerciales, marketing, operadores del sistema que se desarrolla, soporte a usuarios, etc.</p> <p> En c\u00edrculos de scrum es frecuente llamar a los comprometidos (sin ninguna connotaci\u00f3n peyorativa) \u00abcerdos\u00bb y a los implicados \u00abgallinas\u00bb. El origen de estos nombres es esta historia, que ilustra la diferencia entre compromiso e implicaci\u00f3n en el proyecto.  Si bien se hace la diferenciaci\u00f3n en este apartado, tanto los comprometidos como los involucrados no dejan de ser Roles en lo que ser\u00eda el Ciclo de Scrum.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Definiciones%20de%20Hecho%20%28DoD%29/","title":"Definiciones de Hecho (DoD)","text":"<p>Conjunto de criterios compartidos y acordados por el equipo Scrum que determina cu\u00e1ndo un elemento de trabajo (como una Historias de Usuario, tarea o incremento del producto) se considera completamente terminado.</p> <p>Es una herramienta clave para garantizar transparencia, calidad y consistencia en las entregas, aline\u00e1ndose con los pilares de Scrum.  - Acuerdo colectivo. Es definida por el equipo Scrum (y a veces con los interesados) para reflejar est\u00e1ndares de calidad y expectativas del producto.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Definiciones%20de%20Hecho%20%28DoD%29/#diferencia-con-criterios-de-aceptacion","title":"Diferencia con Criterios de Aceptaci\u00f3n","text":"<p>Los criterios de aceptaci\u00f3n son espec\u00edficos para una historia de usuario (funcionalidad concreta), mientras que la DoD aplica a todo el trabajo completado.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Definiciones%20de%20Hecho%20%28DoD%29/#ejemplo","title":"Ejemplo:","text":"<p>Para una aplicaci\u00f3n web, una Definici\u00f3n de Hecho podr\u00eda incluir: - C\u00f3digo escrito y revisado por pares. - Pruebas unitarias y de integraci\u00f3n aprobadas. - Funcionalidad probada en un entorno de staging. - Documentaci\u00f3n actualizada. - Sin errores cr\u00edticos abiertos. - Aprobaci\u00f3n del Product Owner.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Equipo%20de%20Desarrollo/","title":"Equipo de Desarrollo","text":"<p>Cada uno de los profesionales que realizan el \u00abincremento\u00bb de cada sprint, transformando los requisitos de la pila del producto en un producto funcional. </p> <p>No se limita \u00fanicamente a programadores. Y no se considera al product owner ni al scrum master dentro de este grupo.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Equipo%20de%20Desarrollo/#principales-responsabilidades","title":"Principales Responsabilidades.","text":"<ol> <li>Entrega de Incrementos. Funcionales y cumpliendo la Definition Of Done.</li> <li>Autoorganizaci\u00f3n. No hay un gestor para delimitar, asignar y coordinar las tareas. Son los propios miembros los que lo realizan.</li> <li>Colaboraci\u00f3n Interna. Buscando maximizar la eficiencia.</li> <li>Toma de Decisiones T\u00e9cnicas. A la hora de la construcci\u00f3n del producto.</li> </ol> <ul> <li>Equipo multifuncional, con esp\u00edritu de colaboraci\u00f3n y un prop\u00f3sito com\u00fan: conseguir el mayor valor posible para la visi\u00f3n del cliente.</li> <li>Equipo de trabajo $\\neq$ Grupo de trabajo (asignaci\u00f3n espec\u00edfica de tareas y respondiendo cada uno por su trabajo)</li> <li>Se recomienda que haya entre 3 y 9 desarrolladores. M\u00e1s all\u00e1 de 9 resulta dif\u00edcil mantener la comunicaci\u00f3n directa.</li> <li>Este equipo de desarrollo es el coraz\u00f3n operativo de Scrum.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Estimaci%C3%B3n%20de%20P%C3%B3quer%20%28P%C3%B3ker%20Planning%29/","title":"Estimaci\u00f3n de P\u00f3quer (P\u00f3ker Planning)","text":"<p>Pr\u00e1ctica \u00e1gil, para conducir las reuniones (Eventos) en las que se estima el esfuerzo, duraci\u00f3n o complejidad de las tareas o Historias de Usuario en un proyecto.</p> <p>James Grenning ide\u00f3 este juego de planificaci\u00f3n para evitar discusiones dilatadas que no terminan de dar conclusiones concretas.  </p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Estimaci%C3%B3n%20de%20P%C3%B3quer%20%28P%C3%B3ker%20Planning%29/#como-funciona","title":"\u00bfC\u00f3mo funciona?","text":"<ol> <li>Preparaci\u00f3n:<ul> <li>El equipo Scrum (desarrolladores, testers, etc.) se re\u00fane, junto con el Product Owner y el Scrum Master.</li> <li>El Product Owner presenta una historia de usuario o tarea, explicando sus requisitos y objetivos.</li> <li>Se utiliza un mazo de cartas de Planning Poker, donde cada carta tiene un valor num\u00e9rico que representa la complejidad o esfuerzo (por ejemplo, 1, 2, 3, 5, 8, 13, 20, 40, 100, o \"?\" para incertidumbre, aunque pueden usarse otra sucesi\u00f3n de valores).</li> </ul> </li> <li>Discusi\u00f3n inicial:<ul> <li>El equipo discute la historia de usuario, aclarando dudas con el Product Owner.</li> <li>Se exploran los detalles t\u00e9cnicos, riesgos y dependencias para entender mejor la tarea.</li> </ul> </li> <li>Estimaci\u00f3n individual:<ul> <li>Cada miembro del equipo selecciona una carta que representa su estimaci\u00f3n del esfuerzo o complejidad de la tarea. Lo hace en privado para evitar influencias de otros.</li> <li>Las cartas se revelan simult\u00e1neamente.</li> </ul> </li> <li>An\u00e1lisis de discrepancias:<ul> <li>Si las estimaciones son similares, se toma el valor consensuado (el m\u00e1s com\u00fan o un promedio).</li> <li>Si hay diferencias significativas (por ejemplo, alguien elige 3 y otro 13), los miembros con estimaciones extremas explican su razonamiento. Esto fomenta la discusi\u00f3n y el intercambio de perspectivas.</li> </ul> </li> <li>Iteraci\u00f3n hasta el consenso:<ul> <li>El equipo repite el proceso de selecci\u00f3n de cartas hasta que las estimaciones convergen o se acuerda un valor final.</li> <li>El Scrum Master facilita la discusi\u00f3n para mantenerla enfocada y productiva.</li> </ul> </li> <li>Asignaci\u00f3n del valor:<ul> <li>El valor acordado (en puntos de historia o story points) se asigna a la historia de usuario. Estos puntos no representan tiempo exacto, sino un esfuerzo relativo respecto a otras tareas.</li> </ul> </li> </ol>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Eventos/","title":"Eventos","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Eventos/#sprint","title":"Sprint","text":"<p>Nombre que recibe cada iteraci\u00f3n de desarrollo. Es el n\u00facleo central que genera el pulso de avance a ritmo de \u201ctiempos prefijados\u201d (time-boxing). Es el per\u00edodo de Tiempo acotado (\u201ctime-box\u201d) de duraci\u00f3n m\u00e1xima de 4 semanas, durante el que se construye un incremento del producto. - En implementaciones de scrum se considera al sprint como el evento contenedor de todos los eventos y en otras se considera que el \u00e1mbito del sprint es s\u00f3lo la construcci\u00f3n del incremento.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Eventos/#planificacion-del-sprint","title":"Planificaci\u00f3n del Sprint","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Eventos/#scrum-diario","title":"Scrum Diario","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Eventos/#revision-del-sprint","title":"Revisi\u00f3n del Sprint","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Eventos/#retrospectiva","title":"Retrospectiva","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Gr%C3%A1fico%20de%20Producto%20%28Burn%20Up%20Chart%29/","title":"Gr\u00e1fico de Producto (Burn Up Chart)","text":"<p>Herramienta de planificaci\u00f3n del product owner. - Muestra el trabajo completado acumulado frente al trabajo total planificado. La evoluci\u00f3n previsible del producto. - Responde a cu\u00e1nto trabajo fue hecho frente a las expectativas.  - Proyecta en el tiempo su construcci\u00f3n, en base a la velocidad del equipo. - Diagrama cartesiano que representa en el eje de ordenadas el esfuerzo estimado (Puntos de Historia) para construir las diferentes historias de la pila del producto, y en el de las abscisas el Tiempo, medido en sprints o en tiempo real. - Enfocado en el progreso positivo (lo que se ha logrado).  La l\u00ednea que corresponde a TO-DO en la imagen, corresponde al ritmo de avance previsto, seg\u00fan la velocidad media del equipo.  Otra cosa que se suele hacer es, luego de dibujar la l\u00ednea de velocidad prevista, es dibujar la l\u00ednea de velocidad optimista y pesimista. Y tomando tambi\u00e9n de la pila del producto, el puntaje necesario de los Puntos de Historia para lanzar las versiones 1.0, 1.1 y 1.2 del sistema. Lo vemos en la siguiente imagen.  Cambio en el Alcance. Frente a un cambio en el alcance, la l\u00ednea de alcance prevista subir\u00eda o bajar\u00eda, es decir, debe ser modificada.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Gr%C3%A1fico%20de%20Quemado%20%28Burn%20Down%20Chart%29/","title":"Gr\u00e1fico de Quemado (Burn Down Chart)","text":"<p>Lo actualiza el equipo en el scrum diario, para comprobar si el ritmo de avance es el previsto, o se puede ver comprometida la entrega del sprint. - Muestra el Trabajo restante en un Sprint (o en el proyecto) frente al tiempo disponible. - En el eje de ordenadas, se pone el esfuerzo pendiente en Puntos de Historia, u otra unidad definida por el equipo, mientras que en el eje de abscisas se representa el tiempo, generalmente dividido en d\u00edas, Sprints.  - Responde a cu\u00e1nto trabajo queda por hacer frente al Tiempo disponible. - Es \u00fatil para la detecci\u00f3n temprana de desviaciones que puedan comprometer la entrega al final del sprint. - Enfocado en reducir el trabajo pendiente, lo que puede percibirse como presi\u00f3n.</p> <p>El equipo dispone de la pila del sprint, con las tareas a realizar y su estimaci\u00f3n. El equipo va actualizando d\u00eda a d\u00eda la pila de sprint, modificando el tiempo pendiente para terminar las tareas, hasta que este queda en 0. El avance ideal de un sprint estar\u00eda representado por la diagonal que reduce el esfuerzo pendiente de forma continua y gradual hasta completarlo el d\u00eda que termina el sprint, de la siguiente forma: Las gr\u00e1ficas de diagonal perfecta no son habituales. El siguiente ser\u00eda el aspecto de la gr\u00e1fica en un sprint subestimado para la unidad de tiempo menor a alrededor de 13, y sobreestimado para los siguientes. </p> <p>Otro gr\u00e1fico para esclarecer. </p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Medici%C3%B3n%20y%20Estimaci%C3%B3n%20%C3%81gil/","title":"Medici\u00f3n y Estimaci\u00f3n \u00c1gil","text":"<p>La medici\u00f3n en Scrum se refiere al uso de m\u00e9tricas para evaluar el progreso, la Calidad y el desempe\u00f1o del equipo Scrum, as\u00ed como la efectividad del proceso y el producto.  La estimaci\u00f3n en Scrum, por otro lado, se centra en determinar cu\u00e1nto esfuerzo requiere una tarea o historia de usuario.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Medici%C3%B3n%20y%20Estimaci%C3%B3n%20%C3%81gil/#metricas-y-herramientas-comunes-en-scrum","title":"M\u00e9tricas y Herramientas comunes en Scrum","text":"<p>Las m\u00e9tricas en Scrum se dividen en categor\u00edas seg\u00fan lo que miden: progreso del producto, desempe\u00f1o del equipo o calidad del proceso.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Medici%C3%B3n%20y%20Estimaci%C3%B3n%20%C3%81gil/#velocidad","title":"Velocidad","text":"<p>Mide la cantidad de Trabajo (generalmente en Puntos de Historia) que el equipo completa en un Sprint.  Se define como la cantidad de trabajo realizada por unidad de Tiempo: $$\\text{Velocidad}=\\frac{\\text{Trabajo}}{\\text{Tiempo}}$$Si por ejemplo, un equipo completa 20 puntos de historia por Sprint en promedio, puede usar esa cifra para estimar cu\u00e1nto trabajo asumir en el pr\u00f3ximo Sprint.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Medici%C3%B3n%20y%20Estimaci%C3%B3n%20%C3%81gil/#grafico-de-producto-burn-up-chart","title":"Gr\u00e1fico de Producto (Burn Up Chart)","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Medici%C3%B3n%20y%20Estimaci%C3%B3n%20%C3%81gil/#grafico-de-quemado-burn-down-chart","title":"Gr\u00e1fico de Quemado (Burn Down Chart)","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Medici%C3%B3n%20y%20Estimaci%C3%B3n%20%C3%81gil/#estimacion-de-poquer-poker-planning","title":"Estimaci\u00f3n de P\u00f3quer (P\u00f3ker Planning)","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/M%C3%ADnimo%20Producto%20Viable%20%28MVP%29/","title":"M\u00ednimo Producto Viable (MVP)","text":"<p>Concepto que se refiere a la versi\u00f3n m\u00e1s simple de un producto que puede ser entregada para proporcionar valor al cliente, validar suposiciones y obtener retroalimentaci\u00f3n con el menor esfuerzo posible.</p> <p>Aunque el t\u00e9rmino proviene del marco de Lean Startup, se utiliza frecuentemente en Scrum para guiar el desarrollo iterativo e incremental. - Valor m\u00ednimo: Contiene solo las funcionalidades esenciales que resuelven un problema principal o satisfacen una necesidad clave del usuario. - Validaci\u00f3n r\u00e1pida: Permite probar hip\u00f3tesis sobre el producto con usuarios reales, obteniendo retroalimentaci\u00f3n para iterar y mejorar. - Reducci\u00f3n de desperdicio: Se enfoca en evitar el desarrollo de caracter\u00edsticas innecesarias, optimizando recursos y tiempo. - Entrega incremental: En Scrum, el MVP suele entregarse como parte de los incrementos al final de un Sprint, aline\u00e1ndose con la Definiciones de Hecho (DoD) y los objetivos del producto.</p> <p>El MVP se alinea con los pilares de Scrum (transparencia, inspecci\u00f3n, adaptaci\u00f3n), ya que: - Promueve la transparencia al priorizar claridad en las necesidades del cliente. - Facilita la inspecci\u00f3n al entregar un incremento funcional que los usuarios pueden evaluar. - Permite la adaptaci\u00f3n al iterar sobre el producto bas\u00e1ndose en retroalimentaci\u00f3n.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Origen%20de%20Scrum/","title":"Origen de Scrum","text":"<p>El origen de la palabra Scrum se encuentra en un \u00e1mbito muy alejado del de la gesti\u00f3n de Proyectos.  En rugby, \u00abscrum\u00bb es el t\u00e9rmino que define a la formaci\u00f3n en la que ambos equipos, agazapados y atenazados entre s\u00ed, empujan para obtener el bal\u00f3n sin tocarlo con la mano.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Origen%20de%20Scrum/#japon-decada-de-los-80","title":"Jap\u00f3n, d\u00e9cada de los 80","text":"<p>Donde indica el subt\u00edtulo, los investigadores Ikujiro Nonaka y Hirotaka Takeuchi identificaron una novedosa forma de desarrollo en las empresas de manufactura industrial que estaban obteniendo los mejores resultados de innovaci\u00f3n y tiempo de salida al mercado, Honda, Canon, Hewlett-Packard, entre otros. Compararon su forma de trabajo en equipos autogestionados con el avance en formaci\u00f3n de los jugadores de rugby, de ah\u00ed el t\u00e9rmino.  Emplearon el t\u00e9rmino para bautizar los principios de desarrollo que descubrieron en estas empresas tecnol\u00f3gicas innovadoras.</p> <p>Aunque esta forma de trabajo surgi\u00f3 en empresas de productos tecnol\u00f3gicos, en la manufactura industrial, a partir de 1995 se empezaron a aplicar tambi\u00e9n a la industria del software, a\u00f1o en el que Ken Schwaber present\u00f3 en OOPSLA (conferencia anual Object-Oriented Programming, Systems, Languages &amp; Applications) una Metodolog\u00eda de desarrollo de software basada en un ambiente scrum, usando ese mismo t\u00e9rmino.  Este primer marco presentaba una serie de fases y \u00abartefactos\u00bb: pregame, game, postgame, planning, sprints, wrap\u2026 Algunos se han mantenido y los veremos, pero en general las reglas del juego han cambiado mucho desde entonces.</p> <p>No existe una autoridad que determine lo que es scrum y lo que no. Ha cambiado y seguir\u00e1 evolucionando con las aportaciones de la comunidad de profesionales, que define las pr\u00e1cticas que resultan m\u00e1s \u00fatiles. El esp\u00edritu original, eso s\u00ed, se mantiene</p> <p>Tiempo despu\u00e9s, en 2005, Mike Cohn, Esther Derby y Ken Schwaber constituyeron la organizaci\u00f3n \u201cScrum Alliance\u201d para difundir un marco de trabajo espec\u00edfico para el desarrollo de software, basado en esta metodolog\u00eda, a la que tambi\u00e9n denominaron scrum. Y que m\u00e1s se asemeja a la descrita en este repositorio.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Planificaci%C3%B3n%20del%20Sprint/","title":"Planificaci\u00f3n del Sprint","text":"<p>Reuni\u00f3n de trabajo que marca el inicio de cada sprint en la que se determina cu\u00e1l es el objetivo del sprint y las tareas necesarias para conseguirlo.</p> <ul> <li>Se responden dos cuestiones: \u00bfQu\u00e9 se entregar\u00e1 al terminar el Sprint? y \u00bfC\u00f3mo se llevar\u00e1 a cabo el Trabajo necesario para realizar el incremento previsto?. La reuni\u00f3n se articula en dos partes de duraci\u00f3n similar para responder ambas preguntas.</li> <li>Se toman como base las prioridades y necesidades de negocio del cliente.</li> <li>Reuni\u00f3n conducida por el Scrum Master o un miembro del equipo, dependiendo de la implementaci\u00f3n de Scrum, a la que deben asistir el product owner y el equipo completo. Tambi\u00e9n pueden asistir otros implicados en el proyecto.</li> <li>La reuni\u00f3n puede durar hasta una jornada de trabajo completa, seg\u00fan la complejidad de las Historias de Usuario que se desean incluir en el pr\u00f3ximo incremento.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Planificaci%C3%B3n%20del%20Sprint/#precondiciones","title":"Precondiciones","text":"<ol> <li>Las Historias de Usuario ya deben estar preparadas y priorizadas en la pila del producto.</li> <li>La organizaci\u00f3n tiene determinados y asignados los recursos disponibles para llevar a cabo el sprint.</li> </ol>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Planificaci%C3%B3n%20del%20Sprint/#entradas","title":"Entradas","text":"<ul> <li>Pila del Producto.</li> <li>Producto de incrementos anteriores (excepto si se trata del primer sprint)</li> <li>Dato de la velocidad del equipo en el \u00faltimo sprint.</li> <li>Circunstancias de las condiciones de negocio del cliente, y de la tecnolog\u00eda utilizada.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Planificaci%C3%B3n%20del%20Sprint/#resultado","title":"Resultado","text":"<ul> <li>Pila del Sprint.</li> <li>Duraci\u00f3n del Sprint y fecha de la Reuni\u00f3n de Revisi\u00f3n.</li> <li>Objetivo del Sprint. </li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Planificaci%C3%B3n%20del%20Sprint/#que-se-entregara-al-terminar-el-sprint","title":"\u00bfQu\u00e9 se entregar\u00e1 al terminar el Sprint?","text":"<p>El propietario del producto: - Presenta las Historias de Usuario de la Pila del Producto que tienen mayor prioridad y que estima que se pueden realizar en el sprint. El equipo: - Propone sugerencias, modificaciones y soluciones alternativas. Los aportes del equipo pueden suponer modificaciones en la pila. Tras reordenar y replantear las historias de la pila del producto, el equipo define el objetivo del sprint, en una frase que sintetiza cu\u00e1l es el valor que se entregar\u00e1 al cliente como incremento.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Planificaci%C3%B3n%20del%20Sprint/#como-se-llevara-a-cabo-el-trabajo-necesario-para-realizar-el-incremento-previsto","title":"\u00bfC\u00f3mo se llevar\u00e1 a cabo el Trabajo necesario para realizar el incremento previsto?","text":"<p>El equipo desglosa cada funcionalidad en tareas, y estima el esfuerzo para cada una de ellas, componiendo as\u00ed la Pila del Sprint.  Los miembros del equipo establecen cu\u00e1les van a ser las tareas para los primeros d\u00edas del sprint, y se las autoasignan. El papel del propietario del producto es atender a dudas y comprobar que el equipo comprende y comparte su objetivo.  El Scrum Master act\u00faa de moderador de la reuni\u00f3n, asegurando que esta se realice antes de cada sprint, que se cumplan sus precondiciones, se obtengan los resultados y que se sigan los Valores y Principios de Scrum durante la misma. </p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Propietario%20del%20Producto/","title":"Propietario del Producto","text":"<p>El tambi\u00e9n llamado product owner, es quien toma las decisiones del cliente. </p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Propietario%20del%20Producto/#principales-responsabilidades","title":"Principales Responsabilidades.","text":"<ol> <li>Gesti\u00f3n del Product Backlog/Pila de Producto. Crea, mantiene y prioriza la pila de producto.</li> <li>Definici\u00f3n de la visi\u00f3n del producto. Articula y comunica la misma.</li> <li>Toma de decisiones sobre el alcance. Decide qu\u00e9 elementos (Historias de Usuario) de la pila del producto se incluir\u00e1n en cada sprint, bas\u00e1ndose en el valor, la urgencia y la capacidad del equipo.</li> <li>Gesti\u00f3n de stakeholders. Act\u00faa como enlace entre el equipo Scrum y los interesados externos, recopilando sus necesidades.</li> <li>Aceptaci\u00f3n del trabajo completado. Valida que los incrementos entregados por el equipo cumplan con los criterios de aceptaci\u00f3n definidos en las historias de usuario (Definition Of Done)</li> </ol> <ul> <li>Su responsabilidad es el valor del producto y la pila del producto.</li> <li>Representa al cliente, y debe tener el conocimiento suficiente del producto. Para simplificar la comunicaci\u00f3n y toma de decisiones es necesario que este rol recaiga en una \u00fanica persona.</li> <li>Se responsabiliza sobre fechas y funcionalidades de las diferentes versiones del producto.</li> <li>Recibe y analiza de forma continua retroinformaci\u00f3n del entorno de negocio (evoluci\u00f3n del mercado, competencia, alternativas) y del proyecto (sugerencias del equipo, alternativas t\u00e9cnicas, pruebas y evaluaci\u00f3n de cada incremento). Seg\u00fan las circunstancias del proyecto es posible incluso que delegue en el equipo de desarrollo, o en alguien de su confianza, pero la responsabilidad siempre es suya. </li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Puntos%20de%20Historia/","title":"Puntos de Historia","text":"<p>La unidad \u201cStory Point\u201d de eXtreme Programming (metodolog\u00eda \u00e1gil) se define como la cantidad de Trabajo que se realiza en un \u201cd\u00eda ideal\u201d.</p> <p>Unidad de medida relativa (no absoluta) utilizada para estimar la complejidad, esfuerzo y Riesgos asociados con la implementaci\u00f3n de un elemento del Product Backlog, como Historias de Usuario.</p> <ul> <li>NO representan tiempo exacto (horas o d\u00edas).</li> <li>Se asignan usando una escala num\u00e9rica, com\u00fanmente la secuencia de Fibonacci (1, 2, 3, 5, 8, 13, 21, etc.) o una escala similar (por ejemplo, 1, 2, 4, 8).</li> <li>Muy utilizados en t\u00e9cnicas como la Estimaci\u00f3n de P\u00f3quer.</li> </ul> <p>Cada organizaci\u00f3n, seg\u00fan sus circunstancias y su criterio institucionaliza su m\u00e9trica de trabajo definiendo el nombre y las unidades, de forma que puede definir su unidad, su \u201cpunto\u201d: - Como tama\u00f1o relativo de tareas conocidas que normalmente emplea. Ejemplo: El equipo de un sistema de venta por internet, podr\u00eda determinar que un \u201cpunto\u201d representara el tama\u00f1o que tiene la realizaci\u00f3n de un \u201clistado de las facturas de un usuario\u201d. - En base al Tiempo ideal necesario para realizar el trabajo.  - Ejemplo: Un equipo puede determinar que un \u201cpunto\u201d es el trabajo realizado en 4 horas ideales.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Retrospectiva/","title":"Retrospectiva","text":"<p>Reuni\u00f3n que se realiza tras la revisi\u00f3n de cada sprint, y antes de la reuni\u00f3n de planificaci\u00f3n del siguiente. Donde el equipo realiza autoan\u00e1lisis.</p> <ul> <li>Duraci\u00f3n recomendada de una a tres horas, seg\u00fan la duraci\u00f3n del sprint terminado.</li> <li>Todo el equipo Scrum participa. En algunos casos, stakeholders externos pueden ser invitados</li> <li>El autoan\u00e1lisis es sobre la forma de trabajar del equipo. Identificando fortalezas y puntos d\u00e9biles. <ul> <li>\u00bfQu\u00e9 sali\u00f3 bien?.</li> <li>\u00bfQu\u00e9 no sali\u00f3 tan bien?.</li> <li>\u00bfQu\u00e9 podemos mejorar?.</li> </ul> </li> <li>Se busca afianzar estas fortalezas, y planificar acciones de mejora sobre las debilidades. </li> <li>Reuni\u00f3n para la mejora del marco de trabajo.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Retrospectiva/#diferencias-frente-a-la-revision-del-sprint","title":"Diferencias frente a la Revisi\u00f3n del Sprint","text":"<ul> <li>El hecho de que se realice normalmente al final de cada sprint lleva a veces a considerarlas err\u00f3neamente como reuniones de \u201cRevisi\u00f3n del Sprint\u201d, cuando es aconsejable tratarlas por separado, porque sus objetivos son diferentes.</li> <li>El objetivo de la revisi\u00f3n del sprint es analizar \u201cQU\u00c9\u201d se est\u00e1 construyendo, mientras que una reuni\u00f3n retrospectiva se centra en \u201cC\u00d3MO\u201d lo estamos construyendo.</li> </ul> <p>El Scrum Master crea un ambiente seguro, establece reglas b\u00e1sicas (como respeto mutuo) y define el objetivo de la reuni\u00f3n. Luego el equipo comienza a reflexionar sobre el Sprint, se pueden usar t\u00e9cnicas como:     - Start, Stop, Continue (Qu\u00e9 empezar, parar o continuar).     - Estrella de Mar. Identificadas las fortalezas, debilidades, aspectos, se discuten posibles mejoras y se acuerdan acciones concretas. Se asignan responsables a las acciones y plazos para implementarlas. Por \u00faltimo, se agradece la participaci\u00f3n, se resumen los puntos clave y se eval\u00faa c\u00f3mo mejorar la pr\u00f3xima retrospectiva.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Revisi%C3%B3n%20del%20Sprint/","title":"Revisi\u00f3n del Sprint","text":"<p>Reuni\u00f3n informal e informativa realizada al final del sprint para comprobar el incremento.</p> <ul> <li>Se recomienda que no debe durar m\u00e1s de 4 horas.</li> <li>El Propietario del Producto comprueba el progreso del sistema: <ul> <li>Identifica las Historias de Usuario que se pueden considerar hechas y las que no.</li> <li>Junto con el equipo en general obtienen feedback relevante para revisar la Pila del Producto, probando el incremento.</li> </ul> </li> <li>Est\u00e1n prohibidas las presentaciones gr\u00e1ficas y \u201cpowerpoints\u201d.</li> <li>Se muestra es el resultado final: terminado, probado y operando en el entorno del cliente (incremento).</li> <li>Reuni\u00f3n informativa. Su misi\u00f3n no es la toma de decisiones ni la cr\u00edtica del incremento.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Revisi%C3%B3n%20del%20Sprint/#precondiciones","title":"Precondiciones","text":"<ul> <li>Se ha concluido el Sprint.</li> <li>Asisten todos los Roles, incluyendo los interesados que lo deseen.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Revisi%C3%B3n%20del%20Sprint/#entradas","title":"Entradas","text":"<ul> <li>Incremento terminado.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Revisi%C3%B3n%20del%20Sprint/#resultados","title":"Resultados","text":"<ul> <li>Feedback para el Propietario del Producto.</li> <li>Informaci\u00f3n para mejorar el valor de la visi\u00f3n del producto.</li> <li>Hito de seguimiento de la construcci\u00f3n del sistema.</li> <li>Convocatoria de la reuni\u00f3n del siguiente Sprint.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Revisi%C3%B3n%20del%20Sprint/#protocolo-recomendado","title":"Protocolo Recomendado","text":"<ol> <li>El equipo expone el objetivo del sprint, la lista de funcionalidades que se inclu\u00edan y las que se han desarrollado. </li> <li>El equipo hace una introducci\u00f3n general del sprint y demuestra el funcionamiento de las partes construidas. </li> <li>Se abre un turno de preguntas y sugerencias.  </li> <li>El Scrum Master, de acuerdo con las agendas del propietario del producto y el equipo, cierra la fecha para la reuni\u00f3n de preparaci\u00f3n del siguiente sprint.</li> </ol>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Roles/","title":"Roles","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Roles/#propietario-del-producto","title":"Propietario del Producto","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Roles/#equipo-de-desarrollo","title":"Equipo de Desarrollo","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Roles/#scrum-master","title":"Scrum Master","text":""},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Roles/#interesados","title":"Interesados","text":"<p>Los interesados o stakeholders no se consideran un rol formal dentro del marco Scrum, ya que los tres roles formales ya mencionados est\u00e1n dise\u00f1ados para cubrir todas las responsabilidades necesarias para desarrollar y entregar un incremento de manera iterativa.  - No participan directamente en el proceso de desarrollo. - Su interacci\u00f3n se canaliza a trav\u00e9s del product owner. Fuera de Eventos o ceremonias formales, los interesados se comunican regularmente con el Product Owner para compartir sus preocupaciones. - Evitan interferencias en la autoorganizaci\u00f3n. Incluir a los stakeholders como un rol formal podr\u00eda introducir interferencias externas, lo que contradice el principio de autoorganizaci\u00f3n del equipo Scrum. Principales Responsabilidades.  1. Definici\u00f3n de la visi\u00f3n del producto. 2. Colaboraci\u00f3n en el Product Backlog. Proporcionan retroalimentaci\u00f3n al Product Owner durante el refinamiento del backlog. 3. Sprint Review. Principal ceremonia donde los stakeholders interact\u00faan directamente con el equipo Scrum. Estos proporcionan retroalimentaci\u00f3n sobre el incremento, planteando nuevas necesidades o cambios en las prioridades, que el product owner incorporar\u00e1 al backlog.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Scrum%20Diario/","title":"Scrum Diario","text":"<p>Reuni\u00f3n diaria breve, de no m\u00e1s de 15 minutos, en la que el equipo sincroniza el Trabajo y establece el plan para las 24 horas siguientes.</p> <ul> <li>Se recomienda realizarla de pie junto a un tablero con la pila del sprint y el gr\u00e1fico de avance del sprint, para que todos puedan compartir informaci\u00f3n y anotar.</li> <li>En la reuni\u00f3n est\u00e1 presente todo el equipo, y pueden asistir tambi\u00e9n interesados, aunque \u00e9stos no pueden intervenir.</li> <li>Cada miembro del Equipo de Desarrollo explica Qu\u00e9 ha logrado desde el anterior Scrum Diario, Lo que har\u00e1 hasta el pr\u00f3ximo Scrum Diario y Si est\u00e1n teniendo alg\u00fan problema, o se prev\u00e9 que puede encontrar alg\u00fan impedimento.</li> <li>Adem\u00e1s, cada miembro actualiza sobre la Pila del Sprint el esfuerzo que estima pendiente en las tareas que tiene asignadas, o marca como finalizadas las ya completadas.</li> <li>El equipo es el responsable de esta reuni\u00f3n, no el Scrum Master; y no se trata de una reuni\u00f3n de \u201cinspecci\u00f3n\u201d o \u201ccontrol\u201d sino de comunicaci\u00f3n entre el equipo para compartir el estado del trabajo, chequear el ritmo de avance y colaborar en posibles dificultades o impedimentos.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Scrum%20Diario/#entradas","title":"Entradas","text":"<ul> <li>Pila del Sprint actualizada.</li> <li>Gr\u00e1fico de Quemado (Burn Down Chart) actualizado.</li> <li>Informaci\u00f3n del avance de cada miembro del equipo.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Scrum%20Diario/#resultados","title":"Resultados","text":"<ul> <li>Identificaci\u00f3n de posibles necesidades e impedimentos.</li> </ul> <p>Al final del reuni\u00f3n, el equipo refresca el Gr\u00e1fico de Quemado (Burn Down Chart), con las estimaciones actualizadas.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Scrum%20Master/","title":"Scrum Master","text":"<p>Es un facilitador y coach que ayuda al equipo Scrum a adherirse a las pr\u00e1cticas, Valores y Principios de Scrum. </p> <p>Es el responsable del cumplimiento de las reglas de un marco de scrum t\u00e9cnico, y de que todos las entiendan. </p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Scrum%20Master/#principales-responsabilidades","title":"Principales Responsabilidades.","text":"<ol> <li>Coaching y formaci\u00f3n. Capacita y asesora al equipo, al Propietario del Producto. </li> <li>Facilitaci\u00f3n de Eventos Scrum. Asegura que las ceremonias se realicen de manera efectiva y dentro del marco temporal establecido.</li> <li>Eliminaci\u00f3n de impedimentos. Identifica y resuelve cualquier obst\u00e1culo que impida el progreso del equipo, como problemas t\u00e9cnicos, falta de recursos. Incluso solicitudes de stakeholders que no pasan por el Propietario del Producto, o cambios de alcance durante el Sprint.</li> <li>Gesti\u00f3n de la din\u00e1mica del equipo. Resuelve conflictos internos.</li> </ol>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Scrum/","title":"Scrum","text":"<p>Es un enfoque iterativo e incremental que permite a los equipos entregar valor de manera r\u00e1pida y adaptarse a cambios en los Requerimientos o el entorno.</p> <p>Scrum es un marco de trabajo \u00e1gil utilizado principalmente para gestionar Proyectos complejos, como el desarrollo de software, aunque tambi\u00e9n se aplica en otros contextos como marketing, educaci\u00f3n o gesti\u00f3n de proyectos en general. La organizaci\u00f3n de esta Metodolog\u00eda es conocida como el Ciclo de Scrum. </p> <p>Scrum se basa en los Principios \u00c1giles, mencionados en el apartado de Agilidad, promoviendo el empirismo, lo que significa que las decisiones se toman en funci\u00f3n de lo que se observa y experimenta, en lugar de suposiciones o planes r\u00edgidos. </p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Scrum/#pilares","title":"Pilares","text":"<p>Los tres pilares del empirismo en Scrum son: - Transparencia. Todo el PROCESO debe ser visible para los involucrados. Esto incluye claridad en los objetivos, el progreso y los problemas, utilizando herramientas como Tableros Kanban o Definiciones de Hecho (DoD). - Inspecci\u00f3n. Los equipos revisan frecuentemente el trabajo y el progreso (en ciertos Eventos Scrum) para identificar desviaciones o mejoras necesarias. - Adaptaci\u00f3n. El equipo ajusta el producto o el proceso seg\u00fan los resultados de la inspecci\u00f3n.</p> <p>Estos son los fundamentos estructurales que sostienen el marco Scrum.  Son esenciales para que Scrum funcione correctamente.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Scrum/#valores-y-principios-de-scrum","title":"Valores y Principios de Scrum","text":"<p>Si ya dimos una vuelta por el inciso de Ciclo de Scrum y sus relacionados, quiz\u00e1s creamos que las pr\u00e1cticas y herramientas vistas son suficientes para el funcionamiento de esta metodolog\u00eda. Esto es falso, ya que las pr\u00e1cticas de Scrum no son procesos. No son pautas que garanticen resultados las ejecute quien las ejecute. Scrum se asienta sobre el conocimiento t\u00e1cito de las personas, as\u00ed como sobre unos valores organizativos. Las pr\u00e1cticas son s\u00f3lo las ramas del \u00e1rbol y, sin unas buenas ra\u00edces, no dar\u00e1n frutos. </p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Tableros%20Kanban/","title":"Tableros Kanban","text":"<p>Kanban es un marco de trabajo \u00e1gil (Modelos \u00c1giles) que aunque no es parte de Scrum, se complementa con este en algunos aspectos.  Una herramienta de Kanban es el Tablero Kanban.</p> <p>Herramienta visual (f\u00edsica o digital) que representa el flujo de trabajo mediante columnas que reflejan las etapas del proceso (por ejemplo, \"Por hacer\", \"En progreso\", \"Hecho\"). Cada tarea se representa con una tarjeta que se mueve a trav\u00e9s de las columnas. </p> <ul> <li>Columnas: Cada columna representa una etapa del flujo de trabajo. Se personalizan seg\u00fan el proceso del equipo.</li> <li>Tarjetas: Cada tarea o elemento de trabajo se representa con una tarjeta (f\u00edsica o digital) que se mueve a trav\u00e9s de las columnas a medida que avanza en el proceso.</li> <li>L\u00edmite de Trabajo en Curso (WIP, Work In Process): Se establecen l\u00edmites en las columnas para restringir la cantidad de tareas en una etapa, evitando sobrecargas y mejorando la eficiencia. Un WIP=3 de la fase \u00aben curso\u00bb indica que el equipo no puede trabajar en m\u00e1s de 3 historias o tareas de forma simult\u00e1nea.</li> <li>Identificaci\u00f3n de cuellos de botella: Resalta d\u00f3nde se acumulan tareas o hay demoras.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Tableros%20Kanban/#columnas-posibles","title":"Columnas Posibles","text":"<ul> <li>Objetivos: Se marcan a largo plazo, con la idea de que todos los miembros del equipo los tengan en mente. Es una columna opcional, no siempre est\u00e1 presente. </li> <li>Backlog/Pendiente: Esta columna engloba las tareas pendientes que se pueden afrontar de forma inmediata. En el lugar m\u00e1s alto de esa columna colocaremos la tarea pendiente que tiene la m\u00e1xima prioridad, y en cuanto empecemos, la pasaremos a las siguientes columnas. </li> <li>Preparaci\u00f3n: Tambi\u00e9n es opcional. Aqu\u00ed incluimos aquellas tareas que necesitan cierta discusi\u00f3n interna antes de ser afrontadas. Cuando lo tengamos claro, pasamos a la siguiente columna. </li> <li>Desarrollo: En este espacio situamos la tarea hasta que la terminemos. Si algo falla, regresa a la columna anterior. </li> <li>Prueba: Comprobamos que todo funciona bien. En funci\u00f3n de ese examen, la tarea avanza en el tabl\u00f3n o retrocede. </li> <li>Aplicaci\u00f3n: La existencia de esta columna depende de las caracter\u00edsticas de cada tarea. Hablamos, por ejemplo, de tareas como colocar una nueva versi\u00f3n de una aplicaci\u00f3n en un servidor. </li> <li>Hecho: Cuando ya no tenemos que preocuparnos m\u00e1s de algo porque hemos terminado la tarea.</li> </ul>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Tiempo/","title":"Tiempo","text":"<p>En el contexto de Scrum, el tiempo se refiere principalmente al concepto de \"time-boxing\", que es una pr\u00e1ctica que consiste en asignar un per\u00edodo de tiempo fijo y definido para realizar una actividad o evento, sin permitir que se extienda m\u00e1s all\u00e1 de ese l\u00edmite.</p> <p>Para determinar un time-boxing, el desarrollo \u00e1gil emplea dos t\u00e1cticas posibles: incremento iterativo, o incremento continuo.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Tiempo/#incremento-iterativo","title":"Incremento Iterativo","text":"<p>El avance a trav\u00e9s de incrementos iterativos mantiene el ritmo apoy\u00e1ndose en pulsos de sprints. Por esta raz\u00f3n emplea normalmente el sprint como unidad de tiempo, y expresa la velocidad como Trabajo o tareas realizadas en un sprint.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Tiempo/#incremento-continuo","title":"Incremento Continuo","text":"<p>El avance a trav\u00e9s de un incremento continuo mantiene un flujo de avance constante sin puntos muertos ni cuellos de botella. No hay sprints, y por tanto las unidades de tiempo son d\u00edas, semanas o meses, de forma que la la velocidad se expresa en \u201cpuntos\u201d (cantidad de trabajo) por semana, d\u00eda, o mes. </p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Tiempo/#tiempo-real-vs-tiempo-ideal","title":"Tiempo real vs. Tiempo ideal","text":"<p>Tiempo real, es el tiempo de trabajo. Equivale a la jornada laboral. Tiempo ideal se refiere sin embargo al tiempo de trabajo en condiciones ideales. El tiempo ideal se emplea normalmente en estimaciones, como unidad de trabajo o esfuerzo necesario. Ejemplo: \u201cEsa tarea tiene un tama\u00f1o de 3 horas ideales\u201d. Tiempo ideal no es una unidad de tiempo, sino de trabajo o esfuerzo necesario.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Trabajo/","title":"Trabajo","text":"<p>En Scrum, el trabajo se refiere a las actividades realizadas por el equipo para entregar un producto, siguiendo los principios de la metodolog\u00eda \u00e1gil.</p> <p>Scrum organiza el trabajo en torno a la creaci\u00f3n de un incremento de producto funcional al final de cada Sprint (un per\u00edodo fijo de Tiempo)</p> <p>Medir el trabajo en Scrum puede ser necesario por dos razones:  - Para registrar el ya hecho, o  - Para estimar anticipadamente, el que se debe realizar. En ambos casos se necesita una unidad para el mismo.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Trabajo/#trabajo-realizado","title":"Trabajo Realizado","text":"<p>Trabajo realizado. Para medir el trabajo realizado basta con contabilizar lo ya realizado con la unidad empleada: l\u00edneas de c\u00f3digo, puntos de funci\u00f3n, horas trabajadas, etc. Es posible que otros procesos de la organizaci\u00f3n necesiten registrar el esfuerzo invertido, y por lo tanto sea necesario su registro, pero no debe emplearse para calcular el avance del proyecto. La gesti\u00f3n \u00e1gil no determina el grado de avance del proyecto por el trabajo realizado, sino por el pendiente de realizar.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Trabajo/#trabajo-pendiente-a-realizar","title":"Trabajo Pendiente a Realizar","text":"<p>Trabajo pendiente a realizar. Scrum mide el trabajo pendiente para: - Estimar esfuerzo y tiempo previsto para realizar un trabajo (tareas, Historias de Usuario o epics). - Determinar el grado de avance del Proyecto, y en especial en cada sprint.</p> <p>\u00bfPor qu\u00e9 decimos estimar tiempo y esfuerzo previsto?. Porque el trabajo necesario para realizar un requisito o una historia de usuario no se puede prever de forma absoluta, ya que las funcionalidades no son realidades de soluci\u00f3n \u00fanica. Y por consecuencia de no poder medir con precisi\u00f3n el trabajo, no podremos saber cu\u00e1nto tiempo necesitar\u00e1. Adem\u00e1s de que una misma tarea, realizada por una misma persona requerir\u00e1 diferentes tiempos en situaciones distintas. En resumen, no es posible estimar con precisi\u00f3n.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Trabajo/#unidades-de-trabajo","title":"Unidades de Trabajo","text":"<p>Un trabajo puede dimensionarse midiendo el producto que se construye, como los tradicionales puntos de funci\u00f3n de COCOMO (modelo matem\u00e1tico de base emp\u00edrica utilizado para estimaci\u00f3n de costos); o el tiempo que cuesta realizarlo. En la gesti\u00f3n \u00e1gil se suelen utilizar Puntos de Historia para este cometido.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/","title":"Valores y Principios de Scrum","text":"<p>La Agilidad no la proporciona el cumplimiento de pr\u00e1cticas, sino de valores. Reflejan la mentalidad y la cultura necesarias para que el equipo trabaje de manera efectiva y alineada con los objetivos del proyecto.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#valores","title":"Valores","text":"<p>Estos valores son...</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#respeto","title":"Respeto","text":"<p>Los miembros del equipo deben confiar entre ellos y respetar sus conocimientos y capacidades.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#compromiso","title":"Compromiso","text":"<p>Cada integrante del equipo se compromete a alcanzar los objetivos del equipo y del proyecto, trabajando con dedicaci\u00f3n para cumplir con las metas establecidas, aunque manteniendo flexibilidad ante cambios.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#responsabilidad-y-autodisciplina","title":"Responsabilidad y Autodisciplina","text":"<p>No disciplina impuesta.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#enfoque","title":"Enfoque","text":"<p>El equipo se concentra en los objetivos del Sprint y las prioridades definidas, evitando distracciones y asegurando que el trabajo se centre en lo que aporta mayor valor al producto y al cliente.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#principios","title":"Principios","text":"<p>Los principios, por otra parte, son el soporte de las pr\u00e1cticas. Estos son</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#entrega-de-valor","title":"Entrega de Valor","text":"<p>Entendiendo como tal a la entrega temprana y continua de valor al cliente, para lo que es necesario que \u00e9ste colabore con el equipo y se comparta y comprenda su visi\u00f3n.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#mejora-continua","title":"Mejora Continua","text":"<p>En Agilidad se reflexiona con frecuencia sobre los m\u00e9todos de trabajo, cuestionando su efectividad y adapt\u00e1ndolos. El mismo esfuerzo autocr\u00edtico se aplica tambi\u00e9n a la mejora de los productos y servicios que se ofrecen.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#desarrollo-iterativo-e-incremental","title":"Desarrollo Iterativo e Incremental","text":"<p>El producto final no se construye conforme a un plan inicial detallado y completo, sino que se arranca desde un \u00abm\u00ednimo viable\u00bb sobre el que se van a\u00f1adiendo incrementos.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#ritmo-de-trabajo-sostenible","title":"Ritmo de Trabajo Sostenible","text":"<p>Alcanzar un ritmo de trabajo que evite la Ley de Parkinson (el trabajo se expande hasta llenar el tiempo disponible para que se termine) y la presi\u00f3n al descubrir los retrasos demasiado tarde.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#atencion-continua-a-la-excelencia","title":"Atenci\u00f3n Continua a la Excelencia","text":"<p>Empleo de t\u00e9cnicas que garanticen la calidad de los productos y servicios y permitan detectar errores con antelaci\u00f3n.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#operativa-visible","title":"Operativa Visible","text":"<p>La informaci\u00f3n se comparte con claridad para facilitar la colaboraci\u00f3n, y que todo el equipo conozca el estado del producto y aporte ideas.</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#cadencia-y-sincronizacion-global","title":"Cadencia y Sincronizaci\u00f3n Global","text":"<p>Se busca predecir la frecuencia de reuniones y fechas de entrega, por ejemplo sincronizando los sprints de los diferentes equipos (si se trata de m\u00e1s de un equipo trabajando en productos o servicios relacionados).</p>"},{"location":"Scrum%20Master%20-%20Scrum%20Manager/Valores%20y%20Principios%20de%20Scrum/#personas-sobre-procesos","title":"Personas sobre Procesos","text":"<p>La inteligencia colectiva del equipo, su conocimiento t\u00e1cito, es responsable de la calidad del producto.</p>"},{"location":"Sommerville/Actividades%20Fundamentales%20para%20la%20Ingenier%C3%ADa%20de%20Software/","title":"Actividades Fundamentales para la Ingenier\u00eda de Software","text":"<ul> <li>El Ciclo de Vida del Desarrollo de Software (SDLC, por sus siglas en ingl\u00e9s: Software Development Life Cycle) es un marco estructurado que define las fases o etapas necesarias para planificar, dise\u00f1ar, desarrollar, probar, implementar y mantener un Software.  En este apartado clasificaremos estas etapas en actividades.</li> </ul> <p>Existen muchos diferentes PROCESOS de software, pero todos deben incluir cuatro actividades que son fundamentales para la Ingenier\u00eda del Software:     - Especificaci\u00f3n del Software: Tienen que definirse tanto la funcionalidad del software como las restricciones de su operaci\u00f3n.     - Dise\u00f1o e implementaci\u00f3n del Software: Debe desarrollarse el software para cumplir con las especificaciones.     - Validaci\u00f3n del software: Hay que validar el software para asegurarse de que cumple lo que el cliente quiere.      - Evoluci\u00f3n del software El software tiene que evolucionar para satisfacer las necesidades cambiantes del cliente.</p>"},{"location":"Sommerville/Actividades%20Fundamentales%20para%20la%20Ingenier%C3%ADa%20de%20Software/#actividades-comunes-en-la-estructura-del-proceso","title":"Actividades Comunes en la Estructura del PROCESO*","text":"<p>La estructura del PROCESO identifica ACTIVIDADES ESTRUCTURALES que por lo general son aplicables a todos los Proyectos de Software. Estas actividades obviamente pueden variar (y lo hacen) dependiendo la fuente, pero generalmente son las siguientes:     Comunicaci\u00f3n. Antes de que comience cualquier trabajo t\u00e9cnico, se busca entender los objetivos de los participantes respecto del proyecto, y reunir los requerimientos que ayuden a definir las caracter\u00edsticas y funciones del software.     Planeaci\u00f3n. \"Cualquier viaje complicado se simplifica si existe un mapa\": define el trabajo de ingenier\u00eda de software al describir las tareas t\u00e9cnicas por realizar, los riesgos probables, los recursos que se requieren, los productos del trabajo que se obtendr\u00e1n y una programaci\u00f3n de las actividades. (Esta etapa puede llevar a renegociar con el cliente ciertos aspectos)     Modelado. Crea un \"bosquejo\" del objeto por hacer a fin de entender el panorama general, los requerimientos del software y el dise\u00f1o que los satisfar\u00e1.      Construcci\u00f3n. Esta actividad combina generaci\u00f3n de c\u00f3digo y las pruebas que se requieren para descubrir errores en \u00e9ste.     Despliegue. El software (completo o como incremento) se entrega al consumidor que lo eval\u00faa y que le da retroalimentaci\u00f3n.</p> <p>Para muchos proyectos de software, las actividades estructurales se aplican en forma iterativa a medida que avanza el proyecto.</p> <p></p>"},{"location":"Sommerville/Actividades%20Fundamentales%20para%20la%20Ingenier%C3%ADa%20de%20Software/#actividades-sombrilla","title":"Actividades Sombrilla","text":"<p>Adem\u00e1s, la estructura del proceso incluye un conjunto de ACTIVIDADES SOMBRILLA que son APLICABLES A TRAV\u00c9S DE TODO EL PROCESO del software. Estas actividades aseguran la Calidad del software. Es com\u00fan que las actividades sombrilla sean las siguientes:     - Seguimiento y control del proyecto: permite que el equipo de software eval\u00fae el PROGRESO compar\u00e1ndolo con el plan del proyecto.     - Administraci\u00f3n del riesgo: eval\u00faa los RIESGOS que puedan afectar al resultado del proyecto o calidad del software.     - Revisi\u00f3n T\u00e9cnica/ Evaluaci\u00f3n: eval\u00faa los PRODUCTOS del proyecto, o iteraciones a fin de descubrir y eliminar errores antes de que se propaguen a lo largo del proceso.     - Medici\u00f3n: define y re\u00fane mediciones del proceso, proyecto y producto. M\u00e9tricas     - Administraci\u00f3n de la configuraci\u00f3n del software: administra los efectos del cambio a lo largo del proceso del software.     - Administraci\u00f3n de la reutilizaci\u00f3n: define criterios para volver a usar el producto del trabajo (incluso los componentes del software) y establece mecanismos para obtener componentes reutilizables.     - Preparaci\u00f3n y producci\u00f3n del producto del trabajo: agrupa las actividades requeridas para crear productos del trabajo, tales como modelos, documentos, registros, formatos y listas.</p>"},{"location":"Sommerville/Actividades%20Fundamentales%20para%20la%20Ingenier%C3%ADa%20de%20Software/#pero-como-estan-organizadas-todas-estas-actividades-y-tareas-que-ocurren-dentro-de-cada-una","title":"Pero, \u00bfC\u00f3mo est\u00e1n organizadas todas estas actividades y tareas que ocurren dentro de cada una?","text":"<p>Para ello, todo proceso tiene un orden para su ejecuci\u00f3n, m\u00e1s detallado en el apartado de Flujos de Proceso, clasificable en:     Flujo de Proceso Lineal. Ejecuta cada una de las cinco actividades estructurales en secuencia, comenzando por la comunicaci\u00f3n y terminando con el despliegue.     Flujo de Proceso Iterativo. Repite una o m\u00e1s de las actividades antes de pasar a la siguiente.     Flujo de Proceso Evolutivo. Realiza las actividades en forma \"circular\"     Flujo de Proceso Paralelo. Ejecuta una o m\u00e1s actividades en paralelo con otras </p>"},{"location":"Sommerville/Actividades%20Fundamentales%20para%20la%20Ingenier%C3%ADa%20de%20Software/#que-acciones-son-apropiadas-para-una-actividad-estructural-dados-la-naturaleza-del-problema-por-resolver","title":"\u00bfQu\u00e9 acciones son apropiadas para una actividad estructural, dados la naturaleza del problema por resolver?","text":"<p>Para un Proyecto de software peque\u00f1o solicitado por una persona con requerimientos sencillos y directos, la actividad de comunicaci\u00f3n tal vez no incluya algo m\u00e1s que una llamada telef\u00f3nica con el participante apropiado. Entonces, la \u00fanica acci\u00f3n necesaria es una conversaci\u00f3n telef\u00f3nica, y el conjunto de tareas que engloba son las siguientes:  1. Hacer contacto con el participante por v\u00eda telef\u00f3nica.  2. Analizar los requerimientos y tomar notas.  3. Organizar las notas por escrito en una formulaci\u00f3n breve de los requerimientos.  4. Enviar correo electr\u00f3nico al participante para que revise y apruebe</p> <p>Si el proyecto fuera considerablemente m\u00e1s complejo, con muchos participantes y cada uno con un distinto conjunto de Requerimientos, la actividad de comunicaci\u00f3n puede tener seis acciones distintas: concepci\u00f3n, indagaci\u00f3n, elaboraci\u00f3n, negociaci\u00f3n, especificaci\u00f3n y validaci\u00f3n. Cada una de estas acciones de la ingenier\u00eda del software tendr\u00e1 muchas tareas de trabajo y un n\u00famero grande de diferentes productos finales.</p> <p>As\u00ed como el Modelado es una actividad estructural en un proceso de desarrollo de software, los Modelos de PROCESO cumplen su funci\u00f3n de describir c\u00f3mo se planifica, ejecuta y gestiona el desarrollo de software.</p>"},{"location":"Sommerville/Administraci%C3%B3n%20de%20Requerimientos/","title":"Administraci\u00f3n de Requerimientos","text":"<p>Proceso formado por el conjunto de actividades que ayudan al equipo del proyecto a identificar, controlar y dar seguimiento a los requerimientos y a sus cambios en cualquier momento del desarrollo del proyecto. </p> <p>Este proceso requiere una etapa de planeaci\u00f3n, en la cual se identifican los requerimientos, se decide sobre un proceso de administraci\u00f3n del cambio, pol\u00edticas de seguimiento, herramientas de apoyo (sistemas especializados, bases de datos simples, hojas de c\u00e1lculo). </p> <p>El dicho proceso de administraci\u00f3n del cambio es el conjunto de actividades que valoran el efecto y costo de los cambios. La gesti\u00f3n del cambio en la administraci\u00f3n de requerimientos de un proyecto de software se relaciona directamente con la Gu\u00eda del PMBOK (Project Management Body of Knowledge), publicada por el Project Management Institute (PMI), ya que esta gu\u00eda proporciona un marco estandarizado para gestionar un Proyecto, incluyendo el control de cambios como un componente cr\u00edtico.</p>"},{"location":"Sommerville/Documento%20de%20Requerimientos%20del%20Sistema%20%28ERS%29/","title":"Documento de Requerimientos del Sistema (ERS)","text":"<p>Tiene que definir con exactitud lo que se implementar\u00e1, ya que es un comunicado oficial de lo que se debe implementar.  - Puede formar parte del contrato entre el comprador del sistema y los desarrolladores del software.  - Incluye tanto los requerimientos del usuario para un sistema, como una especificaci\u00f3n detallada de los requerimientos del sistema.</p> <p>Son esenciales los documentos de requerimientos cuando un contratista externo dise\u00f1a el sistema de software. Sin embargo, los m\u00e9todos de desarrollo \u00e1giles argumentan que los requerimientos cambian tan r\u00e1pidamente que un documento de requerimientos se vuelve obsoleto tan pronto como se escribe. En lugar de un documento formal, los enfoques como la programaci\u00f3n extrema (Beck, 1999) recopilan de manera incremental requerimientos del usuario y los escriben en tarjetas como historias de usuario. </p> <p>Si se utiliza un proceso de desarrollo iterativo interno, entonces el documento de requerimientos suele ser mucho menos detallado y cualquier ambig\u00fcedad puede resolverse durante el desarrollo del sistema.</p> <p>El documento de requerimientos no debe incluir detalles de la arquitectura o el dise\u00f1o del sistema. Este documento suele tener un conjunto variado de usuarios, por lo que es interpretado desde diferentes perspectivas:     </p> <p>El nivel de detalle incluido depende del tipo de sistema a dise\u00f1ar y el proceso de desarrollo utilizado.</p>"},{"location":"Sommerville/Documento%20de%20Requerimientos%20del%20Sistema%20%28ERS%29/#notaciones","title":"Notaciones","text":"<p>Debe escribir los requerimientos del usuario en lenguaje natural, con formas sencillas, diagramas intuitivos. A su vez, los requerimientos del sistema se escriben tambi\u00e9n en lenguaje natural, pero de igual modo se utilizan otras notaciones:  Los modelos gr\u00e1ficos, como UML son m\u00e1s \u00fatiles cuando es necesario mostrar c\u00f3mo cambia un estado o al describir una secuencia de acciones.</p>"},{"location":"Sommerville/Documento%20de%20Requerimientos%20del%20Sistema%20%28ERS%29/#especificacion-en-lenguaje-natural","title":"Especificaci\u00f3n en Lenguaje Natural","text":"<p>Desde los albores de la ingenier\u00eda de software, el lenguaje natural se usa para escribir los requerimientos de software. Para minimizar la ambig\u00fcedad, se recomienda:      1. Elaborar un formato est\u00e1ndar y asegurarse de que todas las definiciones de requerimientos se adhieran a dicho formato.     2. Utilizar el lenguaje de manera clara para distinguir entre requerimientos obligatorios y deseables. Los primeros con \"debe ser\", y los segundos con \"deber\u00eda ser\".     3. Usar texto resaltado para partes clave del requerimiento.     4. Evitar el uso de lenguaje t\u00e9cnico. No deduzca que los lectores entienden de ingenier\u00eda de software.     5. Siempre que sea posible, asocie una raz\u00f3n con cada requerimiento de usuario. El por qu\u00e9 se incluy\u00f3 dicho requerimiento.</p>"},{"location":"Sommerville/Documento%20de%20Requerimientos%20del%20Sistema%20%28ERS%29/#especificaciones-estructuradas","title":"Especificaciones Estructuradas","text":"<p>El lenguaje natural estructurado es una manera de escribir requerimientos del sistema, donde est\u00e1 limitada la libertad del escritor Cuando use una forma est\u00e1ndar para especificar requerimientos funcionales, debe incluir la siguiente informaci\u00f3n:     1. Una descripci\u00f3n de la funci\u00f3n o entidad a especificar.     2. Una descripci\u00f3n de sus entradas y sus procedencias.     3. Una descripci\u00f3n de sus salidas y a d\u00f3nde se dirigen.     4. Datos requeridos para el c\u00e1lculo/acci\u00f3n.     5. Descripci\u00f3n de la acci\u00f3n que se va a tomar.     6. Una precondici\u00f3n que establece lo que debe ser verdadero antes de llamar a la funci\u00f3n, y una postcondici\u00f3n que especifica lo que es verdadero despu\u00e9s de llamar a la funci\u00f3n.     7. Efectos colaterales.</p>"},{"location":"Sommerville/Documento%20de%20Requerimientos%20del%20Sistema%20%28ERS%29/#estructura-para-el-documento-basado-en-estandar-ieee-1998","title":"Estructura para el documento basado en Est\u00e1ndar IEEE, 1998","text":"<p>Cap\u00edtulos: - Prefacio: Debe definir el n\u00famero esperado de lectores del documento, as\u00ed como describir su historia de versiones, junto con sus causas y cambios realizados. - Introducci\u00f3n: Describe las funciones del sistema y c\u00f3mo funcionar\u00e1 con otros sistemas, adem\u00e1s de c\u00f3mo se ajusta con objetivos empresariales o estrat\u00e9gicos de la organizaci\u00f3n que comisiona el software. - Glosario: Define los t\u00e9rminos t\u00e9cnicos usados en el documento. - Definici\u00f3n de requerimientos del usuario: Aqu\u00ed se representan los servicios que ofrecen al usuario. Requerimientos no funcionales del sistema. Esta descripci\u00f3n puede usar lenguaje natural, diagramas u otras observaciones que sean comprensibles para los clientes. - Arquitectura del sistema: Panorama de alto nivel de la arquitectura anticipada del sistema, destacando los componentes arquitect\u00f3nicos que sean de reutilizaci\u00f3n. - Especificaci\u00f3n de requerimientos del sistema: Debe representar los requerimientos funcionales y no funcionales con m\u00e1s detalle. - Modelos del sistema: modelos gr\u00e1ficos del sistema que muestren las relaciones entre componentes del sistema, el sistema y su entorno. Algunos especificados en Metodolog\u00edas de Modelado - Evoluci\u00f3n del sistema: Describe los supuestos fundamentales sobre los que se basa el sistema, y cualquier cambio anticipado debido a hardware, necesidades del usuario, etc. Esta secci\u00f3n es \u00fatil para los dise\u00f1adores del sistema, pues los ayuda a evitar decisiones de dise\u00f1o que restringir\u00edan probablemente futuros cambios al sistema. - Ap\u00e9ndices: Brindan informaci\u00f3n espec\u00edfica y detallada que se relaciona con la aplicaci\u00f3n a desarrollar. Requisitos de hardware (configuraci\u00f3n m\u00ednima y \u00f3ptima) y bases de datos (organizaci\u00f3n l\u00f3gica y relaciones entre datos). - \u00cdndice: Puede ser un \u00edndice alfab\u00e9tico normal, uno de diagramas, un \u00edndice de funciones, etc\u00e9tera.</p> <p>Hay distintas versiones respecto a lo que debe incluir la ERS seg\u00fan el est\u00e1ndar IEEE, es por ello que se adjunta otro modelo propuesto (apunte te\u00f3rico): </p>"},{"location":"Sommerville/Ingenier%C3%ADa%20de%20Requerimientos/","title":"Ingenier\u00eda de Requerimientos","text":"<p>Su principal tarea consiste en la generaci\u00f3n de especificaciones correctas que describan con claridad, sin ambig\u00fcedades, en forma consistente y compacta, el comportamiento del sistema; de esta manera, se pretende minimizar los problemas relacionados al desarrollo de sistemas.</p> <ul> <li>Es el PROCESO por el cual se transforman los Requerimientos declarados por los clientes, ya sean hablados o escritos, a especificaciones precisas. </li> <li>Estas especificaciones en lo ideal son no ambiguas, consistentes y completas del comportamiento del Sistema. </li> <li>Comienza durante la actividad de comunicaci\u00f3n y contin\u00faa en la de Modelado.  En general, es el proceso de descubrir, analizar, documentar y verificar servicios y restricciones del sistema.</li> </ul> <p>[!Pressman 1993]</p> <p>\"Enfoque sist\u00e9mico para recolectar, organizar y documentar los requerimientos del sistema; es tambi\u00e9n el proceso que establece y mantiene acuerdos sobre los cambios de requerimientos, entre los clientes y el equipo del proyecto\"</p> <p>Subclasificaci\u00f3n de Requerimientos</p> <p>Estudios realizados muestran que un gran porcentaje de los proyectos de software fracasan por no realizar un estudio previo de requisitos.</p> <p>Los requisitos de un sistema son definidos en las primeras etapas de desarrollo del mismo.  </p>"},{"location":"Sommerville/Ingenier%C3%ADa%20de%20Requerimientos/#aspectos-claves-para-definir-requerimientos","title":"Aspectos Claves para Definir Requerimientos","text":"<p>\u2022 Los requerimientos no son obvios y vienen de muchas fuentes. \u2022 Son dif\u00edciles de expresar en palabras (el lenguaje natural es ambiguo). \u2022 Nunca son iguales. \u2022 Los requerimientos est\u00e1n relacionados unos con otros, y se relacionan con otras partes del proceso. \u2022 Un requerimiento puede cambiar a lo largo del ciclo de desarrollo. \u2022 Son dif\u00edciles de cuantificar, ya que son particulares a cada proyecto. </p> <p>La ingenier\u00eda de requerimientos est\u00e1 formada por una serie de procesos bien diferenciados. Aquellos son los Procesos de la Ingenier\u00eda de Requerimientos de Software, y pueden ser vistos en la siguiente imagen:</p> <p>Este modelo en espiral acomoda enfoques al desarrollo, los requerimientos se elaboraran con diferentes niveles de detalle.  En la pr\u00e1ctica, esta ingenier\u00eda es un proceso iterativo donde las actividades est\u00e1n entrelazadas. La imagen muestra este entrelazado. La cantidad de tiempo y esfuerzo dedicados a cada actividad en cada iteraci\u00f3n depende de la etapa del proceso global y el tipo de sistema que est\u00e1 siendo desarrollado.</p>"},{"location":"Sommerville/Ingenier%C3%ADa%20de%20Requerimientos/#otras-perspectivas","title":"Otras Perspectivas","text":"<p>Algunas personas consideran la ingenier\u00eda de requerimientos como el proceso de aplicar un m\u00e9todo de an\u00e1lisis estructurado, tal como el an\u00e1lisis con Enfoque Orientado a Objetos. Esto implica analizar el sistema y desarrollar un conjunto de Modelos gr\u00e1ficos del sistema, como los Diagrama de Casos de Uso, o referenciados en Metodolog\u00edas de Modelado, que luego sirven como especificaci\u00f3n del sistema.</p> <p>Aunque los m\u00e9todos estructurados desempe\u00f1an un papel en el proceso de ingenier\u00eda de requerimientos, hay mucho m\u00e1s ingenier\u00eda de requerimientos de la que se cubre con dichos m\u00e9todos. La adquisici\u00f3n de requerimientos, en particular, es una actividad centrada en la gente, y a las personas no les gustan las restricciones impuestas por modelos de sistema r\u00edgidos.</p>"},{"location":"Sommerville/Procesos%20de%20la%20Ingenier%C3%ADa%20de%20Requerimientos%20de%20Software/","title":"Procesos de la Ingenier\u00eda de Requerimientos de Software","text":"<p>Los PROCESOS de ingenier\u00eda de requerimientos incluyen cuatro actividades de alto nivel. \u00c9stas se enfocan en:     </p>"},{"location":"Sommerville/Procesos%20de%20la%20Ingenier%C3%ADa%20de%20Requerimientos%20de%20Software/#estudio-de-factibilidad","title":"Estudio de Factibilidad","text":"<p>Valorar si el sistema es \u00fatil para la empresa (o cliente final), y si las necesidades identificadas del usuario se cubren con las actuales tecnolog\u00edas de software y hardware. </p>"},{"location":"Sommerville/Procesos%20de%20la%20Ingenier%C3%ADa%20de%20Requerimientos%20de%20Software/#adquisicion-y-analisis","title":"Adquisici\u00f3n y An\u00e1lisis","text":"<p>Descubrir requerimientos. Actividad centrada en la gente.  Los ingenieros de software trabajan con clientes y usuarios finales del sistema para descubrir el Modelo de Dominio, qu\u00e9 servicios debe proporcionar el sistema, el desempe\u00f1o requerido de \u00e9ste, las restricciones de hardware, etc\u00e9tera.           Las actividades del proceso son:     1. Descubrimiento de requerimientos. \u00c9ste es el proceso de interactuar con los participantes del sistema para descubrir sus requerimientos.     2. Clasificaci\u00f3n y organizaci\u00f3n de requerimientos. Esta actividad organiza los requerimientos en grupos coherentes. Generalmente se agrupan en subsistemas en base a un modelo de la arquitectura del sistema.     3. Priorizaci\u00f3n y negociaci\u00f3n de requerimientos. Esta actividad se preocupa por priorizar los requerimientos, as\u00ed como por encontrar y resolver conflictos de requerimientos mediante la negociaci\u00f3n.     4. Especificaci\u00f3n de requerimientos. Los requerimientos se documentan e ingresan en la siguiente ronda de la espiral. Pueden producirse documentos de requerimientos formales o informales.</p> <p>La adquisici\u00f3n y el an\u00e1lisis de requerimientos es un proceso iterativo con retroalimentaci\u00f3n continua de cada actividad a otras actividades. La comprensi\u00f3n de los requerimientos por parte del analista mejora con cada ronda del ciclo. El ciclo concluye cuando est\u00e1 completo el documento de requerimientos. </p> <p>Durante esta etapa existen diferentes T\u00e9cnicas de Descubrimiento de Requerimientos utilizadas com\u00fanmente por los ingenieros.</p>"},{"location":"Sommerville/Procesos%20de%20la%20Ingenier%C3%ADa%20de%20Requerimientos%20de%20Software/#especificacion","title":"Especificaci\u00f3n.","text":"<p>Proceso de convertir dichos requerimientos en alguna forma est\u00e1ndar: El Documento de Requerimientos del Sistema (ERS) (llamado en ocasiones especificaci\u00f3n funcional).  - Esfuerzo colaborativo que involucra a analistas, clientes, usuarios, desarrolladores y gerentes.  - En principio, se debe excluir la informaci\u00f3n de dise\u00f1o durante este proceso, pero si se trata de especificar por completo un software complejo, o con mucha interacci\u00f3n con el hardware, es casi imposible no mencionar al dise\u00f1o del sistema.  Se pueden dar casos donde se tenga que dise\u00f1ar una arquitectura inicial del sistema para estructurar mejor la especificaci\u00f3n de requerimientos. </p> <p>Es un compromiso entre la comunicaci\u00f3n de c\u00f3mo ser\u00e1 el sistema para los clientes, la definici\u00f3n precisa del mismo para desarrolladores y examinadores, y la inclusi\u00f3n de Informaci\u00f3n sobre la posible evoluci\u00f3n del sistema, para evitar decisiones de dise\u00f1o restrictivas a futuro.</p>"},{"location":"Sommerville/Procesos%20de%20la%20Ingenier%C3%ADa%20de%20Requerimientos%20de%20Software/#validacion","title":"Validaci\u00f3n.","text":"<ul> <li>Comprobar que los Requerimientos definan realmente el sistema que quiere el cliente.</li> <li>Y que los Requerimientos cumplan con sus caracter\u00edsticas deseables. Esta actividad analiza la especificaci\u00f3n a fin de garantizar que todos ellos han sido enunciados sin ambig\u00fcedades; que se corrigieron inconsistencias, y que los productos del trabajo se presentan conforme a los est\u00e1ndares establecidos. </li> <li>El mecanismo principal de validaci\u00f3n de los requerimientos es la Revisi\u00f3n T\u00e9cnica.  Durante este proceso, se realizan diferentes tipos de validaciones al documento:<ol> <li>De validez: \u00bfLas funciones especificadas son las requeridas?</li> <li>De consistencia: Los requerimientos no deben estar en conflicto.</li> <li>De totalidad: El documento debe definir todas las funciones y restricciones pretendidas por el usuario del sistema.</li> <li>De realismo: \u00bfLas funciones pueden implementarse?</li> <li>Verificabilidad: Se debe poder escribir pruebas que demuestren que el sistema entregado cumpla cada requerimiento especificado. Verificables.</li> </ol> </li> </ul> <p>Es dif\u00edcil demostrar que un conjunto de requerimientos no cubre las necesidades de los usuarios. Para ello, estos \u00faltimos necesitan una imagen del sistema en operaci\u00f3n. Como resultado, rara vez usted encontrar\u00e1 todos los problemas de requerimientos durante el proceso de validaci\u00f3n de requerimientos.</p>"},{"location":"Sommerville/Procesos%20de%20la%20Ingenier%C3%ADa%20de%20Requerimientos%20de%20Software/#administracion-de-requerimientos","title":"Administraci\u00f3n de Requerimientos","text":"<p>Pr\u00e1cticamente en todos los sistemas cambian los requerimientos. Al proceso de administrar tales requerimientos cambiantes se le llama Administraci\u00f3n de Requerimientos.</p>"},{"location":"Sommerville/Subclasificaci%C3%B3n%20de%20Requerimientos/","title":"Subclasificaci\u00f3n de Requerimientos","text":"<p>[!Sommerville 1999] \"Los requerimientos pueden tomar la forma de restricciones sobre los procesos de desarrollo del sistema\"</p>"},{"location":"Sommerville/Subclasificaci%C3%B3n%20de%20Requerimientos/#a-quien-pertenecen","title":"A qui\u00e9n pertenecen","text":"<p>La primera clasificaci\u00f3n para los requerimientos la podemos hacer en base a qu\u00e9 o qui\u00e9n pertenecen:  - Los requerimientos del usuario son enunciados, en un lenguaje natural junto con diagramas, acerca de qu\u00e9 servicios esperan los usuarios del sistema.  - Deben describir los requerimientos funcionales y no funcionales de forma comprensible. </p> <ul> <li>Los requerimientos del Sistema son descripciones de las funciones, los servicios y las restricciones operacionales del sistema. </li> <li>Son versiones extendidas de los requerimientos del usuario que los desarrolladores usan como punto de partida. </li> <li>Idealmente, no deben ocuparse de c\u00f3mo se dise\u00f1a o implementa el sistema. </li> <li>Especificaciones completas y detalladas de todo el sistema, que pueden ser inclu\u00eddas como parte del contrato para la implementaci\u00f3n del sistema.     </li> </ul>"},{"location":"Sommerville/Subclasificaci%C3%B3n%20de%20Requerimientos/#comportamiento","title":"Comportamiento","text":"<p>La segunda clasificaci\u00f3n refiere m\u00e1s espec\u00edficamente al comportamiento y performance del sistema, entre Requerimientos Funcionales y No Funcionales: - Requerimientos Funcionales. Definen las funciones que el sistema ser\u00e1 capaz de realizar.  - Describen las transformaciones que el sistema deber\u00e1 realizar sobre las entradas para producir las salidas.  - Pueden referirse tambi\u00e9n a lo que el sistema no debe hacer. C\u00f3mo debe comportarse el sistema en situaciones espec\u00edficas. - Requerimientos No Funcionales. Refieren a caracter\u00edsticas que de una u otra forma pueden limitar al sistema como, por ejemplo: el rendimiento, interfaces de usuario, fiabilidad, mantenimiento, seguridad, portabilidad, est\u00e1ndares, etc.  - Se refieren a propiedades emergentes del sistema. Una falla de un requerimiento de este tipo podr\u00eda inutilizar un sistema. Limitaciones impuestas por los est\u00e1ndares. </p> <p>Gracias al diagrama, podemos ver que los requerimientos no funcionales provienen de caracter\u00edsticas requeridas del software (requerimientos del producto), la organizaci\u00f3n que desarrolla el software (requerimientos de la organizaci\u00f3n) o de fuentes externas: - Requerimientos del producto: especifican o restringen el comportamiento del software.  - Los ejemplos incluyen requerimientos de rendimiento sobre qu\u00e9 tan r\u00e1pido se debe ejecutar el sistema y cu\u00e1nta memoria requiere. - Requerimientos de la organizaci\u00f3n: derivados de pol\u00edticas y procedimientos en la organizaci\u00f3n del cliente y del desarrollador.  - Especifican el lenguaje de programaci\u00f3n, est\u00e1ndares del entorno, y requerimientos ambientales que definen el entorno de operaci\u00f3n del sistema. - Requerimientos externos: derivados de factores externos al sistema.  - En ellos se incluyen requerimientos regulatorios que establecen lo que debe hacer el sistema para ser aprobado en su uso por un regulador, o agente externo a la organizaci\u00f3n o proyecto.</p> <p>MHC-PMS como sistema a desarrollar </p> <p>Siempre que sea posible, se deber\u00e1n escribir de manera cuantitativa los requerimientos no funcionales, de manera que puedan ponerse objetivamente a prueba. La siguiente figura muestra las m\u00e9tricas que se utilizan para especificar propiedades no funcionales del sistema.      Aunque en la pr\u00e1ctica, los usuarios de un sistema suelen encontrar dif\u00edcil traducir sus metas en requerimientos mensurables. Para algunas metas, como la mantenibilidad, no hay m\u00e9tricas para usarse.</p>"},{"location":"Sommerville/Subclasificaci%C3%B3n%20de%20Requerimientos/#conflictos-entre-requerimientos","title":"Conflictos entre requerimientos","text":"<p>Los requerimientos no funcionales entran a menudo en conflicto e interact\u00faan con otros requerimientos funcionales o no funcionales. Por ejemplo, el requerimiento de autenticaci\u00f3n para el sistema MHC-PMS requiere, indiscutiblemente, la instalaci\u00f3n de un lector de tarjetas en cada computadora unida al sistema. Sin embargo, podr\u00eda haber otro requerimiento que solicite acceso m\u00f3vil al sistema desde las computadoras port\u00e1tiles de m\u00e9dicos o enfermeras. Esto se conoce como un problema de entendimiento durante la tarea de Indagaci\u00f3n en la ingenier\u00eda de requerimientos.</p>"},{"location":"Sommerville/T%C3%A9cnicas%20de%20Descubrimiento%20de%20Requerimientos/","title":"T\u00e9cnicas de Descubrimiento de Requerimientos","text":"<p>Las t\u00e9cnicas de descubrimiento de Requerimientos son esenciales para identificar las necesidades de los usuarios en proyectos de software.</p> <p>Todas las diferentes fuentes de requerimientos (participantes, dominio, sistemas) durante el proceso de Adquisici\u00f3n y An\u00e1lisis de requerimientos se representan como puntos de vista del sistema, y cada visi\u00f3n muestra un subconjunto de requerimientos. Es recomendable usar estos puntos de vista para estructurar tanto el descubrimiento como la documentaci\u00f3n de los requerimientos del sistema.</p> <p>Un punto de vista es una forma de recopilar y organizar un conjunto de requerimientos de un grupo de participantes con algo en com\u00fan. Los puntos de vista pueden provenir de usuarios finales, administradores, etc\u00e9tera. Ayudan a identificar a los individuos y sus requerimientos y a estructurar los requerimientos para an\u00e1lisis.</p>"},{"location":"Sommerville/T%C3%A9cnicas%20de%20Descubrimiento%20de%20Requerimientos/#entrevistas","title":"Entrevistas","text":"<p>Las entrevistas formales o informales con participantes del sistema son una parte de la mayor\u00eda de los procesos de ingenier\u00eda de requerimientos. El equipo de ingenieros formula preguntas a los participantes sobre el sistema que actualmente usan y el sistema que se va a desarrollar. Los requerimientos se derivan de las respuestas a dichas preguntas. Las entrevistas pueden ser:     Entrevistas cerradas, donde los participantes responden a un conjunto de preguntas preestablecidas.     Entrevistas abiertas, en las cuales no hay preguntas o agenda predefinida. Los ingenieros exploran un rango de conflictos con los participantes del sistema. En la pr\u00e1ctica, las entrevistas con los participantes son por lo general una combinaci\u00f3n de ambas.</p> <p>La efectividad de esta t\u00e9cnica est\u00e1 \"librada a la suerte\" por la calidad de la conversaci\u00f3n, decisiones sobre mencionar o no una cuesti\u00f3n, jerga espec\u00edfica, dificultad para expresarse, malinterpretaciones, qu\u00e9 quiere revelar el entrevistado sobre la estructura y toma de decisiones de la organizaci\u00f3n, etc...</p> <p>(El siguiente es quiz\u00e1s otro ejemplo de autores que se contradicen, Sommerville trata a las Historias de Usuario como un tipo de escenario, mientras que en Users Stories Applied, el autor dedica un cap\u00edtulo entero a diferenciar las H.U de otras t\u00e9cnicas de descubrimiento de requerimientos. Aunque ambos ejemplifican los escenarios de forma sutilmente diferente).</p>"},{"location":"Sommerville/T%C3%A9cnicas%20de%20Descubrimiento%20de%20Requerimientos/#escenarios","title":"Escenarios","text":"<p>Por lo general, las personas encuentran m\u00e1s sencillo vincularse con ejemplos reales que con descripciones abstractas. \u00datiles para detallar un bosquejo de descripci\u00f3n de requerimientos.  Son ejemplos sobre interacciones de forma Usuario-Sistema. Cada escenario abarca com\u00fanmente una interacci\u00f3n o un n\u00famero peque\u00f1o de interacciones posibles.. Un escenario puede incluir:     1. Una descripci\u00f3n de qu\u00e9 esperan el sistema y los usuarios cuando inicia el escenario. SUPOSICI\u00d3N INICIAL     2. Una descripci\u00f3n en el escenario del flujo normal de los eventos.     3. Una descripci\u00f3n de qu\u00e9 puede salir mal y c\u00f3mo se manejar\u00eda.     4. Informaci\u00f3n de otras actividades que est\u00e9n en marcha al mismo tiempo.     5. Una descripci\u00f3n del estado del sistema cuando termina el escenario. Estos \u00faltimos pueden escribirse como texto, complementarse con diagramas, tomas de pantallas, etc\u00e9tera.     </p>"},{"location":"Sommerville/T%C3%A9cnicas%20de%20Descubrimiento%20de%20Requerimientos/#caso-de-uso","title":"Caso de Uso","text":"<p>Los casos de uso son una t\u00e9cnica de descubrimiento de requerimientos que se introdujo por primera vez en el m\u00e9todo Objectory (mejor referenciado en el apartado de Historia de UML). Ahora se ha convertido en una caracter\u00edstica fundamental del modelado de lenguaje unificado (UML).  Diagrama de Casos de Uso</p>"},{"location":"Sommerville/T%C3%A9cnicas%20de%20Descubrimiento%20de%20Requerimientos/#etnografia","title":"Etnograf\u00eda","text":"<p>Los sistemas de software no existen aislados. Se usan en un contexto social y organizacional, y dicho escenario podr\u00eda derivar o restringir los requerimientos del sistema de software. La etnograf\u00eda es una t\u00e9cnica de observaci\u00f3n que se usa para entender los procesos operacionales y ayudar a derivar requerimientos de apoyo para dichos procesos.  Un analista se adentra en el ambiente laboral donde se usar\u00e1 el sistema y toma notas acerca de las tareas existentes en que intervienen los participantes del sistema.  Ayuda a descubrir requerimientos impl\u00edcitos del sistema que reflejan las formas actuales en que trabaja la gente, en vez de los procesos formales definidos por la organizaci\u00f3n.  La etnograf\u00eda puede combinarse con la creaci\u00f3n de prototipos, de modo que se requieran menos ciclos de refinamiento del prototipo. Sin embargo, debido a su enfoque en el usuario final, no siempre es adecuado para descubrir requerimientos de la organizaci\u00f3n o de dominio. En consecuencia, la etnograf\u00eda debe usarse para complementar otros enfoques, como uno de los mencionados m\u00e1s arriba.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Criterios%20de%20Aceptaci%C3%B3n/","title":"Criterios de Aceptaci\u00f3n","text":"<p>Es importante saber las expectativas de los clientes. Estas expectativas son mejor capturadas en forma de Criterios de Aceptaci\u00f3n. </p> <p>En el desarrollo de software, cumplir con las expectativas quiere decir que el sistema cumpla con lo que se espera de este por parte del cliente. De esta forma, los criterios de aceptaci\u00f3n funcionan como el aviso para el desarrollador sobre cu\u00e1ndo han completado de producir la funcionalidad esperada. </p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Criterios%20de%20Aceptaci%C3%B3n/#caracteristicas-principales","title":"Caracter\u00edsticas principales:","text":"<ul> <li>Formato flexible: No hay un formato estricto, pero suelen escribirse en forma de lista de condiciones o escenarios. M\u00e1s formatos son detallados en Testing en Ambientes \u00c1giles (Casos de Prueba y Given-When-Then (Dado-Cuando-Entonces)).  </li> <li>Definen el \"qu\u00e9\" y no el \"c\u00f3mo\": Centrados en el resultado esperado y no en la implementaci\u00f3n t\u00e9cnica.</li> <li>Verificables: Deben ser claros, objetivos y medibles.<ul> <li>Escritos desde la perspectiva del usuario: Reflejan el comportamiento esperado del sistema desde lo que ve el usuario.</li> </ul> </li> </ul> <p>Adem\u00e1s, estos criterios no son est\u00e1ticos, estos suelen refinarse con el tiempo durante el desarrollo, o incluso pueden ser descubiertos nuevos criterios durante discusiones (por ejemplo, una historia sobre \"iniciar sesi\u00f3n\" podr\u00eda no mencionar inicialmente la autenticaci\u00f3n multifactor, pero esto podr\u00eda surgir en la conversaci\u00f3n).</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Equipo%20Cliente/","title":"Equipo Cliente","text":"<p>En un Proyecto ideal, se tendr\u00eda a un cliente \u00fanico que prioriza el trabajo para los desarrolladores, responde sus preguntas, usa y comprueba el Software finalizado, y escribe todas las Historias de Usuario. </p> <p>Este escenario es demasiado exigente, y por ello es que se suele establecer un equipo cliente. - Un equipo que se asegurar\u00e1 que el Sistema cumpla con las necesidades del usuario final, y que escribir\u00e1 las historias de usuario.</p> <p>Con este equipo, se busca: -  Proporcionar claridad sobre los requisitos. - Tomar decisiones sobre qu\u00e9 funcionalidades se desarrollan y en qu\u00e9 orden. - Definir y priorizar las historias de usuario.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Equipo%20Cliente/#integrantes","title":"Integrantes","text":"<p>Este equipo puede incluir testers, un product owner, usuarios finales, o representaciones de estos.  Con estos integrantes, es claro que el equipo cliente est\u00e1n mejor parados para describir el comportamiento del producto a trav\u00e9s de historias.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Estructura%20de%20una%20Historia%20de%20Usuario/","title":"Estructura de una Historia de Usuario","text":""},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Estructura%20de%20una%20Historia%20de%20Usuario/#como-quiero-para","title":"&lt; COMO &gt; &lt; QUIERO &gt; &lt; PARA &gt;","text":"<p>Las historias de usuario suelen expresarse en una sencilla frase, y estructurarse siguiendo el formato:   Describiremos cada sentencia c\u00f3mo si estuvi\u00e9ramos creando la historia.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Estructura%20de%20una%20Historia%20de%20Usuario/#como-perfilrol","title":"Como {perfil/rol}","text":"<p>\u00bfPara qui\u00e9n lo estamos creando? No solo buscamos un cargo, sino que buscamos el perfil de una persona. Si definimos a Pablo como este rol, todos los miembros del equipo deben comprender a Pablo. Debemos entender c\u00f3mo piensa Pablo y ponernos en su lugar para escribir las Historias de Usuario.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Estructura%20de%20una%20Historia%20de%20Usuario/#quiere","title":"Quiere","text":"<p>Aqu\u00ed describimos cu\u00e1l es su intenci\u00f3n de forma inmediata. \u00bfQu\u00e9 es lo que intenta hacer Pablo realmente de forma que el sistema le d\u00e9 lo que busca?. Describimos la funcionalidad espec\u00edfica que el usuario desea, y no las funcionalidades o implementaciones que el sistema tiene.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Estructura%20de%20una%20Historia%20de%20Usuario/#para","title":"Para","text":"<p>\u00bfCu\u00e1l es la ventaja general que est\u00e1 intentando conseguir el usuario?. \u00bfCu\u00e1l es la finalidad \u00faltima del usuario?. Explica el beneficio o valor que el usuario espera obtener al tener esta funcionalidad.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Estructura%20de%20una%20Historia%20de%20Usuario/#ejemplo","title":"Ejemplo","text":"<p>COMO usuario registrado en una tienda en l\u00ednea, QUIERO poder guardar mis productos favoritos en una lista, PARA poder comprarlos m\u00e1s tarde sin tener que buscarlos de nuevo.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Estructura%20de%20una%20Historia%20de%20Usuario/#elementos-de-una-historia-de-usuario","title":"Elementos de una Historia de Usuario","text":"<p> - N\u00famero de HU. Identifica una historia de usuario. - Prioridad. Define la prioridad la historia seg\u00fan una t\u00e9cnica. La define el Propietario del Producto.  - T\u00edtulo/Descripci\u00f3n breve. Sigue el formato &lt; como &gt; &lt; quiero &gt; &lt; para &gt; - Estimaci\u00f3n. Es un valor que indica el esfuerzo requerido para completar la historia. - Conversaci\u00f3n. Surge de aclarar dudas con el product owner en una reuni\u00f3n personal. Se puede agregar un prototipo de interfaz. - Validaci\u00f3n. Es una lista de Criterios de Aceptaci\u00f3n que debe cumplir la HU para pasar al estado de \u201cDone\u201d (Definiciones de Hecho (DoD)) o terminada. - Programador. Persona a cargo de la historia, y de su implementaci\u00f3n en el sistema. - Riesgo. Se usa una escala seg\u00fan lo indica la gesti\u00f3n de riesgo. Ejemplo podr\u00eda ser Alto/Medio/Bajo.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Historias%20de%20Usuario/","title":"Historias de Usuario","text":"<p>Extensive upfront requirements gathering and documentation can kill a project in many ways. One of the most common is when the requirements document itself becomes a goal. A requirements document should be written only when it helps achieve the real goal of delivering some software.</p> <p>Los requerimientos del software son un problema de comunicaci\u00f3n: aquellos que quieren el software deben comunicarse con aquellos que lo desarrollan.</p> <ul> <li>Una Historia de Usuario describe funcionalidad valiosa para un usuario o comprador del Sistema. Representa espec\u00edficamente Requerimientos del usuario, m\u00e1s que la documentaci\u00f3n de los mismos. </li> <li>Son descripciones breves y simples de una funcionalidad que un usuario desea. </li> <li>Son utilizadas principalmente en Modelos \u00c1giles.</li> <li>Deben ser escritas sin el uso de lenguaje t\u00e9cnico.</li> </ul>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Historias%20de%20Usuario/#ejemplo","title":"Ejemplo","text":"<p>Para ejemplificar, usaremos el ejemplo de BigMoneyJobs.com (sitio web de b\u00fasqueda de empleo que operaba como una plataforma para conectar a profesionales con oportunidades laborales). Historias de usuario de este software ser\u00edan:     - El usuario puede buscar trabajos.     - Una compa\u00f1\u00eda puede publicar ofertas de trabajo.     - Un usuario puede limitar las visualizaciones a su perfil. Las siguientes *NO ser\u00edan ejemplos de historias de usuario:     - El software ser\u00e1 escrito en C++.     - El programa se conectar\u00e1 a la base de datos mediante (herramienta o patr\u00f3n cualquiera). Los malos ejemplos para una historia de usuario se deben a que en principio al usuario no le importan los detalles t\u00e9cnicos sobre la implementaci\u00f3n o dise\u00f1o del sistema. Las historias son escritas de forma que sean valiosas para un cliente*.</p> <p>Detalles.* Si bien en los ejemplos nos referimos a las primeras tres proposiciones como historias de usuario, vemos que son muy abarcativas y no son la mejor gu\u00eda para comenzar a desarrollar y testear, por lo que se propone una estructura mejor definida.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Historias%20de%20Usuario/#notas","title":"Notas","text":"<p>Las notas en las historias de usuario son informaci\u00f3n adicional que proporciona contexto o detalles espec\u00edficos para ayudar a los desarrolladores y otros miembros del equipo a entender mejor los requisitos. Aunque no son siempre necesarias, pueden ser muy \u00fatiles para aclarar aspectos t\u00e9cnicos, restricciones o reglas de negocio.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Historias%20de%20Usuario/#criterios-de-aceptacion","title":"Criterios de Aceptaci\u00f3n","text":""},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Historias%20de%20Usuario/#el-proceso-con-historias-de-usuario","title":"*El Proceso con Historias de Usuario*","text":"<p>Un proyecto que hace uso de H.U no se parecer\u00e1 en nada a un modelo de proceso estilo cascada, en el que la participaci\u00f3n del usuario se ver\u00e1 limitada a la etapa de recabaci\u00f3n de requerimientos y retroalimentaci\u00f3n del producto terminado.  Un proyecto que hace uso de H.U (Modelos \u00c1giles) necesita la participaci\u00f3n frecuente del equipo cliente, ya que las H.U pueden ser escritas en cualquier etapa del proyecto, y la parte m\u00e1s importante de una historia de usuario es la conversaci\u00f3n previa a escribirla.  El formato de las H.U permite una flexibilidad y adaptaci\u00f3n clave para este tipo de metodolog\u00edas. M\u00e1s razones para el uso de historias de usuario son detalladas en el apartado de Por qu\u00e9 usar Historias de Usuario</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Por%20qu%C3%A9%20usar%20Historias%20de%20Usuario/","title":"Por qu\u00e9 usar Historias de Usuario","text":"<p>\u00bfPor qu\u00e9 no simplemente especificamos un Documento de Requerimientos del Sistema (ERS), o escribimos ciertos Caso de Uso?</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Por%20qu%C3%A9%20usar%20Historias%20de%20Usuario/#enfatizan-la-comunicacion-verbal","title":"Enfatizan la comunicaci\u00f3n verbal","text":"<p>Dado que las H.U enfatizan la comunicaci\u00f3n verbal antes que escrita, aspectos importantes del sistema no son del todo capturados en un documento formal de requerimientos (poco probable a ser le\u00eddo), y pueden ser malinterpretados, supongamos: $$\\text{El sistema debe registrar direcci\u00f3n y n\u00famero telef\u00f3nico comercial o m\u00f3vil.}$$Este requerimiento que puede ser encontrado en un Documento de Requerimientos del Sistema (ERS) tiene cierta ambig\u00fcedad que podr\u00eda interpretarse como que el sistema debe registrar:$$\\text{(Direcci\u00f3n y n\u00famero telef\u00f3nico comercial) o n\u00famero m\u00f3vil.}$$o m\u00e1s bien, $$\\text{Direcci\u00f3n y (n\u00famero telef\u00f3nico comercial o m\u00f3vil).}$$Al no ser necesario el lenguaje t\u00e9cnico en una historia de usuario, tanto el equipo cliente como el desarrollador las entiende y no se da lugar a malinterpretaciones como esta.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Por%20qu%C3%A9%20usar%20Historias%20de%20Usuario/#son-comprensibles-por-todos","title":"Son comprensibles por todos","text":"<p>Tanto para desarrolladores, como para usuarios. Las especificaciones de requerimientos de usuario tienden a abusar de jerga t\u00e9cnica.  Adem\u00e1s, las conversaciones regulares fundamentales para su uso aseguran que todos tengan la misma visi\u00f3n, y al realizarse una comunicaci\u00f3n cara a cara, las H.U promueven la acumulaci\u00f3n de conocimiento t\u00e1cito/impl\u00edcito entre los miembros del equipo.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Por%20qu%C3%A9%20usar%20Historias%20de%20Usuario/#facilitan-la-planificacion-iterativa","title":"Facilitan la planificaci\u00f3n Iterativa","text":"<p>Ideales para dividir el trabajo en incrementos peque\u00f1os que puedan desarrollarse, probarse y entregarse en iteraciones cortas. El autor insiste en el uso de la t\u00e9cnica INVEST (Independiente, Negociable, Valiosa, Estimable, Peque\u00f1a, Testeable) para asegurar esta caracter\u00edstica de las historias.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/Por%20qu%C3%A9%20usar%20Historias%20de%20Usuario/#mejoran-la-estimacion-y-priorizacion","title":"Mejoran la estimaci\u00f3n y priorizaci\u00f3n.","text":"<p>Las historias permiten al equipo estimar el esfuerzo necesario utilizando t\u00e9cnicas como los puntos de historia o el tama\u00f1o relativo. Adem\u00e1s, al estar vinculadas profundamente al valor del usuario, el equipo cliente puede priorizarlas seg\u00fan su importancia estrat\u00e9gica o comercial. Esto asegura que todo el equipo trabaje en lo que m\u00e1s importa primero. En general, como vemos, son un recurso muy complementable con Modelos \u00c1giles.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/T%C3%A9cnica%20INVEST/","title":"T\u00e9cnica INVEST","text":"<p>El m\u00e9todo INVEST descrito por Bill Wake nos ayuda a escribir Historias de Usuario** y consiste en cumplir las siguientes caracter\u00edsticas: </p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/T%C3%A9cnica%20INVEST/#independiente","title":"Independiente","text":"<p>Una historia debe ser independiente de otras. La dependencia entre las historias hace que sea m\u00e1s dif\u00edcil planificar, priorizar y estimar.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/T%C3%A9cnica%20INVEST/#negociable","title":"Negociable","text":"<p>La \"tarjeta\" de la historia es tan s\u00f3lo una descripci\u00f3n corta que no incluye detalles. Los detalles se trabajan durante la etapa de \"Conversaci\u00f3n\", por ello es que decimos negociable.  Una tarjeta con demasiados detalles limita la conversaci\u00f3n con el cliente.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/T%C3%A9cnica%20INVEST/#valiosa","title":"Valiosa","text":"<p>Debe tener valor para el cliente. Una buena forma de lograr esto es hacer que el cliente las escriba. </p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/T%C3%A9cnica%20INVEST/#estimable","title":"Estimable","text":"<p>Los desarrolladores necesitan poder estimar una historia de usuario para permitir que se pueda priorizar y planificar la historia.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/T%C3%A9cnica%20INVEST/#pequena","title":"Peque\u00f1a","text":"<p>Una buena historia debe ser peque\u00f1a en esfuerzo, generalmente representando no m\u00e1s de 2-3 personas/semana de Trabajo. Una historia que es m\u00e1s grande va a tener m\u00e1s errores asociados a la estimaci\u00f3n y alcance.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/T%C3%A9cnica%20INVEST/#testeable","title":"Testeable","text":"<p>Una historia necesita poder probarse para que ocurra la etapa de \"Confirmaci\u00f3n\". Si no podemos probarla, nunca vamos a saber si la terminamos.</p>"},{"location":"Users%20Stories%20Applied%20-%20Mike%20Cohn/%C3%89picas/","title":"\u00c9picas","text":"<p>Cuando una historia es muy larga, o de este estilo, suelen ser denominadas \u00c9picas. </p> <p>Las \u00e9picas pueden ser divididas en dos o m\u00e1s Historias de Usuario m\u00e1s chicas y espec\u00edficas. </p> <p>$$\\text{\"Un usuario puede buscar trabajo seg\u00fan localizaci\u00f3n, salario, puesto, compa\u00f1\u00eda.\"}$$ es una historia que surge de la siguiente \u00e9pica:  $$\\text{\"El usuario puede buscar trabajos.\"}$$ La mejor forma de encarar el escribir una historia de usuario es que el equipo de desarrollo y el cliente se pongan de acuerdo acerca de estos detalles, y de hasta qu\u00e9 punto vale la pena mencionarlos en las historias. </p>"}]}